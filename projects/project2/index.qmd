---
title: "Synthetic Data Generation and Analysis"
author: Chaance Graves
date: "2024-11-20"
date-modified: "2024-11-23"
format:
  html:
    code-fold: true
---

# Exploring Synthetic Data Generation Techniques

This project demonstrates basic synthetic data generation and analysis using Python.

## Random Data Generation and Visualization

```{python}
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Set random seed for reproducibility
np.random.seed(42)

# Generate synthetic student test score data
def generate_student_scores(num_students=100):
    # Simulate scores for three different subjects
    math_scores = np.random.normal(loc=75, scale=10, size=num_students)
    science_scores = math_scores + np.random.normal(loc=5, scale=5, size=num_students)
    english_scores = np.random.normal(loc=70, scale=12, size=num_students)
    
    # Create a DataFrame
    student_data = pd.DataFrame({
        'Student_ID': range(1, num_students + 1),
        'Math_Score': np.round(math_scores, 2),
        'Science_Score': np.round(science_scores, 2),
        'English_Score': np.round(english_scores, 2)
    })
    
    return student_data

# Generate the synthetic dataset
students_df = generate_student_scores()

# Descriptive Statistics
print("Descriptive Statistics:")
print(students_df.describe())

# Visualization of Score Distributions
plt.figure(figsize=(12, 4))

# Subplot 1: Histogram of Scores
plt.subplot(1, 2, 1)
students_df[['Math_Score', 'Science_Score', 'English_Score']].hist(bins=15, ax=plt.gca())
plt.title('Distribution of Test Scores')
plt.tight_layout()

# Subplot 2: Box Plot of Scores
plt.subplot(1, 2, 2)
sns.boxplot(data=students_df[['Math_Score', 'Science_Score', 'English_Score']])
plt.title('Box Plot of Test Scores')
plt.tight_layout()

plt.show()

# Correlation Analysis
correlation_matrix = students_df[['Math_Score', 'Science_Score', 'English_Score']].corr()
print("\nCorrelation Matrix:")
print(correlation_matrix)

# Correlation Heatmap
plt.figure(figsize=(8, 6))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', center=0)
plt.title('Correlation Heatmap of Test Scores')
plt.tight_layout()
plt.show()
```

## Score Analysis and Insights

```{python}
# Calculate additional insights
def analyze_student_scores(df):
    # Calculate overall performance
    df['Average_Score'] = df[['Math_Score', 'Science_Score', 'English_Score']].mean(axis=1)
    
    # Identify top and bottom performers
    top_students = df.nlargest(5, 'Average_Score')
    bottom_students = df.nsmallest(5, 'Average_Score')
    
    print("\nTop 5 Students:")
    print(top_students)
    
    print("\nBottom 5 Students:")
    print(bottom_students)
    
    return df

# Perform analysis
students_df = analyze_student_scores(students_df)
```

## Key Insights

1. Demonstrates synthetic data generation techniques
2. Provides statistical analysis of generated data
3. Creates visualizations to explore data distributions
4. Shows correlation between different subject scores

## Methodology Notes

- Uses normal distribution to simulate realistic score variations
- Introduces correlations between subject scores
- Provides multiple perspectives on the synthetic dataset