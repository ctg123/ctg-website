[
  {
    "objectID": "projects/wordpress-with-lamp-stack/index.html",
    "href": "projects/wordpress-with-lamp-stack/index.html",
    "title": "WordPress with LAMP Stack",
    "section": "",
    "text": "Code\nThis Playbook will install a WordPress Content Management System (CMS) within a LAMP environment (Linux, Apache, MySQL, and PHP) on two remote servers in a private network. The LAMP versioning highlights the following for each layer:"
  },
  {
    "objectID": "projects/wordpress-with-lamp-stack/index.html#create-vagrant-private-network",
    "href": "projects/wordpress-with-lamp-stack/index.html#create-vagrant-private-network",
    "title": "WordPress with LAMP Stack",
    "section": "Create Vagrant private network",
    "text": "Create Vagrant private network\nCreating a robust sandbox environment for rapid prototyping eliminates the risk of crashing or breaking other functions when using servers or your local machine when purposed for other vital tasks. We’ll create a private network that you can install on any local device (i.e., laptop) as long as VirtualBox is available via Vagrant. The vagrantfile seen below can build test virtual machines (VM’s) for our Ansible playbook testing environment. If you prefer using a public cloud such as AWS, Azure, GCP, or Digital Ocean, the logical design is easy to follow.\n###############\n# Vagrantfile #\n###############\n\n# -*- mode: ruby -*-\n# vi: set ft=ruby :\n\n# All Vagrant configuration is done below. The \"2\" in Vagrant.configure\n# configures the configuration version (we support older styles for\n# backwards compatibility). Please don't change it unless you know what\n# you're doing.\n\nVagrant.configure(\"2\") do |config|\n  config.vm.define \"ansible-master\" do |vm1|\n    vm1.vm.box = \"bento/ubuntu-18.04\"\n    vm1.vm.hostname = \"ansible-master\"\n    vm1.vm.network \"private_network\", ip: \"10.23.45.10\"\n\n    config.vm.provider \"virtualbox\" do |vb|\n      vb.gui = false\n      vb.memory = \"4096\"\n      vb.cpus = \"2\"\n      vb.customize ['modifyvm', :id, '--cableconnected1', 'on']\n    end\n    config.vm.provision \"shell\", run: \"always\", inline: &lt;&lt;-SHELL\n        echo \"Welcome to the Ubuntu Ansible network.\"\n    SHELL\n  end\n\n  config.vm.define \"ansible-node1\" do |vm2|\n    vm2.vm.box = \"bento/ubuntu-18.04\"\n    vm2.vm.hostname = \"ansible-node1\"\n    vm2.vm.network \"private_network\", ip: \"10.23.45.20\"\n\n    config.vm.provider \"virtualbox\" do |vb|\n      vb.gui = false\n      vb.memory = \"2048\"\n      vb.cpus = \"2\"\n      vb.customize ['modifyvm', :id, '--cableconnected1', 'on']\n    end\n    config.vm.provision \"shell\", run: \"always\", inline: &lt;&lt;-SHELL\n        echo \"Welcome to the Ubuntu Ansible network.\"\n    SHELL\n  end\n  \n  config.vm.define \"ansible-node2\" do |vm3|\n    vm3.vm.box = \"bento/ubuntu-18.04\"\n    vm3.vm.hostname = \"ansible-node2\"\n    vm3.vm.network \"private_network\", ip: \"10.23.45.30\"\n\n    config.vm.provider \"virtualbox\" do |vb|\n      vb.gui = false\n      vb.memory = \"2048\"\n      vb.cpus = \"2\"\n      vb.customize ['modifyvm', :id, '--cableconnected1', 'on']\n    end\n    config.vm.provision \"shell\", run: \"always\", inline: &lt;&lt;-SHELL\n        echo \"Welcome to the Ubuntu Ansible network.\"\n    SHELL\n  end\nend"
  },
  {
    "objectID": "projects/wordpress-with-lamp-stack/index.html#configure-the-master-node-and-ssh-connection",
    "href": "projects/wordpress-with-lamp-stack/index.html#configure-the-master-node-and-ssh-connection",
    "title": "WordPress with LAMP Stack",
    "section": "Configure the Master node and SSH connection",
    "text": "Configure the Master node and SSH connection\nTo begin using Ansible to manage your server infrastructure, you need to install the Ansible software on the machine that will serve as the Ansible master node. First, connect via SSH to the virtual machine.\nPS C:\\\\..\\\\vagrant\\\\ubuntu_ansible&gt; vagrant ssh ansible-master\nBy default, Vagrant will be the user on the machine; however, an admin account with sudo privileges creates the specific purpose of using Ansible to talk to the other virtual machines in the network. Use the adduser command as the root user first to add a new user to your system:\nThere will be a prompt to enter a password of your choice.\nvagrant@ansible-master:~$ sudo -i\nroot@ansible-master:~# adduser admin\nUse the usermod command to add the user to the sudo group and test if the sudo commands work when logged into the user account.\nroot@ansible-master:~# usermod -aG sudo admin\nroot@ansible-master:~# su - admin\n\nadmin@ansible-master:~$ sudo apt-get update\nRun the following command to include the official project’s PPA (personal package archive) in your system’s list of sources:\nadmin@ansible-master:~$ sudo apt-add-repository ppa:ansible/ansible\nPress ENTER when prompted to accept the PPA addition.\nNext, refresh your system’s package index to be aware of the packages available in the newly included PPA and then proceed to install.\nadmin@ansible-master:~$ sudo apt-get update\nadmin@ansible-master:~$ sudo apt install ansible\n\nConfigure password-less authentication\nWe will set up password-less authentication for our admin user from master to all the managed nodes by generating a public-private key pair using ssh-keygen. We have pre-defined a blank password using -P “” This step will create private and public key pair located in the ~/.ssh directory.\nadmin@ansible-master:~$ ls -al ~/.ssh/\ntotal 20\ndrwx------ 2 admin admin 4096 Apr  3 08:03 .\ndrwxr-xr-x 6 admin admin 4096 Apr  4 22:57 ..\n-rw------- 1 admin admin 1675 Apr  3 07:49 id_rsa\n-rw-r--r-- 1 admin admin  402 Apr  3 07:49 id_rsa.pub\n-rw-r--r-- 1 admin admin  444 Apr  3 07:48 known_hosts\nWe will use ssh-copy-id to copy the keys to the remote managed server and add it to authorized_keys.\nadmin@ansible-master:~$ ssh-copy-id -i ~/.ssh/id_rsa.pub vagrant@10.23.45.20\nadmin@ansible-master:~$ ssh-copy-id -i ~/.ssh/id_rsa.pub vagrant@10.23.45.20\n\n\nSSH and Admin user setup with Setup playbook\nThe setup_ubuntu1804 folder in the Github repository runs an independent playbook that will execute an initial server setup for the managed nodes. The options stores in the vars/default.yml variable file. We define the following setting below:\n\ncreate_user: The name of the remote sudo user to create. In our case, it will be admin.\ncopy_local_key: Path to a local SSH public key that will be copied as an authorized key for the new user. By default, it copies the key from the current system user running Ansible.\nsys_packages: An array with a list of fundamental packages to be installed.\n\nRun the playbook with the following commands.\nadmin@ansible-master:~/.../setup_ubuntu1804$ ansible-playbook -i inventory -u admin playbook.yml\nOnce the Playbook completes as successful, you can test the SSH connection with the following Ansible commands for our inventory with ansible all -i inventory -m ping and ansible-inventory -i inventory --list.\nadmin@ansible-master:~/.../setup_ubuntu1804$ ansible all -i inventory -m ping\nansible-node2 | SUCCESS =&gt; {\n    \"changed\": false,\n    \"ping\": \"pong\"\n}\nansible-node1 | SUCCESS =&gt; {\n    \"changed\": false,\n    \"ping\": \"pong\"\n}\n\nadmin@ansible-master:~/.../wordpress-lamp_ubuntu1804$ ansible-inventory -i inventory --list\n{\n    \"_meta\": {\n        \"hostvars\": {\n            \"ansible-node1\": {\n                \"ansible_host\": \"10.23.45.20\",\n                \"ansible_python_interpreter\": \"/usr/bin/python3\"\n            },\n            \"ansible-node2\": {\n                \"ansible_host\": \"10.23.45.30\",\n                \"ansible_python_interpreter\": \"/usr/bin/python3\"\n            }\n        }\n    },\n    \"all\": {\n        \"children\": [\n            \"servers\",\n            \"ungrouped\"\n        ]\n    },\n    \"servers\": {\n        \"hosts\": [\n            \"ansible-node1\",\n            \"ansible-node2\"\n        ]\n    }\n}"
  },
  {
    "objectID": "projects/wordpress-with-lamp-stack/index.html#run-the-wordpress-lamp-playbook",
    "href": "projects/wordpress-with-lamp-stack/index.html#run-the-wordpress-lamp-playbook",
    "title": "WordPress with LAMP Stack",
    "section": "Run the WordPress LAMP Playbook",
    "text": "Run the WordPress LAMP Playbook\nNavigate to the wordpress-lamp_ubuntu1804 folder and use the tree command to see the following structure:\nadmin@ansible-master:~/wordpress-ansible/wordpress-lamp_ubuntu1804$ tree\n.\n├── files\n│   ├── apache.conf.j2\n│   ├── client.my.cnf\n│   ├── client.my.cnf.j2\n│   └── wp-config.php.j2\n├── inventory\n├── playbook.yml\n├── readme.md\n└── vars\n    └── default.yml\nHere is the following description of what each of these files is:\n\nfiles/apache.conf.j2: Template file for setting up the Apache VirtualHost.\nfiles/wp-config.php.j2: Template file for setting up WordPress’s configuration file.\nfiles/client.my.cnf: The initial client.my.cnf is provided without a password and used to obtain a connection from which roots password updates to the managed nodes we want to store for MySQL database connection.\nfiles/client.my.cnf.j2: Contains the same structure as the initial client.my.cnf file but as a jinja2 Template file for better portability.\ninventory: Keeps track of which nodes and hosts will be a part of the infrastructure on which playbooks and ad-hoc commands will run.\nvars/default.yml: Variable file for customizing playbook settings.\nplaybook.yml: The playbook.yml file is where all tasks from this setup are defined. It starts by defining the group of servers that should target this setup (all). It uses become: true to describe that tasks should be executed with privilege escalation (sudo) by default. Then, it includes the vars/default.yml variable file to load configuration options.\n\nHere are the contents of each of the files respectively that should be edited:\nclient.my.cnf\n[client]\nuser=root\npassword=\nsocket=/var/run/mysqld/mysqld.sock\nclient.my.cnf.j2\n[client]\nuser=root\npassword={{ mysql_password }}\nsocket=/var/run/mysqld/mysqld.sock\ninventory\n[servers]\nansible-node1 ansible_host=10.23.45.20\nansible-node2 ansible_host=10.23.45.30\n\n[all:vars]\nansible_python_interpreter=/usr/bin/python3\nvars/default.yml\n---\n#System Settings\nphp_modules: [ 'php7.4-curl', 'php7.4-cli', 'php7.4-dev', 'php7.4-gd', 'php7.4-mbstring', 'php7.4-mcrypt', 'php7.4-json', 'php7.4-tidy', 'php7.4-opcache', 'php\n7.4-xml', 'php7.4-xmlrpc', 'php7.4-pdo', 'php7.4-soap', 'php7.4-intl', 'php7.4-zip' ]\n\n#MySQL Settings\nmysql_root_password: \"Passw0rd\"\nmysql_db: \"Wordpress_db\"\nmysql_user: \"db_user\"\nmysql_password: \"admin123!\"\n\n#HTTP Settings\nhttp_host: \"your_domain\"\nhttp_conf: \"your_domain.conf\"\nhttp_port: \"80\"\nThe following list contains a brief explanation of each of these variables if they should edit or change for any reason.\n\nphp_modules: An array containing PHP 7.4 extensions that support your WordPress setup. This list is extensive to support more features.\nmysql_root_password: The desired password for the root MySQL account.\nmysql_db: The name of the MySQL database intended for WordPress.\nmysql_user: The name of the MySQL user for WordPress.\nmysql_password: The password for the new MySQL user.\nhttp_host: Your domain name.\nhttp_conf: The name of the configuration file within Apache.\nhttp_port: HTTP port for the virtual host. By default, it is 80.\n\nOnce you’ve verified that the variables are correct, you can run the Playbook to install WordPress on the managed node(s) with the ansible-playbook command below:\nadmin@ansible-master:~/.../wordpress-lamp_ubuntu1804$ ansible-playbook -i inventory -u admin playbook.yml\nWhen the Playbook finishes all of its tasks, you should see a Play recap of all the events. “OK” means the task is done and configured correctly from the last run, or “changed” if Ansible finds the task alters the current state configured on the managed node(s).\nPLAY RECAP ****************************************************************************************************************************************************\nansible-node1              : ok=28   changed=10   unreachable=0    failed=0    skipped=1    rescued=0    ignored=0\nansible-node2              : ok=28   changed=11   unreachable=0    failed=0    skipped=1    rescued=0    ignored=0\nTo see if WordPress is up and running, navigate to the managed node’s domain name or IP address. In our case, it would be the following:\n[&lt;http://10.23.45.20&gt;](&lt;http://10.23.45.20&gt;) → http://10.23.45.20/wp-admin/install.php\n[&lt;http://10.23.45.30&gt;](&lt;http://10.23.45.30&gt;) → http://10.23.45.30/wp-admin/install.php\n\n\n\nwordpress-1\n\n\nAfter selecting the language you’d like to use for your WordPress installation, you’ll be presented with a final step to set up your WordPress user and password so you can log into your control panel. Setting up the name of your site, email, and login credentials is straightforward at this stage.\n\n\n\nwordpress-2\n\n\nOnce you log in, you will be taken to the WordPress administration dashboard:\n\n\n\nwordpress-3\n\n\nSome common next steps for customizing your WordPress installation include choosing the permalinks setting for your posts (can be found in Settings &gt; Permalinks) and selecting a new theme (in Appearance &gt; Themes). Below is a snapshot of our “Hello World!” blog post.\n\n\n\nwordpress-4"
  },
  {
    "objectID": "projects/boat-classifier/index.html#importing-libraries",
    "href": "projects/boat-classifier/index.html#importing-libraries",
    "title": "Boat Image Classification with CNN and Transfer Learning",
    "section": "Importing Libraries",
    "text": "Importing Libraries\nImport the necessary packages and load the dataset\n\n# Python built-in libraries\nimport os\nfrom pathlib import Path\n\n# Data pre-preprocessing and visualization\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.image as image\nimport seaborn as sns\n\n# Sci-kit learn functions\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, classification_report\n\n# Keras functions\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\n\n# For model training and compilation\nfrom keras import layers, models\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, GlobalAveragePooling2D, Dense, Dropout, BatchNormalization\nfrom keras.callbacks import ModelCheckpoint, EarlyStopping\nfrom keras import optimizers\nfrom keras import losses\nfrom keras import metrics\nfrom keras.metrics import Precision, Recall\nfrom keras.models import save_model, load_model\n\n# For MobileNetV2\nfrom keras.applications import MobileNetV2\n\n# suppress warnings output messages\nimport warnings\nwarnings.filterwarnings('ignore')\n\n2025-04-24 08:21:44.579011: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.\n2025-04-24 08:21:44.592606: I external/local_xla/xla/tsl/cuda/cudart_stub.cc:32] Could not find cuda drivers on your machine, GPU will not be used.\n2025-04-24 08:21:44.690236: I external/local_xla/xla/tsl/cuda/cudart_stub.cc:32] Could not find cuda drivers on your machine, GPU will not be used.\n2025-04-24 08:21:44.751919: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:467] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\nWARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nE0000 00:00:1745500904.812251    6908 cuda_dnn.cc:8579] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\nE0000 00:00:1745500904.829982    6908 cuda_blas.cc:1407] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\nW0000 00:00:1745500904.964755    6908 computation_placer.cc:177] computation placer already registered. Please check linkage and avoid linking the same target more than once.\nW0000 00:00:1745500904.964778    6908 computation_placer.cc:177] computation placer already registered. Please check linkage and avoid linking the same target more than once.\nW0000 00:00:1745500904.964779    6908 computation_placer.cc:177] computation placer already registered. Please check linkage and avoid linking the same target more than once.\nW0000 00:00:1745500904.964780    6908 computation_placer.cc:177] computation placer already registered. Please check linkage and avoid linking the same target more than once.\n2025-04-24 08:21:44.979275: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.\nTo enable the following instructions: AVX2 AVX_VNNI FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.\n\n\n\nimage_dir = Path('datasets/Automating_Port_Operations')\n\n\nimage_dir\n\nPosixPath('datasets/Automating_Port_Operations')\n\n\n\nimage_files = list(image_dir.glob(r'**/*.jpg'))\n\nIn order to collect the labels from the name of the classes, Pathlib’s parts attribute can directly extract the second-to-last part of the path, which corresponds to the class label.\n\nlabels = [x.parts[-2] for x in image_files]\n\n\nimage_df = pd.DataFrame({'Filepath': image_files, 'Label': labels}).astype(str).sample(frac=1.0, random_state=43).reset_index(drop=True)\n\nimage_df\n\n\n\n\n\n\n\n\nFilepath\nLabel\n\n\n\n\n0\ndatasets/Automating_Port_Operations/sailboat/2...\nsailboat\n\n\n1\ndatasets/Automating_Port_Operations/kayak/119.jpg\nkayak\n\n\n2\ndatasets/Automating_Port_Operations/kayak/51.jpg\nkayak\n\n\n3\ndatasets/Automating_Port_Operations/kayak/147.jpg\nkayak\n\n\n4\ndatasets/Automating_Port_Operations/sailboat/9...\nsailboat\n\n\n...\n...\n...\n\n\n1157\ndatasets/Automating_Port_Operations/sailboat/2...\nsailboat\n\n\n1158\ndatasets/Automating_Port_Operations/sailboat/3...\nsailboat\n\n\n1159\ndatasets/Automating_Port_Operations/sailboat/2...\nsailboat\n\n\n1160\ndatasets/Automating_Port_Operations/sailboat/4...\nsailboat\n\n\n1161\ndatasets/Automating_Port_Operations/sailboat/8...\nsailboat\n\n\n\n\n1162 rows × 2 columns\n\n\n\n\nclass_names = image_df['Label'].value_counts()\n\nprint(f' The number of classes found: {len(class_names)}')\nprint('\\n')\nprint(class_names)\n\n The number of classes found: 9\n\n\nLabel\nsailboat           389\nkayak              203\ngondola            193\ncruise_ship        191\nferry_boat          63\nbuoy                53\npaper_boat          31\nfreight_boat        23\ninflatable_boat     16\nName: count, dtype: int64\n\n\n\ntrain_df, test_df = train_test_split(image_df, train_size=0.8, shuffle=True, random_state=43)"
  },
  {
    "objectID": "projects/boat-classifier/index.html#load-the-image-data",
    "href": "projects/boat-classifier/index.html#load-the-image-data",
    "title": "Boat Image Classification with CNN and Transfer Learning",
    "section": "Load the Image Data",
    "text": "Load the Image Data\nLet’s determine the image dimensions for the building the dataset and CNN architecture.\nOur data is of shape 224×224 and the channel is 3(RGB), so for example if we are to create the first layer of a CNN, then (224,224,3) input shape. Hence, we used the input_shape to make sure that this layer accepts the data.\n\ntrain_generator = ImageDataGenerator(\n    rescale=1. / 255,\n    validation_split=0.2\n    )\n\ntest_generator = ImageDataGenerator(rescale=1. / 255)\n\nbatch_size = 32\nimg_width, img_height = (224, 224)\n\n\ntrain_images = train_generator.flow_from_dataframe(\n    dataframe=train_df,\n    x_col='Filepath',\n    y_col='Label',\n    target_size=(img_width, img_height),\n    color_mode='rgb',\n    class_mode='categorical',\n    batch_size=batch_size,\n    shuffle=True,\n    seed=42,\n    subset='training'\n)\n\nval_images = train_generator.flow_from_dataframe(\n    dataframe=train_df,\n    x_col='Filepath',\n    y_col='Label',\n    target_size=(img_width, img_height),\n    color_mode='rgb',\n    class_mode='categorical',\n    batch_size=batch_size,\n    shuffle=True,\n    seed=42,\n    subset='validation'\n)\n\n\ntest_images = test_generator.flow_from_dataframe(\n    dataframe=test_df,\n    x_col='Filepath',\n    y_col='Label',\n    target_size=(img_width, img_height),\n    color_mode='rgb',\n    class_mode='categorical',\n    batch_size=batch_size,\n    shuffle=False\n)\n\nFound 744 validated image filenames belonging to 9 classes.\nFound 185 validated image filenames belonging to 9 classes.\nFound 233 validated image filenames belonging to 9 classes."
  },
  {
    "objectID": "projects/boat-classifier/index.html#visualize-the-data",
    "href": "projects/boat-classifier/index.html#visualize-the-data",
    "title": "Boat Image Classification with CNN and Transfer Learning",
    "section": "Visualize the Data",
    "text": "Visualize the Data\nHere are the first 25 images from the training dataset.\n\ntrain_df.head(n=25)\n\n\n\n\n\n\n\n\nFilepath\nLabel\n\n\n\n\n1028\ndatasets/Automating_Port_Operations/buoy/5.jpg\nbuoy\n\n\n1026\ndatasets/Automating_Port_Operations/cruise_shi...\ncruise_ship\n\n\n578\ndatasets/Automating_Port_Operations/sailboat/1...\nsailboat\n\n\n319\ndatasets/Automating_Port_Operations/sailboat/3...\nsailboat\n\n\n525\ndatasets/Automating_Port_Operations/sailboat/2...\nsailboat\n\n\n108\ndatasets/Automating_Port_Operations/sailboat/1...\nsailboat\n\n\n214\ndatasets/Automating_Port_Operations/cruise_shi...\ncruise_ship\n\n\n299\ndatasets/Automating_Port_Operations/kayak/12.jpg\nkayak\n\n\n658\ndatasets/Automating_Port_Operations/sailboat/3...\nsailboat\n\n\n1039\ndatasets/Automating_Port_Operations/sailboat/3...\nsailboat\n\n\n431\ndatasets/Automating_Port_Operations/paper_boat...\npaper_boat\n\n\n1009\ndatasets/Automating_Port_Operations/sailboat/1...\nsailboat\n\n\n529\ndatasets/Automating_Port_Operations/sailboat/1...\nsailboat\n\n\n220\ndatasets/Automating_Port_Operations/buoy/39.jpg\nbuoy\n\n\n305\ndatasets/Automating_Port_Operations/sailboat/1...\nsailboat\n\n\n1102\ndatasets/Automating_Port_Operations/paper_boat...\npaper_boat\n\n\n950\ndatasets/Automating_Port_Operations/sailboat/1...\nsailboat\n\n\n404\ndatasets/Automating_Port_Operations/cruise_shi...\ncruise_ship\n\n\n793\ndatasets/Automating_Port_Operations/sailboat/5...\nsailboat\n\n\n861\ndatasets/Automating_Port_Operations/sailboat/2...\nsailboat\n\n\n119\ndatasets/Automating_Port_Operations/sailboat/3...\nsailboat\n\n\n353\ndatasets/Automating_Port_Operations/cruise_shi...\ncruise_ship\n\n\n163\ndatasets/Automating_Port_Operations/ferry_boat...\nferry_boat\n\n\n497\ndatasets/Automating_Port_Operations/sailboat/1...\nsailboat\n\n\n703\ndatasets/Automating_Port_Operations/kayak/139.jpg\nkayak\n\n\n\n\n\n\n\n\n# Get the image filepaths and labels from the training data\ntrain_image_filepaths = train_df['Filepath'].values\ntrain_labels = train_df['Label'].values\n\ndef display_examples(num_images, image_filepaths, labels):\n    \"\"\"\n    Display the specified number of images from the images array with its corresponding labels\n    \"\"\"\n    figsize = (20, 20)\n    fig = plt.figure(figsize=figsize)\n    fig.suptitle(\"Some examples of images of the dataset\", fontsize=24)\n\n    for i in range(num_images):\n        plt.subplot(5,5,i+1)\n        plt.xticks([])\n        plt.yticks([])\n        plt.grid(False)\n        # Load and display the image\n        img = image.imread(image_filepaths[i])\n        plt.title(labels[i])\n        plt.imshow(img)\n        #plt.xlabel([labels[i]])\n    plt.show()\n\n\ndisplay_examples(25, train_image_filepaths, train_labels)"
  },
  {
    "objectID": "projects/boat-classifier/index.html#build-the-model",
    "href": "projects/boat-classifier/index.html#build-the-model",
    "title": "Boat Image Classification with CNN and Transfer Learning",
    "section": "Build the Model",
    "text": "Build the Model\n\nchannel = 3\nnum_classes = len(class_names)\n\n# Adding the hidden layers and the output layer to our model\nmodel = Sequential([\n    layers.Conv2D(32, (3, 3), activation='relu', input_shape=(img_width, img_height, channel)),\n    layers.MaxPooling2D((2, 2)),\n    layers.Conv2D(32, (3, 3), activation='relu'),\n    layers.MaxPooling2D((2, 2)),\n    layers.GlobalAveragePooling2D(),\n    layers.Flatten(),\n    layers.Dense(128, activation='relu'),\n    layers.Dense(128, activation='relu'),\n    layers.Dense(num_classes, activation='softmax')\n])\n\n# Display the summary of the model architecture and the number of parameters\nmodel.summary()\n\n2025-04-24 08:21:52.886925: E external/local_xla/xla/stream_executor/cuda/cuda_platform.cc:51] failed call to cuInit: INTERNAL: CUDA error: Failed call to cuInit: UNKNOWN ERROR (303)\n\n\nModel: \"sequential\"\n\n\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃ Layer (type)                    ┃ Output Shape           ┃       Param # ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ conv2d (Conv2D)                 │ (None, 222, 222, 32)   │           896 │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ max_pooling2d (MaxPooling2D)    │ (None, 111, 111, 32)   │             0 │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_1 (Conv2D)               │ (None, 109, 109, 32)   │         9,248 │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ max_pooling2d_1 (MaxPooling2D)  │ (None, 54, 54, 32)     │             0 │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ global_average_pooling2d        │ (None, 32)             │             0 │\n│ (GlobalAveragePooling2D)        │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ flatten (Flatten)               │ (None, 32)             │             0 │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense (Dense)                   │ (None, 128)            │         4,224 │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_1 (Dense)                 │ (None, 128)            │        16,512 │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_2 (Dense)                 │ (None, 9)              │         1,161 │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n\n\n\n Total params: 32,041 (125.16 KB)\n\n\n\n Trainable params: 32,041 (125.16 KB)\n\n\n\n Non-trainable params: 0 (0.00 B)"
  },
  {
    "objectID": "projects/boat-classifier/index.html#compile-the-model",
    "href": "projects/boat-classifier/index.html#compile-the-model",
    "title": "Boat Image Classification with CNN and Transfer Learning",
    "section": "Compile the Model",
    "text": "Compile the Model\n\nmodel.compile(\n    optimizer = 'adam',\n    loss = 'categorical_crossentropy',\n    metrics = ['accuracy',\n                Precision(),\n               Recall(),\n    ]\n)"
  },
  {
    "objectID": "projects/boat-classifier/index.html#train-the-model",
    "href": "projects/boat-classifier/index.html#train-the-model",
    "title": "Boat Image Classification with CNN and Transfer Learning",
    "section": "Train the Model",
    "text": "Train the Model\nTrain the model with 20 epochs and we’ll plot training loss and accuracy against epochs.\n\n# Define checkpoints\ncheckpoint = ModelCheckpoint('best_model.weights.h5',\n                             save_best_only= True)\n\n\nepochs=20\n\nhistory = model.fit(\n  train_images,\n  validation_data=val_images,\n  epochs=epochs,\n  callbacks=[checkpoint]\n)\n\nEpoch 1/20\n 1/24 ━━━━━━━━━━━━━━━━━━━━ 34s 2s/step - accuracy: 0.0938 - loss: 2.1988 - precision: 0.0000e+00 - recall: 0.0000e+00\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 2/24 ━━━━━━━━━━━━━━━━━━━━ 4s 184ms/step - accuracy: 0.1094 - loss: 2.1951 - precision: 0.0000e+00 - recall: 0.0000e+00\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 3/24 ━━━━━━━━━━━━━━━━━━━━ 4s 212ms/step - accuracy: 0.1042 - loss: 2.1925 - precision: 0.0000e+00 - recall: 0.0000e+00\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 4/24 ━━━━━━━━━━━━━━━━━━━━ 4s 216ms/step - accuracy: 0.0957 - loss: 2.1898 - precision: 0.0000e+00 - recall: 0.0000e+00\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 5/24 ━━━━━━━━━━━━━━━━━━━━ 4s 218ms/step - accuracy: 0.0903 - loss: 2.1874 - precision: 0.0000e+00 - recall: 0.0000e+00\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 6/24 ━━━━━━━━━━━━━━━━━━━━ 3s 220ms/step - accuracy: 0.0944 - loss: 2.1848 - precision: 0.0000e+00 - recall: 0.0000e+00\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 7/24 ━━━━━━━━━━━━━━━━━━━━ 3s 221ms/step - accuracy: 0.1000 - loss: 2.1823 - precision: 0.0000e+00 - recall: 0.0000e+00\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 8/24 ━━━━━━━━━━━━━━━━━━━━ 3s 220ms/step - accuracy: 0.1080 - loss: 2.1791 - precision: 0.0000e+00 - recall: 0.0000e+00\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 9/24 ━━━━━━━━━━━━━━━━━━━━ 3s 219ms/step - accuracy: 0.1153 - loss: 2.1758 - precision: 0.0000e+00 - recall: 0.0000e+00\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b10/24 ━━━━━━━━━━━━━━━━━━━━ 3s 220ms/step - accuracy: 0.1231 - loss: 2.1720 - precision: 0.0000e+00 - recall: 0.0000e+00\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b11/24 ━━━━━━━━━━━━━━━━━━━━ 2s 220ms/step - accuracy: 0.1318 - loss: 2.1674 - precision: 0.0000e+00 - recall: 0.0000e+00\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b12/24 ━━━━━━━━━━━━━━━━━━━━ 2s 221ms/step - accuracy: 0.1397 - loss: 2.1624 - precision: 0.0000e+00 - recall: 0.0000e+00\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b13/24 ━━━━━━━━━━━━━━━━━━━━ 2s 222ms/step - accuracy: 0.1467 - loss: 2.1571 - precision: 0.0000e+00 - recall: 0.0000e+00\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b14/24 ━━━━━━━━━━━━━━━━━━━━ 2s 222ms/step - accuracy: 0.1527 - loss: 2.1524 - precision: 0.0000e+00 - recall: 0.0000e+00\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b15/24 ━━━━━━━━━━━━━━━━━━━━ 1s 222ms/step - accuracy: 0.1578 - loss: 2.1476 - precision: 0.0000e+00 - recall: 0.0000e+00\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b16/24 ━━━━━━━━━━━━━━━━━━━━ 1s 222ms/step - accuracy: 0.1626 - loss: 2.1425 - precision: 0.0000e+00 - recall: 0.0000e+00\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b17/24 ━━━━━━━━━━━━━━━━━━━━ 1s 222ms/step - accuracy: 0.1671 - loss: 2.1370 - precision: 0.0000e+00 - recall: 0.0000e+00\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b18/24 ━━━━━━━━━━━━━━━━━━━━ 1s 212ms/step - accuracy: 0.1709 - loss: 2.1326 - precision: 0.0000e+00 - recall: 0.0000e+00\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b19/24 ━━━━━━━━━━━━━━━━━━━━ 1s 213ms/step - accuracy: 0.1744 - loss: 2.1280 - precision: 0.0000e+00 - recall: 0.0000e+00\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b20/24 ━━━━━━━━━━━━━━━━━━━━ 0s 213ms/step - accuracy: 0.1779 - loss: 2.1227 - precision: 0.0000e+00 - recall: 0.0000e+00\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b21/24 ━━━━━━━━━━━━━━━━━━━━ 0s 214ms/step - accuracy: 0.1815 - loss: 2.1171 - precision: 0.0000e+00 - recall: 0.0000e+00\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b22/24 ━━━━━━━━━━━━━━━━━━━━ 0s 215ms/step - accuracy: 0.1850 - loss: 2.1113 - precision: 0.0000e+00 - recall: 0.0000e+00\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b23/24 ━━━━━━━━━━━━━━━━━━━━ 0s 217ms/step - accuracy: 0.1884 - loss: 2.1058 - precision: 0.0000e+00 - recall: 0.0000e+00\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b24/24 ━━━━━━━━━━━━━━━━━━━━ 0s 217ms/step - accuracy: 0.1917 - loss: 2.1002 - precision: 0.0000e+00 - recall: 0.0000e+00\n\n\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\n\n\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b24/24 ━━━━━━━━━━━━━━━━━━━━ 8s 291ms/step - accuracy: 0.1948 - loss: 2.0950 - precision: 0.0000e+00 - recall: 0.0000e+00 - val_accuracy: 0.3892 - val_loss: 1.8238 - val_precision: 0.0000e+00 - val_recall: 0.0000e+00\nEpoch 2/20\n 1/24 ━━━━━━━━━━━━━━━━━━━━ 6s 267ms/step - accuracy: 0.3125 - loss: 1.8744 - precision: 0.0000e+00 - recall: 0.0000e+00\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 2/24 ━━━━━━━━━━━━━━━━━━━━ 4s 202ms/step - accuracy: 0.3281 - loss: 1.7925 - precision: 0.0000e+00 - recall: 0.0000e+00\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 3/24 ━━━━━━━━━━━━━━━━━━━━ 4s 208ms/step - accuracy: 0.3333 - loss: 1.7928 - precision: 0.0000e+00 - recall: 0.0000e+00\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 4/24 ━━━━━━━━━━━━━━━━━━━━ 4s 209ms/step - accuracy: 0.3340 - loss: 1.7981 - precision: 0.0000e+00 - recall: 0.0000e+00\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 5/24 ━━━━━━━━━━━━━━━━━━━━ 3s 208ms/step - accuracy: 0.3359 - loss: 1.7993 - precision: 0.0000e+00 - recall: 0.0000e+00\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 6/24 ━━━━━━━━━━━━━━━━━━━━ 3s 207ms/step - accuracy: 0.3329 - loss: 1.8050 - precision: 0.1667 - recall: 8.6806e-04    \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 7/24 ━━━━━━━━━━━━━━━━━━━━ 3s 208ms/step - accuracy: 0.3319 - loss: 1.8046 - precision: 0.2857 - recall: 0.0014    \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 8/24 ━━━━━━━━━━━━━━━━━━━━ 3s 206ms/step - accuracy: 0.3309 - loss: 1.8051 - precision: 0.3750 - recall: 0.0017\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 9/24 ━━━━━━━━━━━━━━━━━━━━ 3s 207ms/step - accuracy: 0.3300 - loss: 1.8053 - precision: 0.4444 - recall: 0.0019\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b10/24 ━━━━━━━━━━━━━━━━━━━━ 2s 206ms/step - accuracy: 0.3289 - loss: 1.8072 - precision: 0.5000 - recall: 0.0020\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b11/24 ━━━━━━━━━━━━━━━━━━━━ 2s 205ms/step - accuracy: 0.3287 - loss: 1.8076 - precision: 0.5455 - recall: 0.0021\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b12/24 ━━━━━━━━━━━━━━━━━━━━ 2s 206ms/step - accuracy: 0.3280 - loss: 1.8077 - precision: 0.5833 - recall: 0.0021\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b13/24 ━━━━━━━━━━━━━━━━━━━━ 2s 205ms/step - accuracy: 0.3274 - loss: 1.8071 - precision: 0.6154 - recall: 0.0022\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b14/24 ━━━━━━━━━━━━━━━━━━━━ 2s 205ms/step - accuracy: 0.3271 - loss: 1.8072 - precision: 0.6429 - recall: 0.0022\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b15/24 ━━━━━━━━━━━━━━━━━━━━ 1s 205ms/step - accuracy: 0.3274 - loss: 1.8067 - precision: 0.6667 - recall: 0.0022\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b16/24 ━━━━━━━━━━━━━━━━━━━━ 1s 205ms/step - accuracy: 0.3273 - loss: 1.8066 - precision: 0.6875 - recall: 0.0021\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b18/24 ━━━━━━━━━━━━━━━━━━━━ 1s 196ms/step - accuracy: 0.3272 - loss: 1.8068 - precision: 0.7222 - recall: 0.0021\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b19/24 ━━━━━━━━━━━━━━━━━━━━ 0s 196ms/step - accuracy: 0.3273 - loss: 1.8065 - precision: 0.7368 - recall: 0.0021\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b20/24 ━━━━━━━━━━━━━━━━━━━━ 0s 196ms/step - accuracy: 0.3276 - loss: 1.8061 - precision: 0.7500 - recall: 0.0021\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b21/24 ━━━━━━━━━━━━━━━━━━━━ 0s 256ms/step - accuracy: 0.3278 - loss: 1.8056 - precision: 0.7619 - recall: 0.0020\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b22/24 ━━━━━━━━━━━━━━━━━━━━ 0s 343ms/step - accuracy: 0.3277 - loss: 1.8054 - precision: 0.7727 - recall: 0.0020\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b23/24 ━━━━━━━━━━━━━━━━━━━━ 0s 336ms/step - accuracy: 0.3276 - loss: 1.8050 - precision: 0.7826 - recall: 0.0020\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b24/24 ━━━━━━━━━━━━━━━━━━━━ 0s 329ms/step - accuracy: 0.3276 - loss: 1.8047 - precision: 0.7917 - recall: 0.0020\n\n\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\n\n\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b24/24 ━━━━━━━━━━━━━━━━━━━━ 9s 362ms/step - accuracy: 0.3277 - loss: 1.8044 - precision: 0.8000 - recall: 0.0019 - val_accuracy: 0.3892 - val_loss: 1.7837 - val_precision: 0.0000e+00 - val_recall: 0.0000e+00\nEpoch 3/20\n 1/24 ━━━━━━━━━━━━━━━━━━━━ 6s 286ms/step - accuracy: 0.2812 - loss: 1.9176 - precision: 0.0000e+00 - recall: 0.0000e+00\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 2/24 ━━━━━━━━━━━━━━━━━━━━ 4s 196ms/step - accuracy: 0.2969 - loss: 1.8772 - precision: 0.0000e+00 - recall: 0.0000e+00\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 3/24 ━━━━━━━━━━━━━━━━━━━━ 4s 211ms/step - accuracy: 0.2951 - loss: 1.8651 - precision: 0.0000e+00 - recall: 0.0000e+00\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 4/24 ━━━━━━━━━━━━━━━━━━━━ 4s 204ms/step - accuracy: 0.3053 - loss: 1.8440 - precision: 0.0000e+00 - recall: 0.0000e+00\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 6/24 ━━━━━━━━━━━━━━━━━━━━ 3s 175ms/step - accuracy: 0.3182 - loss: 1.8121 - precision: 0.3333 - recall: 0.0042        \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 7/24 ━━━━━━━━━━━━━━━━━━━━ 3s 178ms/step - accuracy: 0.3228 - loss: 1.7986 - precision: 0.4286 - recall: 0.0057\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 8/24 ━━━━━━━━━━━━━━━━━━━━ 2s 185ms/step - accuracy: 0.3244 - loss: 1.7949 - precision: 0.4750 - recall: 0.0072\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 9/24 ━━━━━━━━━━━━━━━━━━━━ 2s 187ms/step - accuracy: 0.3254 - loss: 1.7951 - precision: 0.5175 - recall: 0.0089\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b10/24 ━━━━━━━━━━━━━━━━━━━━ 2s 188ms/step - accuracy: 0.3260 - loss: 1.7974 - precision: 0.5357 - recall: 0.0104\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b11/24 ━━━━━━━━━━━━━━━━━━━━ 2s 189ms/step - accuracy: 0.3271 - loss: 1.7994 - precision: 0.5531 - recall: 0.0117\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b12/24 ━━━━━━━━━━━━━━━━━━━━ 2s 190ms/step - accuracy: 0.3283 - loss: 1.8013 - precision: 0.5676 - recall: 0.0125\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b13/24 ━━━━━━━━━━━━━━━━━━━━ 2s 193ms/step - accuracy: 0.3290 - loss: 1.8045 - precision: 0.5831 - recall: 0.0135\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b14/24 ━━━━━━━━━━━━━━━━━━━━ 1s 195ms/step - accuracy: 0.3294 - loss: 1.8069 - precision: 0.5964 - recall: 0.0143\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b15/24 ━━━━━━━━━━━━━━━━━━━━ 1s 196ms/step - accuracy: 0.3295 - loss: 1.8084 - precision: 0.6043 - recall: 0.0148\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b16/24 ━━━━━━━━━━━━━━━━━━━━ 1s 197ms/step - accuracy: 0.3297 - loss: 1.8093 - precision: 0.6112 - recall: 0.0151\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b17/24 ━━━━━━━━━━━━━━━━━━━━ 1s 198ms/step - accuracy: 0.3299 - loss: 1.8096 - precision: 0.6172 - recall: 0.0154\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b18/24 ━━━━━━━━━━━━━━━━━━━━ 1s 198ms/step - accuracy: 0.3296 - loss: 1.8097 - precision: 0.6226 - recall: 0.0155\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b19/24 ━━━━━━━━━━━━━━━━━━━━ 0s 198ms/step - accuracy: 0.3294 - loss: 1.8098 - precision: 0.6275 - recall: 0.0156\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b20/24 ━━━━━━━━━━━━━━━━━━━━ 0s 197ms/step - accuracy: 0.3292 - loss: 1.8099 - precision: 0.6318 - recall: 0.0156\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b21/24 ━━━━━━━━━━━━━━━━━━━━ 0s 198ms/step - accuracy: 0.3289 - loss: 1.8101 - precision: 0.6357 - recall: 0.0156\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b22/24 ━━━━━━━━━━━━━━━━━━━━ 0s 198ms/step - accuracy: 0.3287 - loss: 1.8102 - precision: 0.6393 - recall: 0.0156\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b23/24 ━━━━━━━━━━━━━━━━━━━━ 0s 198ms/step - accuracy: 0.3284 - loss: 1.8102 - precision: 0.6426 - recall: 0.0155\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b24/24 ━━━━━━━━━━━━━━━━━━━━ 0s 197ms/step - accuracy: 0.3282 - loss: 1.8098 - precision: 0.6455 - recall: 0.0154\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b24/24 ━━━━━━━━━━━━━━━━━━━━ 6s 229ms/step - accuracy: 0.3280 - loss: 1.8095 - precision: 0.6483 - recall: 0.0153 - val_accuracy: 0.3946 - val_loss: 1.7973 - val_precision: 0.0000e+00 - val_recall: 0.0000e+00\nEpoch 4/20\n 1/24 ━━━━━━━━━━━━━━━━━━━━ 6s 285ms/step - accuracy: 0.4375 - loss: 1.6553 - precision: 0.0000e+00 - recall: 0.0000e+00\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 2/24 ━━━━━━━━━━━━━━━━━━━━ 4s 222ms/step - accuracy: 0.4062 - loss: 1.7465 - precision: 0.0000e+00 - recall: 0.0000e+00\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 3/24 ━━━━━━━━━━━━━━━━━━━━ 4s 210ms/step - accuracy: 0.3889 - loss: 1.7742 - precision: 0.0000e+00 - recall: 0.0000e+00\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 4/24 ━━━━━━━━━━━━━━━━━━━━ 4s 203ms/step - accuracy: 0.3796 - loss: 1.7955 - precision: 0.0000e+00 - recall: 0.0000e+00\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 5/24 ━━━━━━━━━━━━━━━━━━━━ 3s 202ms/step - accuracy: 0.3724 - loss: 1.8086 - precision: 0.0000e+00 - recall: 0.0000e+00\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 6/24 ━━━━━━━━━━━━━━━━━━━━ 3s 199ms/step - accuracy: 0.3702 - loss: 1.8149 - precision: 0.0000e+00 - recall: 0.0000e+00\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 7/24 ━━━━━━━━━━━━━━━━━━━━ 3s 200ms/step - accuracy: 0.3696 - loss: 1.8158 - precision: 0.0714 - recall: 6.3776e-04    \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 8/24 ━━━━━━━━━━━━━━━━━━━━ 3s 199ms/step - accuracy: 0.3688 - loss: 1.8155 - precision: 0.1250 - recall: 0.0010    \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 9/24 ━━━━━━━━━━━━━━━━━━━━ 2s 198ms/step - accuracy: 0.3664 - loss: 1.8152 - precision: 0.1667 - recall: 0.0013\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b10/24 ━━━━━━━━━━━━━━━━━━━━ 2s 198ms/step - accuracy: 0.3629 - loss: 1.8143 - precision: 0.2000 - recall: 0.0015\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b11/24 ━━━━━━━━━━━━━━━━━━━━ 2s 197ms/step - accuracy: 0.3599 - loss: 1.8126 - precision: 0.2364 - recall: 0.0021\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b12/24 ━━━━━━━━━━━━━━━━━━━━ 2s 198ms/step - accuracy: 0.3577 - loss: 1.8106 - precision: 0.2667 - recall: 0.0026\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b13/24 ━━━━━━━━━━━━━━━━━━━━ 2s 198ms/step - accuracy: 0.3548 - loss: 1.8090 - precision: 0.2923 - recall: 0.0030\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b14/24 ━━━━━━━━━━━━━━━━━━━━ 1s 198ms/step - accuracy: 0.3525 - loss: 1.8068 - precision: 0.3143 - recall: 0.0032\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b15/24 ━━━━━━━━━━━━━━━━━━━━ 1s 197ms/step - accuracy: 0.3507 - loss: 1.8052 - precision: 0.3333 - recall: 0.0034\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b16/24 ━━━━━━━━━━━━━━━━━━━━ 1s 198ms/step - accuracy: 0.3494 - loss: 1.8040 - precision: 0.3500 - recall: 0.0036\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b17/24 ━━━━━━━━━━━━━━━━━━━━ 1s 198ms/step - accuracy: 0.3486 - loss: 1.8029 - precision: 0.3647 - recall: 0.0037\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b18/24 ━━━━━━━━━━━━━━━━━━━━ 1s 198ms/step - accuracy: 0.3479 - loss: 1.8014 - precision: 0.3778 - recall: 0.0038\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b19/24 ━━━━━━━━━━━━━━━━━━━━ 0s 198ms/step - accuracy: 0.3472 - loss: 1.7997 - precision: 0.3895 - recall: 0.0038\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b20/24 ━━━━━━━━━━━━━━━━━━━━ 0s 198ms/step - accuracy: 0.3467 - loss: 1.7977 - precision: 0.4000 - recall: 0.0039\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b22/24 ━━━━━━━━━━━━━━━━━━━━ 0s 191ms/step - accuracy: 0.3458 - loss: 1.7942 - precision: 0.4169 - recall: 0.0040\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b23/24 ━━━━━━━━━━━━━━━━━━━━ 0s 191ms/step - accuracy: 0.3456 - loss: 1.7926 - precision: 0.4241 - recall: 0.0043\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b24/24 ━━━━━━━━━━━━━━━━━━━━ 0s 191ms/step - accuracy: 0.3452 - loss: 1.7913 - precision: 0.4303 - recall: 0.0045\n\n\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\n\n\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b24/24 ━━━━━━━━━━━━━━━━━━━━ 5s 225ms/step - accuracy: 0.3449 - loss: 1.7900 - precision: 0.4359 - recall: 0.0048 - val_accuracy: 0.3892 - val_loss: 1.7679 - val_precision: 0.7368 - val_recall: 0.0757\nEpoch 5/20\n 1/24 ━━━━━━━━━━━━━━━━━━━━ 6s 277ms/step - accuracy: 0.2812 - loss: 1.8867 - precision: 1.0000 - recall: 0.0312\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 2/24 ━━━━━━━━━━━━━━━━━━━━ 4s 205ms/step - accuracy: 0.2891 - loss: 1.8538 - precision: 1.0000 - recall: 0.0469\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 3/24 ━━━━━━━━━━━━━━━━━━━━ 4s 201ms/step - accuracy: 0.2969 - loss: 1.8315 - precision: 1.0000 - recall: 0.0486\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 4/24 ━━━━━━━━━━━━━━━━━━━━ 4s 203ms/step - accuracy: 0.3008 - loss: 1.8195 - precision: 0.9286 - recall: 0.0462\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 5/24 ━━━━━━━━━━━━━━━━━━━━ 3s 202ms/step - accuracy: 0.3069 - loss: 1.8041 - precision: 0.8679 - recall: 0.0432\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 6/24 ━━━━━━━━━━━━━━━━━━━━ 3s 199ms/step - accuracy: 0.3130 - loss: 1.7980 - precision: 0.8274 - recall: 0.0404\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 7/24 ━━━━━━━━━━━━━━━━━━━━ 3s 200ms/step - accuracy: 0.3200 - loss: 1.7936 - precision: 0.7985 - recall: 0.0378\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 8/24 ━━━━━━━━━━━━━━━━━━━━ 3s 198ms/step - accuracy: 0.3220 - loss: 1.7928 - precision: 0.7768 - recall: 0.0355\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 9/24 ━━━━━━━━━━━━━━━━━━━━ 2s 197ms/step - accuracy: 0.3244 - loss: 1.7906 - precision: 0.7599 - recall: 0.0335\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b10/24 ━━━━━━━━━━━━━━━━━━━━ 2s 196ms/step - accuracy: 0.3273 - loss: 1.7887 - precision: 0.7464 - recall: 0.0317\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b11/24 ━━━━━━━━━━━━━━━━━━━━ 2s 195ms/step - accuracy: 0.3298 - loss: 1.7873 - precision: 0.7354 - recall: 0.0301\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b12/24 ━━━━━━━━━━━━━━━━━━━━ 2s 195ms/step - accuracy: 0.3320 - loss: 1.7861 - precision: 0.7262 - recall: 0.0287\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b13/24 ━━━━━━━━━━━━━━━━━━━━ 2s 195ms/step - accuracy: 0.3335 - loss: 1.7842 - precision: 0.7184 - recall: 0.0274\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b14/24 ━━━━━━━━━━━━━━━━━━━━ 1s 194ms/step - accuracy: 0.3344 - loss: 1.7822 - precision: 0.7117 - recall: 0.0262\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b15/24 ━━━━━━━━━━━━━━━━━━━━ 1s 194ms/step - accuracy: 0.3347 - loss: 1.7811 - precision: 0.7060 - recall: 0.0252\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b16/24 ━━━━━━━━━━━━━━━━━━━━ 1s 194ms/step - accuracy: 0.3358 - loss: 1.7793 - precision: 0.7009 - recall: 0.0242\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b17/24 ━━━━━━━━━━━━━━━━━━━━ 1s 194ms/step - accuracy: 0.3364 - loss: 1.7782 - precision: 0.6964 - recall: 0.0233\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b18/24 ━━━━━━━━━━━━━━━━━━━━ 1s 194ms/step - accuracy: 0.3368 - loss: 1.7771 - precision: 0.6886 - recall: 0.0225\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b19/24 ━━━━━━━━━━━━━━━━━━━━ 0s 194ms/step - accuracy: 0.3372 - loss: 1.7760 - precision: 0.6816 - recall: 0.0218\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b20/24 ━━━━━━━━━━━━━━━━━━━━ 0s 194ms/step - accuracy: 0.3379 - loss: 1.7743 - precision: 0.6753 - recall: 0.0211\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b21/24 ━━━━━━━━━━━━━━━━━━━━ 0s 194ms/step - accuracy: 0.3386 - loss: 1.7728 - precision: 0.6696 - recall: 0.0204\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b23/24 ━━━━━━━━━━━━━━━━━━━━ 0s 187ms/step - accuracy: 0.3397 - loss: 1.7705 - precision: 0.6599 - recall: 0.0195\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b24/24 ━━━━━━━━━━━━━━━━━━━━ 0s 186ms/step - accuracy: 0.3403 - loss: 1.7692 - precision: 0.6562 - recall: 0.0191\n\n\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\n\n\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b24/24 ━━━━━━━━━━━━━━━━━━━━ 5s 219ms/step - accuracy: 0.3407 - loss: 1.7679 - precision: 0.6528 - recall: 0.0188 - val_accuracy: 0.3838 - val_loss: 1.7429 - val_precision: 0.6429 - val_recall: 0.0486\nEpoch 6/20\n 1/24 ━━━━━━━━━━━━━━━━━━━━ 6s 270ms/step - accuracy: 0.1875 - loss: 1.9309 - precision: 1.0000 - recall: 0.0312\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 2/24 ━━━━━━━━━━━━━━━━━━━━ 4s 198ms/step - accuracy: 0.2500 - loss: 1.8417 - precision: 1.0000 - recall: 0.0312\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 4/24 ━━━━━━━━━━━━━━━━━━━━ 2s 149ms/step - accuracy: 0.2973 - loss: 1.7650 - precision: 1.0000 - recall: 0.0298\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 5/24 ━━━━━━━━━━━━━━━━━━━━ 2s 157ms/step - accuracy: 0.3143 - loss: 1.7447 - precision: 1.0000 - recall: 0.0326\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 6/24 ━━━━━━━━━━━━━━━━━━━━ 2s 163ms/step - accuracy: 0.3244 - loss: 1.7332 - precision: 0.9815 - recall: 0.0351\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 7/24 ━━━━━━━━━━━━━━━━━━━━ 2s 169ms/step - accuracy: 0.3288 - loss: 1.7271 - precision: 0.9698 - recall: 0.0366\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 8/24 ━━━━━━━━━━━━━━━━━━━━ 2s 174ms/step - accuracy: 0.3324 - loss: 1.7208 - precision: 0.9544 - recall: 0.0379\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 9/24 ━━━━━━━━━━━━━━━━━━━━ 2s 177ms/step - accuracy: 0.3350 - loss: 1.7144 - precision: 0.9317 - recall: 0.0387\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b10/24 ━━━━━━━━━━━━━━━━━━━━ 2s 179ms/step - accuracy: 0.3360 - loss: 1.7098 - precision: 0.9052 - recall: 0.0389\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b11/24 ━━━━━━━━━━━━━━━━━━━━ 2s 181ms/step - accuracy: 0.3379 - loss: 1.7055 - precision: 0.8849 - recall: 0.0395\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b12/24 ━━━━━━━━━━━━━━━━━━━━ 2s 182ms/step - accuracy: 0.3398 - loss: 1.7020 - precision: 0.8711 - recall: 0.0404\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b13/24 ━━━━━━━━━━━━━━━━━━━━ 2s 183ms/step - accuracy: 0.3417 - loss: 1.6995 - precision: 0.8570 - recall: 0.0416\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b14/24 ━━━━━━━━━━━━━━━━━━━━ 1s 184ms/step - accuracy: 0.3428 - loss: 1.6989 - precision: 0.8404 - recall: 0.0429\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b15/24 ━━━━━━━━━━━━━━━━━━━━ 1s 185ms/step - accuracy: 0.3432 - loss: 1.6987 - precision: 0.8244 - recall: 0.0440\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b16/24 ━━━━━━━━━━━━━━━━━━━━ 1s 186ms/step - accuracy: 0.3439 - loss: 1.6983 - precision: 0.8101 - recall: 0.0448\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b17/24 ━━━━━━━━━━━━━━━━━━━━ 1s 187ms/step - accuracy: 0.3448 - loss: 1.6975 - precision: 0.7975 - recall: 0.0453\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b18/24 ━━━━━━━━━━━━━━━━━━━━ 1s 188ms/step - accuracy: 0.3458 - loss: 1.6962 - precision: 0.7865 - recall: 0.0458\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b19/24 ━━━━━━━━━━━━━━━━━━━━ 0s 189ms/step - accuracy: 0.3468 - loss: 1.6944 - precision: 0.7769 - recall: 0.0463\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b20/24 ━━━━━━━━━━━━━━━━━━━━ 0s 189ms/step - accuracy: 0.3478 - loss: 1.6934 - precision: 0.7683 - recall: 0.0466\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b21/24 ━━━━━━━━━━━━━━━━━━━━ 0s 189ms/step - accuracy: 0.3488 - loss: 1.6927 - precision: 0.7604 - recall: 0.0467\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b22/24 ━━━━━━━━━━━━━━━━━━━━ 0s 190ms/step - accuracy: 0.3496 - loss: 1.6923 - precision: 0.7533 - recall: 0.0467\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b23/24 ━━━━━━━━━━━━━━━━━━━━ 0s 190ms/step - accuracy: 0.3502 - loss: 1.6923 - precision: 0.7468 - recall: 0.0468\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b24/24 ━━━━━━━━━━━━━━━━━━━━ 0s 190ms/step - accuracy: 0.3508 - loss: 1.6929 - precision: 0.7408 - recall: 0.0468\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b24/24 ━━━━━━━━━━━━━━━━━━━━ 5s 224ms/step - accuracy: 0.3514 - loss: 1.6934 - precision: 0.7353 - recall: 0.0469 - val_accuracy: 0.3730 - val_loss: 1.7534 - val_precision: 0.1667 - val_recall: 0.0108\nEpoch 7/20\n 1/24 ━━━━━━━━━━━━━━━━━━━━ 6s 279ms/step - accuracy: 0.2812 - loss: 1.7579 - precision: 1.0000 - recall: 0.0625\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 2/24 ━━━━━━━━━━━━━━━━━━━━ 4s 194ms/step - accuracy: 0.2734 - loss: 1.7602 - precision: 1.0000 - recall: 0.0547\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 3/24 ━━━━━━━━━━━━━━━━━━━━ 4s 201ms/step - accuracy: 0.2830 - loss: 1.7468 - precision: 1.0000 - recall: 0.0469\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 4/24 ━━━━━━━━━━━━━━━━━━━━ 3s 199ms/step - accuracy: 0.3001 - loss: 1.7310 - precision: 1.0000 - recall: 0.0430\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 5/24 ━━━━━━━━━━━━━━━━━━━━ 3s 202ms/step - accuracy: 0.3101 - loss: 1.7218 - precision: 1.0000 - recall: 0.0394\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 6/24 ━━━━━━━━━━━━━━━━━━━━ 3s 201ms/step - accuracy: 0.3192 - loss: 1.7150 - precision: 0.9667 - recall: 0.0363\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 7/24 ━━━━━━━━━━━━━━━━━━━━ 3s 202ms/step - accuracy: 0.3265 - loss: 1.7086 - precision: 0.9429 - recall: 0.0337\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 8/24 ━━━━━━━━━━━━━━━━━━━━ 3s 200ms/step - accuracy: 0.3336 - loss: 1.7029 - precision: 0.8964 - recall: 0.0314\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 9/24 ━━━━━━━━━━━━━━━━━━━━ 3s 201ms/step - accuracy: 0.3370 - loss: 1.7030 - precision: 0.8567 - recall: 0.0306\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b10/24 ━━━━━━━━━━━━━━━━━━━━ 2s 199ms/step - accuracy: 0.3392 - loss: 1.7050 - precision: 0.8248 - recall: 0.0297\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b11/24 ━━━━━━━━━━━━━━━━━━━━ 2s 199ms/step - accuracy: 0.3422 - loss: 1.7073 - precision: 0.7953 - recall: 0.0288\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b13/24 ━━━━━━━━━━━━━━━━━━━━ 2s 188ms/step - accuracy: 0.3473 - loss: 1.7106 - precision: 0.7496 - recall: 0.0277\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b14/24 ━━━━━━━━━━━━━━━━━━━━ 1s 189ms/step - accuracy: 0.3486 - loss: 1.7134 - precision: 0.7317 - recall: 0.0274\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b15/24 ━━━━━━━━━━━━━━━━━━━━ 1s 190ms/step - accuracy: 0.3493 - loss: 1.7154 - precision: 0.7163 - recall: 0.0273\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b16/24 ━━━━━━━━━━━━━━━━━━━━ 1s 190ms/step - accuracy: 0.3500 - loss: 1.7167 - precision: 0.7050 - recall: 0.0275\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b17/24 ━━━━━━━━━━━━━━━━━━━━ 1s 190ms/step - accuracy: 0.3512 - loss: 1.7172 - precision: 0.6981 - recall: 0.0282\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b18/24 ━━━━━━━━━━━━━━━━━━━━ 1s 191ms/step - accuracy: 0.3524 - loss: 1.7172 - precision: 0.6924 - recall: 0.0288\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b19/24 ━━━━━━━━━━━━━━━━━━━━ 0s 192ms/step - accuracy: 0.3536 - loss: 1.7167 - precision: 0.6888 - recall: 0.0295\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b20/24 ━━━━━━━━━━━━━━━━━━━━ 0s 192ms/step - accuracy: 0.3552 - loss: 1.7158 - precision: 0.6854 - recall: 0.0302\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b21/24 ━━━━━━━━━━━━━━━━━━━━ 0s 192ms/step - accuracy: 0.3568 - loss: 1.7148 - precision: 0.6817 - recall: 0.0308\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b22/24 ━━━━━━━━━━━━━━━━━━━━ 0s 193ms/step - accuracy: 0.3583 - loss: 1.7134 - precision: 0.6773 - recall: 0.0315\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b23/24 ━━━━━━━━━━━━━━━━━━━━ 0s 193ms/step - accuracy: 0.3597 - loss: 1.7126 - precision: 0.6725 - recall: 0.0322\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b24/24 ━━━━━━━━━━━━━━━━━━━━ 0s 192ms/step - accuracy: 0.3607 - loss: 1.7117 - precision: 0.6692 - recall: 0.0330\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b24/24 ━━━━━━━━━━━━━━━━━━━━ 5s 227ms/step - accuracy: 0.3617 - loss: 1.7109 - precision: 0.6662 - recall: 0.0337 - val_accuracy: 0.3459 - val_loss: 1.7719 - val_precision: 0.5111 - val_recall: 0.1243\nEpoch 8/20\n 1/24 ━━━━━━━━━━━━━━━━━━━━ 7s 338ms/step - accuracy: 0.4062 - loss: 1.6701 - precision: 0.6000 - recall: 0.0938\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 2/24 ━━━━━━━━━━━━━━━━━━━━ 5s 250ms/step - accuracy: 0.3906 - loss: 1.6675 - precision: 0.5500 - recall: 0.1094\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 3/24 ━━━━━━━━━━━━━━━━━━━━ 4s 230ms/step - accuracy: 0.3819 - loss: 1.6715 - precision: 0.5246 - recall: 0.1042\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 4/24 ━━━━━━━━━━━━━━━━━━━━ 4s 230ms/step - accuracy: 0.3802 - loss: 1.6781 - precision: 0.5234 - recall: 0.1035\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 5/24 ━━━━━━━━━━━━━━━━━━━━ 4s 226ms/step - accuracy: 0.3754 - loss: 1.6803 - precision: 0.5153 - recall: 0.1003\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 6/24 ━━━━━━━━━━━━━━━━━━━━ 14s 808ms/step - accuracy: 0.3771 - loss: 1.6751 - precision: 0.5176 - recall: 0.0992\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 7/24 ━━━━━━━━━━━━━━━━━━━━ 12s 712ms/step - accuracy: 0.3787 - loss: 1.6683 - precision: 0.5189 - recall: 0.0978\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 8/24 ━━━━━━━━━━━━━━━━━━━━ 10s 641ms/step - accuracy: 0.3812 - loss: 1.6639 - precision: 0.5225 - recall: 0.0968\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 9/24 ━━━━━━━━━━━━━━━━━━━━ 8s 589ms/step - accuracy: 0.3828 - loss: 1.6623 - precision: 0.5269 - recall: 0.0965 \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b10/24 ━━━━━━━━━━━━━━━━━━━━ 7s 547ms/step - accuracy: 0.3851 - loss: 1.6611 - precision: 0.5311 - recall: 0.0959\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b11/24 ━━━━━━━━━━━━━━━━━━━━ 6s 515ms/step - accuracy: 0.3855 - loss: 1.6614 - precision: 0.5360 - recall: 0.0952\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b12/24 ━━━━━━━━━━━━━━━━━━━━ 5s 488ms/step - accuracy: 0.3857 - loss: 1.6611 - precision: 0.5401 - recall: 0.0940\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b13/24 ━━━━━━━━━━━━━━━━━━━━ 5s 464ms/step - accuracy: 0.3856 - loss: 1.6608 - precision: 0.5444 - recall: 0.0930\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b14/24 ━━━━━━━━━━━━━━━━━━━━ 4s 445ms/step - accuracy: 0.3857 - loss: 1.6613 - precision: 0.5467 - recall: 0.0918\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b15/24 ━━━━━━━━━━━━━━━━━━━━ 3s 431ms/step - accuracy: 0.3855 - loss: 1.6616 - precision: 0.5480 - recall: 0.0904\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b16/24 ━━━━━━━━━━━━━━━━━━━━ 3s 416ms/step - accuracy: 0.3855 - loss: 1.6620 - precision: 0.5499 - recall: 0.0893\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b17/24 ━━━━━━━━━━━━━━━━━━━━ 2s 403ms/step - accuracy: 0.3859 - loss: 1.6620 - precision: 0.5523 - recall: 0.0882\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b18/24 ━━━━━━━━━━━━━━━━━━━━ 2s 392ms/step - accuracy: 0.3864 - loss: 1.6621 - precision: 0.5545 - recall: 0.0874\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b19/24 ━━━━━━━━━━━━━━━━━━━━ 1s 383ms/step - accuracy: 0.3867 - loss: 1.6625 - precision: 0.5562 - recall: 0.0866\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b20/24 ━━━━━━━━━━━━━━━━━━━━ 1s 372ms/step - accuracy: 0.3870 - loss: 1.6629 - precision: 0.5576 - recall: 0.0860\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b21/24 ━━━━━━━━━━━━━━━━━━━━ 1s 364ms/step - accuracy: 0.3872 - loss: 1.6631 - precision: 0.5597 - recall: 0.0855\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b23/24 ━━━━━━━━━━━━━━━━━━━━ 0s 342ms/step - accuracy: 0.3873 - loss: 1.6639 - precision: 0.5637 - recall: 0.0847\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b24/24 ━━━━━━━━━━━━━━━━━━━━ 0s 335ms/step - accuracy: 0.3874 - loss: 1.6644 - precision: 0.5655 - recall: 0.0843\n\n\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\n\n\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b24/24 ━━━━━━━━━━━━━━━━━━━━ 9s 371ms/step - accuracy: 0.3874 - loss: 1.6650 - precision: 0.5673 - recall: 0.0840 - val_accuracy: 0.4054 - val_loss: 1.7359 - val_precision: 0.5200 - val_recall: 0.0703\nEpoch 9/20\n 1/24 ━━━━━━━━━━━━━━━━━━━━ 8s 351ms/step - accuracy: 0.3438 - loss: 1.6865 - precision: 0.7500 - recall: 0.0938\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 2/24 ━━━━━━━━━━━━━━━━━━━━ 4s 215ms/step - accuracy: 0.3438 - loss: 1.6877 - precision: 0.7250 - recall: 0.1016\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 3/24 ━━━━━━━━━━━━━━━━━━━━ 4s 208ms/step - accuracy: 0.3438 - loss: 1.6758 - precision: 0.7333 - recall: 0.1094\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 5/24 ━━━━━━━━━━━━━━━━━━━━ 3s 169ms/step - accuracy: 0.3529 - loss: 1.6491 - precision: 0.7453 - recall: 0.1142\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 6/24 ━━━━━━━━━━━━━━━━━━━━ 3s 180ms/step - accuracy: 0.3546 - loss: 1.6454 - precision: 0.7499 - recall: 0.1120\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 7/24 ━━━━━━━━━━━━━━━━━━━━ 3s 183ms/step - accuracy: 0.3525 - loss: 1.6474 - precision: 0.7417 - recall: 0.1089\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 8/24 ━━━━━━━━━━━━━━━━━━━━ 2s 187ms/step - accuracy: 0.3531 - loss: 1.6464 - precision: 0.7285 - recall: 0.1066\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 9/24 ━━━━━━━━━━━━━━━━━━━━ 2s 188ms/step - accuracy: 0.3530 - loss: 1.6463 - precision: 0.7226 - recall: 0.1061\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b10/24 ━━━━━━━━━━━━━━━━━━━━ 2s 191ms/step - accuracy: 0.3536 - loss: 1.6474 - precision: 0.7184 - recall: 0.1063\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b11/24 ━━━━━━━━━━━━━━━━━━━━ 2s 190ms/step - accuracy: 0.3552 - loss: 1.6464 - precision: 0.7147 - recall: 0.1077\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b12/24 ━━━━━━━━━━━━━━━━━━━━ 2s 191ms/step - accuracy: 0.3564 - loss: 1.6470 - precision: 0.7120 - recall: 0.1092\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b13/24 ━━━━━━━━━━━━━━━━━━━━ 2s 191ms/step - accuracy: 0.3573 - loss: 1.6480 - precision: 0.7070 - recall: 0.1098\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b14/24 ━━━━━━━━━━━━━━━━━━━━ 1s 190ms/step - accuracy: 0.3585 - loss: 1.6488 - precision: 0.7017 - recall: 0.1104\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b15/24 ━━━━━━━━━━━━━━━━━━━━ 1s 192ms/step - accuracy: 0.3596 - loss: 1.6498 - precision: 0.6962 - recall: 0.1110\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b16/24 ━━━━━━━━━━━━━━━━━━━━ 1s 191ms/step - accuracy: 0.3606 - loss: 1.6512 - precision: 0.6894 - recall: 0.1118\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b17/24 ━━━━━━━━━━━━━━━━━━━━ 1s 192ms/step - accuracy: 0.3613 - loss: 1.6524 - precision: 0.6824 - recall: 0.1126\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b18/24 ━━━━━━━━━━━━━━━━━━━━ 1s 191ms/step - accuracy: 0.3616 - loss: 1.6552 - precision: 0.6742 - recall: 0.1133\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b19/24 ━━━━━━━━━━━━━━━━━━━━ 0s 193ms/step - accuracy: 0.3618 - loss: 1.6575 - precision: 0.6666 - recall: 0.1138\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b20/24 ━━━━━━━━━━━━━━━━━━━━ 0s 193ms/step - accuracy: 0.3623 - loss: 1.6595 - precision: 0.6597 - recall: 0.1141\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b21/24 ━━━━━━━━━━━━━━━━━━━━ 0s 193ms/step - accuracy: 0.3631 - loss: 1.6606 - precision: 0.6537 - recall: 0.1143\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b22/24 ━━━━━━━━━━━━━━━━━━━━ 0s 193ms/step - accuracy: 0.3639 - loss: 1.6615 - precision: 0.6484 - recall: 0.1145\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b23/24 ━━━━━━━━━━━━━━━━━━━━ 0s 193ms/step - accuracy: 0.3648 - loss: 1.6621 - precision: 0.6444 - recall: 0.1148\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b24/24 ━━━━━━━━━━━━━━━━━━━━ 0s 193ms/step - accuracy: 0.3657 - loss: 1.6629 - precision: 0.6405 - recall: 0.1150\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b24/24 ━━━━━━━━━━━━━━━━━━━━ 5s 223ms/step - accuracy: 0.3666 - loss: 1.6637 - precision: 0.6370 - recall: 0.1153 - val_accuracy: 0.3243 - val_loss: 1.8331 - val_precision: 0.3333 - val_recall: 0.0432\nEpoch 10/20\n 1/24 ━━━━━━━━━━━━━━━━━━━━ 6s 290ms/step - accuracy: 0.4688 - loss: 1.5499 - precision: 0.7500 - recall: 0.0938\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 2/24 ━━━━━━━━━━━━━━━━━━━━ 4s 191ms/step - accuracy: 0.4375 - loss: 1.5826 - precision: 0.6528 - recall: 0.0859\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 3/24 ━━━━━━━━━━━━━━━━━━━━ 4s 192ms/step - accuracy: 0.4201 - loss: 1.6032 - precision: 0.6296 - recall: 0.0816\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 4/24 ━━━━━━━━━━━━━━━━━━━━ 3s 190ms/step - accuracy: 0.4186 - loss: 1.6086 - precision: 0.6261 - recall: 0.0768\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 5/24 ━━━━━━━━━━━━━━━━━━━━ 3s 190ms/step - accuracy: 0.4211 - loss: 1.6077 - precision: 0.6151 - recall: 0.0715\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 6/24 ━━━━━━━━━━━━━━━━━━━━ 3s 194ms/step - accuracy: 0.4230 - loss: 1.6038 - precision: 0.6237 - recall: 0.0700\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 7/24 ━━━━━━━━━━━━━━━━━━━━ 3s 199ms/step - accuracy: 0.4219 - loss: 1.6059 - precision: 0.6255 - recall: 0.0689\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 8/24 ━━━━━━━━━━━━━━━━━━━━ 3s 199ms/step - accuracy: 0.4199 - loss: 1.6081 - precision: 0.6339 - recall: 0.0691\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 9/24 ━━━━━━━━━━━━━━━━━━━━ 2s 199ms/step - accuracy: 0.4192 - loss: 1.6109 - precision: 0.6375 - recall: 0.0691\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b10/24 ━━━━━━━━━━━━━━━━━━━━ 2s 200ms/step - accuracy: 0.4182 - loss: 1.6129 - precision: 0.6366 - recall: 0.0691\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b11/24 ━━━━━━━━━━━━━━━━━━━━ 2s 199ms/step - accuracy: 0.4166 - loss: 1.6144 - precision: 0.6356 - recall: 0.0693\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b12/24 ━━━━━━━━━━━━━━━━━━━━ 2s 198ms/step - accuracy: 0.4142 - loss: 1.6190 - precision: 0.6323 - recall: 0.0696\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b13/24 ━━━━━━━━━━━━━━━━━━━━ 2s 197ms/step - accuracy: 0.4118 - loss: 1.6229 - precision: 0.6270 - recall: 0.0699\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b14/24 ━━━━━━━━━━━━━━━━━━━━ 1s 198ms/step - accuracy: 0.4099 - loss: 1.6254 - precision: 0.6225 - recall: 0.0705\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b15/24 ━━━━━━━━━━━━━━━━━━━━ 1s 198ms/step - accuracy: 0.4090 - loss: 1.6265 - precision: 0.6195 - recall: 0.0715\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b16/24 ━━━━━━━━━━━━━━━━━━━━ 1s 197ms/step - accuracy: 0.4086 - loss: 1.6275 - precision: 0.6165 - recall: 0.0724\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b17/24 ━━━━━━━━━━━━━━━━━━━━ 1s 197ms/step - accuracy: 0.4082 - loss: 1.6283 - precision: 0.6125 - recall: 0.0731\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b18/24 ━━━━━━━━━━━━━━━━━━━━ 1s 197ms/step - accuracy: 0.4075 - loss: 1.6294 - precision: 0.6090 - recall: 0.0739\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b20/24 ━━━━━━━━━━━━━━━━━━━━ 0s 189ms/step - accuracy: 0.4064 - loss: 1.6315 - precision: 0.6025 - recall: 0.0752\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b21/24 ━━━━━━━━━━━━━━━━━━━━ 0s 190ms/step - accuracy: 0.4061 - loss: 1.6327 - precision: 0.6006 - recall: 0.0759\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b22/24 ━━━━━━━━━━━━━━━━━━━━ 0s 190ms/step - accuracy: 0.4060 - loss: 1.6340 - precision: 0.5989 - recall: 0.0766\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b23/24 ━━━━━━━━━━━━━━━━━━━━ 0s 190ms/step - accuracy: 0.4058 - loss: 1.6354 - precision: 0.5975 - recall: 0.0772\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b24/24 ━━━━━━━━━━━━━━━━━━━━ 0s 190ms/step - accuracy: 0.4056 - loss: 1.6364 - precision: 0.5964 - recall: 0.0778\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b24/24 ━━━━━━━━━━━━━━━━━━━━ 5s 223ms/step - accuracy: 0.4054 - loss: 1.6374 - precision: 0.5954 - recall: 0.0783 - val_accuracy: 0.3351 - val_loss: 1.7881 - val_precision: 0.3750 - val_recall: 0.0486\nEpoch 11/20\n 1/24 ━━━━━━━━━━━━━━━━━━━━ 2s 93ms/step - accuracy: 0.5000 - loss: 1.6504 - precision: 0.6667 - recall: 0.2500\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 2/24 ━━━━━━━━━━━━━━━━━━━━ 5s 236ms/step - accuracy: 0.4000 - loss: 1.7469 - precision: 0.6333 - recall: 0.1625\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 3/24 ━━━━━━━━━━━━━━━━━━━━ 4s 214ms/step - accuracy: 0.3731 - loss: 1.7390 - precision: 0.5889 - recall: 0.1222\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 4/24 ━━━━━━━━━━━━━━━━━━━━ 4s 208ms/step - accuracy: 0.3712 - loss: 1.7252 - precision: 0.5806 - recall: 0.1037\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 5/24 ━━━━━━━━━━━━━━━━━━━━ 3s 205ms/step - accuracy: 0.3749 - loss: 1.7067 - precision: 0.5756 - recall: 0.0903\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 6/24 ━━━━━━━━━━━━━━━━━━━━ 3s 204ms/step - accuracy: 0.3769 - loss: 1.6951 - precision: 0.5796 - recall: 0.0812\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 7/24 ━━━━━━━━━━━━━━━━━━━━ 3s 204ms/step - accuracy: 0.3816 - loss: 1.6837 - precision: 0.5877 - recall: 0.0746\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 8/24 ━━━━━━━━━━━━━━━━━━━━ 3s 202ms/step - accuracy: 0.3851 - loss: 1.6727 - precision: 0.6008 - recall: 0.0701\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 9/24 ━━━━━━━━━━━━━━━━━━━━ 3s 200ms/step - accuracy: 0.3878 - loss: 1.6632 - precision: 0.6110 - recall: 0.0661\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b10/24 ━━━━━━━━━━━━━━━━━━━━ 2s 202ms/step - accuracy: 0.3895 - loss: 1.6560 - precision: 0.6183 - recall: 0.0639\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b11/24 ━━━━━━━━━━━━━━━━━━━━ 2s 200ms/step - accuracy: 0.3921 - loss: 1.6484 - precision: 0.6275 - recall: 0.0631\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b12/24 ━━━━━━━━━━━━━━━━━━━━ 2s 200ms/step - accuracy: 0.3939 - loss: 1.6425 - precision: 0.6308 - recall: 0.0625\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b13/24 ━━━━━━━━━━━━━━━━━━━━ 2s 199ms/step - accuracy: 0.3950 - loss: 1.6386 - precision: 0.6343 - recall: 0.0626\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b14/24 ━━━━━━━━━━━━━━━━━━━━ 1s 198ms/step - accuracy: 0.3956 - loss: 1.6363 - precision: 0.6366 - recall: 0.0635\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b15/24 ━━━━━━━━━━━━━━━━━━━━ 1s 199ms/step - accuracy: 0.3963 - loss: 1.6344 - precision: 0.6368 - recall: 0.0652\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b16/24 ━━━━━━━━━━━━━━━━━━━━ 1s 198ms/step - accuracy: 0.3964 - loss: 1.6338 - precision: 0.6347 - recall: 0.0668\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b17/24 ━━━━━━━━━━━━━━━━━━━━ 1s 197ms/step - accuracy: 0.3963 - loss: 1.6340 - precision: 0.6323 - recall: 0.0686\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b18/24 ━━━━━━━━━━━━━━━━━━━━ 1s 196ms/step - accuracy: 0.3960 - loss: 1.6346 - precision: 0.6290 - recall: 0.0703\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b19/24 ━━━━━━━━━━━━━━━━━━━━ 0s 196ms/step - accuracy: 0.3953 - loss: 1.6350 - precision: 0.6265 - recall: 0.0718\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b20/24 ━━━━━━━━━━━━━━━━━━━━ 0s 196ms/step - accuracy: 0.3952 - loss: 1.6358 - precision: 0.6240 - recall: 0.0733\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b21/24 ━━━━━━━━━━━━━━━━━━━━ 0s 196ms/step - accuracy: 0.3950 - loss: 1.6371 - precision: 0.6217 - recall: 0.0747\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b22/24 ━━━━━━━━━━━━━━━━━━━━ 0s 196ms/step - accuracy: 0.3949 - loss: 1.6379 - precision: 0.6193 - recall: 0.0760\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b23/24 ━━━━━━━━━━━━━━━━━━━━ 0s 195ms/step - accuracy: 0.3944 - loss: 1.6392 - precision: 0.6166 - recall: 0.0770\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b24/24 ━━━━━━━━━━━━━━━━━━━━ 0s 195ms/step - accuracy: 0.3938 - loss: 1.6406 - precision: 0.6145 - recall: 0.0779\n\n\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\n\n\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b24/24 ━━━━━━━━━━━━━━━━━━━━ 5s 230ms/step - accuracy: 0.3933 - loss: 1.6418 - precision: 0.6125 - recall: 0.0788 - val_accuracy: 0.4000 - val_loss: 1.6950 - val_precision: 0.6250 - val_recall: 0.0541\nEpoch 12/20\n 1/24 ━━━━━━━━━━━━━━━━━━━━ 6s 286ms/step - accuracy: 0.5312 - loss: 1.6065 - precision: 1.0000 - recall: 0.0625\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 2/24 ━━━━━━━━━━━━━━━━━━━━ 4s 191ms/step - accuracy: 0.5156 - loss: 1.6083 - precision: 1.0000 - recall: 0.0469\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 3/24 ━━━━━━━━━━━━━━━━━━━━ 3s 186ms/step - accuracy: 0.5000 - loss: 1.6329 - precision: 0.8333 - recall: 0.0382\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 4/24 ━━━━━━━━━━━━━━━━━━━━ 3s 185ms/step - accuracy: 0.4844 - loss: 1.6432 - precision: 0.8036 - recall: 0.0384\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 5/24 ━━━━━━━━━━━━━━━━━━━━ 3s 191ms/step - accuracy: 0.4737 - loss: 1.6536 - precision: 0.7762 - recall: 0.0382\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 6/24 ━━━━━━━━━━━━━━━━━━━━ 3s 192ms/step - accuracy: 0.4651 - loss: 1.6577 - precision: 0.7468 - recall: 0.0371\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 7/24 ━━━━━━━━━━━━━━━━━━━━ 3s 192ms/step - accuracy: 0.4580 - loss: 1.6581 - precision: 0.7354 - recall: 0.0369\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 8/24 ━━━━━━━━━━━━━━━━━━━━ 3s 193ms/step - accuracy: 0.4520 - loss: 1.6583 - precision: 0.7351 - recall: 0.0376\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 9/24 ━━━━━━━━━━━━━━━━━━━━ 2s 193ms/step - accuracy: 0.4465 - loss: 1.6571 - precision: 0.7337 - recall: 0.0385\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b10/24 ━━━━━━━━━━━━━━━━━━━━ 2s 195ms/step - accuracy: 0.4422 - loss: 1.6556 - precision: 0.7299 - recall: 0.0396\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b11/24 ━━━━━━━━━━━━━━━━━━━━ 2s 195ms/step - accuracy: 0.4387 - loss: 1.6543 - precision: 0.7217 - recall: 0.0402\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b12/24 ━━━━━━━━━━━━━━━━━━━━ 2s 196ms/step - accuracy: 0.4355 - loss: 1.6523 - precision: 0.7153 - recall: 0.0411\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b13/24 ━━━━━━━━━━━━━━━━━━━━ 2s 196ms/step - accuracy: 0.4331 - loss: 1.6498 - precision: 0.7095 - recall: 0.0422\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b14/24 ━━━━━━━━━━━━━━━━━━━━ 1s 197ms/step - accuracy: 0.4309 - loss: 1.6481 - precision: 0.7064 - recall: 0.0440\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b15/24 ━━━━━━━━━━━━━━━━━━━━ 1s 198ms/step - accuracy: 0.4285 - loss: 1.6476 - precision: 0.6981 - recall: 0.0455\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b17/24 ━━━━━━━━━━━━━━━━━━━━ 1s 189ms/step - accuracy: 0.4246 - loss: 1.6465 - precision: 0.6853 - recall: 0.0485\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b18/24 ━━━━━━━━━━━━━━━━━━━━ 1s 190ms/step - accuracy: 0.4232 - loss: 1.6453 - precision: 0.6786 - recall: 0.0503\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b19/24 ━━━━━━━━━━━━━━━━━━━━ 0s 191ms/step - accuracy: 0.4219 - loss: 1.6445 - precision: 0.6720 - recall: 0.0519\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b20/24 ━━━━━━━━━━━━━━━━━━━━ 0s 192ms/step - accuracy: 0.4208 - loss: 1.6441 - precision: 0.6668 - recall: 0.0537\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b21/24 ━━━━━━━━━━━━━━━━━━━━ 0s 193ms/step - accuracy: 0.4197 - loss: 1.6441 - precision: 0.6610 - recall: 0.0554\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b22/24 ━━━━━━━━━━━━━━━━━━━━ 0s 193ms/step - accuracy: 0.4187 - loss: 1.6440 - precision: 0.6558 - recall: 0.0573\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b23/24 ━━━━━━━━━━━━━━━━━━━━ 0s 193ms/step - accuracy: 0.4175 - loss: 1.6439 - precision: 0.6506 - recall: 0.0589\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b24/24 ━━━━━━━━━━━━━━━━━━━━ 0s 193ms/step - accuracy: 0.4165 - loss: 1.6442 - precision: 0.6457 - recall: 0.0602\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b24/24 ━━━━━━━━━━━━━━━━━━━━ 5s 224ms/step - accuracy: 0.4155 - loss: 1.6446 - precision: 0.6411 - recall: 0.0614 - val_accuracy: 0.3784 - val_loss: 1.7170 - val_precision: 0.4815 - val_recall: 0.0703\nEpoch 13/20\n 1/24 ━━━━━━━━━━━━━━━━━━━━ 6s 280ms/step - accuracy: 0.5000 - loss: 1.5144 - precision: 0.8000 - recall: 0.1250\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 2/24 ━━━━━━━━━━━━━━━━━━━━ 4s 190ms/step - accuracy: 0.4531 - loss: 1.5807 - precision: 0.7571 - recall: 0.1016\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 3/24 ━━━━━━━━━━━━━━━━━━━━ 4s 192ms/step - accuracy: 0.4479 - loss: 1.5857 - precision: 0.7429 - recall: 0.0851\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 4/24 ━━━━━━━━━━━━━━━━━━━━ 3s 191ms/step - accuracy: 0.4375 - loss: 1.5920 - precision: 0.7446 - recall: 0.0755\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 5/24 ━━━━━━━━━━━━━━━━━━━━ 3s 204ms/step - accuracy: 0.4300 - loss: 1.5935 - precision: 0.7496 - recall: 0.0729\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 6/24 ━━━━━━━━━━━━━━━━━━━━ 3s 202ms/step - accuracy: 0.4226 - loss: 1.5963 - precision: 0.7357 - recall: 0.0694\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 7/24 ━━━━━━━━━━━━━━━━━━━━ 3s 199ms/step - accuracy: 0.4190 - loss: 1.5961 - precision: 0.7259 - recall: 0.0659\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 8/24 ━━━━━━━━━━━━━━━━━━━━ 3s 199ms/step - accuracy: 0.4169 - loss: 1.5980 - precision: 0.7147 - recall: 0.0645\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 9/24 ━━━━━━━━━━━━━━━━━━━━ 3s 200ms/step - accuracy: 0.4157 - loss: 1.5995 - precision: 0.7064 - recall: 0.0635\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b10/24 ━━━━━━━━━━━━━━━━━━━━ 2s 202ms/step - accuracy: 0.4129 - loss: 1.6026 - precision: 0.6997 - recall: 0.0622\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b11/24 ━━━━━━━━━━━━━━━━━━━━ 2s 203ms/step - accuracy: 0.4115 - loss: 1.6047 - precision: 0.6967 - recall: 0.0612\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b12/24 ━━━━━━━━━━━━━━━━━━━━ 2s 203ms/step - accuracy: 0.4109 - loss: 1.6069 - precision: 0.6934 - recall: 0.0606\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b13/24 ━━━━━━━━━━━━━━━━━━━━ 2s 202ms/step - accuracy: 0.4105 - loss: 1.6082 - precision: 0.6921 - recall: 0.0602\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b14/24 ━━━━━━━━━━━━━━━━━━━━ 2s 204ms/step - accuracy: 0.4100 - loss: 1.6087 - precision: 0.6922 - recall: 0.0599\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b15/24 ━━━━━━━━━━━━━━━━━━━━ 1s 204ms/step - accuracy: 0.4099 - loss: 1.6096 - precision: 0.6937 - recall: 0.0601\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b16/24 ━━━━━━━━━━━━━━━━━━━━ 1s 204ms/step - accuracy: 0.4096 - loss: 1.6099 - precision: 0.6946 - recall: 0.0605\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b17/24 ━━━━━━━━━━━━━━━━━━━━ 1s 204ms/step - accuracy: 0.4093 - loss: 1.6102 - precision: 0.6959 - recall: 0.0610\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b18/24 ━━━━━━━━━━━━━━━━━━━━ 2s 392ms/step - accuracy: 0.4093 - loss: 1.6104 - precision: 0.6971 - recall: 0.0618\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b19/24 ━━━━━━━━━━━━━━━━━━━━ 1s 382ms/step - accuracy: 0.4098 - loss: 1.6104 - precision: 0.6983 - recall: 0.0628\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b20/24 ━━━━━━━━━━━━━━━━━━━━ 1s 374ms/step - accuracy: 0.4102 - loss: 1.6104 - precision: 0.6995 - recall: 0.0641\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b22/24 ━━━━━━━━━━━━━━━━━━━━ 0s 352ms/step - accuracy: 0.4108 - loss: 1.6102 - precision: 0.7011 - recall: 0.0669\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b23/24 ━━━━━━━━━━━━━━━━━━━━ 0s 348ms/step - accuracy: 0.4109 - loss: 1.6104 - precision: 0.7005 - recall: 0.0684\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b24/24 ━━━━━━━━━━━━━━━━━━━━ 0s 344ms/step - accuracy: 0.4107 - loss: 1.6107 - precision: 0.6980 - recall: 0.0699\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b24/24 ━━━━━━━━━━━━━━━━━━━━ 9s 378ms/step - accuracy: 0.4106 - loss: 1.6110 - precision: 0.6956 - recall: 0.0713 - val_accuracy: 0.3838 - val_loss: 1.7631 - val_precision: 0.5789 - val_recall: 0.2378\nEpoch 14/20\n 1/24 ━━━━━━━━━━━━━━━━━━━━ 6s 277ms/step - accuracy: 0.3750 - loss: 1.5465 - precision: 0.7273 - recall: 0.2500\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 2/24 ━━━━━━━━━━━━━━━━━━━━ 4s 211ms/step - accuracy: 0.4062 - loss: 1.5341 - precision: 0.6761 - recall: 0.2422\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 3/24 ━━━━━━━━━━━━━━━━━━━━ 4s 217ms/step - accuracy: 0.4201 - loss: 1.5289 - precision: 0.6664 - recall: 0.2378\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 4/24 ━━━━━━━━━━━━━━━━━━━━ 4s 213ms/step - accuracy: 0.4186 - loss: 1.5283 - precision: 0.6609 - recall: 0.2350\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 5/24 ━━━━━━━━━━━━━━━━━━━━ 4s 219ms/step - accuracy: 0.4174 - loss: 1.5325 - precision: 0.6608 - recall: 0.2293\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 6/24 ━━━━━━━━━━━━━━━━━━━━ 3s 218ms/step - accuracy: 0.4147 - loss: 1.5379 - precision: 0.6578 - recall: 0.2223\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 7/24 ━━━━━━━━━━━━━━━━━━━━ 3s 216ms/step - accuracy: 0.4147 - loss: 1.5395 - precision: 0.6531 - recall: 0.2161\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 8/24 ━━━━━━━━━━━━━━━━━━━━ 3s 216ms/step - accuracy: 0.4127 - loss: 1.5434 - precision: 0.6487 - recall: 0.2096\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 9/24 ━━━━━━━━━━━━━━━━━━━━ 3s 215ms/step - accuracy: 0.4097 - loss: 1.5510 - precision: 0.6457 - recall: 0.2040\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b10/24 ━━━━━━━━━━━━━━━━━━━━ 2s 213ms/step - accuracy: 0.4071 - loss: 1.5569 - precision: 0.6444 - recall: 0.1992\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b11/24 ━━━━━━━━━━━━━━━━━━━━ 2s 211ms/step - accuracy: 0.4050 - loss: 1.5631 - precision: 0.6435 - recall: 0.1946\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b12/24 ━━━━━━━━━━━━━━━━━━━━ 2s 212ms/step - accuracy: 0.4036 - loss: 1.5681 - precision: 0.6423 - recall: 0.1905\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b13/24 ━━━━━━━━━━━━━━━━━━━━ 2s 210ms/step - accuracy: 0.4027 - loss: 1.5723 - precision: 0.6408 - recall: 0.1866\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b14/24 ━━━━━━━━━━━━━━━━━━━━ 2s 209ms/step - accuracy: 0.4018 - loss: 1.5757 - precision: 0.6398 - recall: 0.1831\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b15/24 ━━━━━━━━━━━━━━━━━━━━ 1s 209ms/step - accuracy: 0.4014 - loss: 1.5778 - precision: 0.6394 - recall: 0.1801\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b16/24 ━━━━━━━━━━━━━━━━━━━━ 1s 209ms/step - accuracy: 0.4011 - loss: 1.5791 - precision: 0.6394 - recall: 0.1770\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b17/24 ━━━━━━━━━━━━━━━━━━━━ 1s 211ms/step - accuracy: 0.4012 - loss: 1.5801 - precision: 0.6394 - recall: 0.1743\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b18/24 ━━━━━━━━━━━━━━━━━━━━ 1s 212ms/step - accuracy: 0.4013 - loss: 1.5811 - precision: 0.6393 - recall: 0.1719\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b19/24 ━━━━━━━━━━━━━━━━━━━━ 1s 213ms/step - accuracy: 0.4010 - loss: 1.5822 - precision: 0.6392 - recall: 0.1695\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b20/24 ━━━━━━━━━━━━━━━━━━━━ 0s 214ms/step - accuracy: 0.4005 - loss: 1.5838 - precision: 0.6385 - recall: 0.1673\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b21/24 ━━━━━━━━━━━━━━━━━━━━ 0s 215ms/step - accuracy: 0.4006 - loss: 1.5847 - precision: 0.6383 - recall: 0.1654\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b22/24 ━━━━━━━━━━━━━━━━━━━━ 0s 215ms/step - accuracy: 0.4007 - loss: 1.5856 - precision: 0.6380 - recall: 0.1636\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b23/24 ━━━━━━━━━━━━━━━━━━━━ 0s 214ms/step - accuracy: 0.4006 - loss: 1.5866 - precision: 0.6376 - recall: 0.1620\n\n\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\n\n\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b24/24 ━━━━━━━━━━━━━━━━━━━━ 6s 241ms/step - accuracy: 0.4007 - loss: 1.5882 - precision: 0.6368 - recall: 0.1594 - val_accuracy: 0.4216 - val_loss: 1.6771 - val_precision: 0.6290 - val_recall: 0.2108\nEpoch 15/20\n 1/24 ━━━━━━━━━━━━━━━━━━━━ 7s 325ms/step - accuracy: 0.4062 - loss: 1.4933 - precision: 0.7000 - recall: 0.2188\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 2/24 ━━━━━━━━━━━━━━━━━━━━ 5s 234ms/step - accuracy: 0.3750 - loss: 1.6112 - precision: 0.6227 - recall: 0.2031\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 3/24 ━━━━━━━━━━━━━━━━━━━━ 4s 227ms/step - accuracy: 0.3854 - loss: 1.6194 - precision: 0.6056 - recall: 0.2049\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 4/24 ━━━━━━━━━━━━━━━━━━━━ 4s 218ms/step - accuracy: 0.3887 - loss: 1.6325 - precision: 0.5987 - recall: 0.2044\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 5/24 ━━━━━━━━━━━━━━━━━━━━ 4s 211ms/step - accuracy: 0.3959 - loss: 1.6308 - precision: 0.5932 - recall: 0.2035\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 6/24 ━━━━━━━━━━━━━━━━━━━━ 3s 213ms/step - accuracy: 0.3994 - loss: 1.6314 - precision: 0.5889 - recall: 0.2026\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 7/24 ━━━━━━━━━━━━━━━━━━━━ 3s 187ms/step - accuracy: 0.4009 - loss: 1.6323 - precision: 0.5834 - recall: 0.2008\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 8/24 ━━━━━━━━━━━━━━━━━━━━ 3s 191ms/step - accuracy: 0.4025 - loss: 1.6292 - precision: 0.5803 - recall: 0.1989\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 9/24 ━━━━━━━━━━━━━━━━━━━━ 2s 192ms/step - accuracy: 0.4049 - loss: 1.6250 - precision: 0.5781 - recall: 0.1982\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b10/24 ━━━━━━━━━━━━━━━━━━━━ 2s 193ms/step - accuracy: 0.4077 - loss: 1.6201 - precision: 0.5791 - recall: 0.1987\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b11/24 ━━━━━━━━━━━━━━━━━━━━ 2s 196ms/step - accuracy: 0.4089 - loss: 1.6168 - precision: 0.5798 - recall: 0.1984\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b12/24 ━━━━━━━━━━━━━━━━━━━━ 2s 195ms/step - accuracy: 0.4086 - loss: 1.6157 - precision: 0.5797 - recall: 0.1973\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b13/24 ━━━━━━━━━━━━━━━━━━━━ 2s 195ms/step - accuracy: 0.4084 - loss: 1.6156 - precision: 0.5798 - recall: 0.1961\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b14/24 ━━━━━━━━━━━━━━━━━━━━ 1s 194ms/step - accuracy: 0.4075 - loss: 1.6157 - precision: 0.5806 - recall: 0.1947\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b15/24 ━━━━━━━━━━━━━━━━━━━━ 1s 195ms/step - accuracy: 0.4077 - loss: 1.6147 - precision: 0.5825 - recall: 0.1936\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b16/24 ━━━━━━━━━━━━━━━━━━━━ 1s 196ms/step - accuracy: 0.4079 - loss: 1.6132 - precision: 0.5845 - recall: 0.1921\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b17/24 ━━━━━━━━━━━━━━━━━━━━ 1s 196ms/step - accuracy: 0.4079 - loss: 1.6119 - precision: 0.5867 - recall: 0.1907\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b18/24 ━━━━━━━━━━━━━━━━━━━━ 1s 196ms/step - accuracy: 0.4078 - loss: 1.6111 - precision: 0.5888 - recall: 0.1889\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b19/24 ━━━━━━━━━━━━━━━━━━━━ 0s 196ms/step - accuracy: 0.4078 - loss: 1.6101 - precision: 0.5907 - recall: 0.1873\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b20/24 ━━━━━━━━━━━━━━━━━━━━ 0s 196ms/step - accuracy: 0.4081 - loss: 1.6093 - precision: 0.5926 - recall: 0.1857\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b21/24 ━━━━━━━━━━━━━━━━━━━━ 0s 196ms/step - accuracy: 0.4085 - loss: 1.6088 - precision: 0.5935 - recall: 0.1841\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b22/24 ━━━━━━━━━━━━━━━━━━━━ 0s 196ms/step - accuracy: 0.4090 - loss: 1.6083 - precision: 0.5941 - recall: 0.1824\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b23/24 ━━━━━━━━━━━━━━━━━━━━ 0s 196ms/step - accuracy: 0.4094 - loss: 1.6078 - precision: 0.5948 - recall: 0.1808\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b24/24 ━━━━━━━━━━━━━━━━━━━━ 0s 196ms/step - accuracy: 0.4099 - loss: 1.6074 - precision: 0.5954 - recall: 0.1792\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b24/24 ━━━━━━━━━━━━━━━━━━━━ 6s 227ms/step - accuracy: 0.4103 - loss: 1.6071 - precision: 0.5960 - recall: 0.1777 - val_accuracy: 0.4000 - val_loss: 1.7387 - val_precision: 0.4242 - val_recall: 0.0757\nEpoch 16/20\n 1/24 ━━━━━━━━━━━━━━━━━━━━ 7s 305ms/step - accuracy: 0.3125 - loss: 1.7572 - precision: 0.6000 - recall: 0.0938\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 2/24 ━━━━━━━━━━━━━━━━━━━━ 4s 195ms/step - accuracy: 0.3750 - loss: 1.6721 - precision: 0.6750 - recall: 0.0938\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 3/24 ━━━━━━━━━━━━━━━━━━━━ 4s 192ms/step - accuracy: 0.3993 - loss: 1.6273 - precision: 0.7000 - recall: 0.0938\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 5/24 ━━━━━━━━━━━━━━━━━━━━ 3s 162ms/step - accuracy: 0.4046 - loss: 1.5914 - precision: 0.7200 - recall: 0.0956\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 6/24 ━━━━━━━━━━━━━━━━━━━━ 3s 172ms/step - accuracy: 0.4086 - loss: 1.5832 - precision: 0.7250 - recall: 0.1005\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 7/24 ━━━━━━━━━━━━━━━━━━━━ 3s 177ms/step - accuracy: 0.4088 - loss: 1.5754 - precision: 0.7235 - recall: 0.1040\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 8/24 ━━━━━━━━━━━━━━━━━━━━ 2s 180ms/step - accuracy: 0.4116 - loss: 1.5669 - precision: 0.7260 - recall: 0.1066\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 9/24 ━━━━━━━━━━━━━━━━━━━━ 2s 184ms/step - accuracy: 0.4138 - loss: 1.5618 - precision: 0.7280 - recall: 0.1083\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b10/24 ━━━━━━━━━━━━━━━━━━━━ 2s 185ms/step - accuracy: 0.4184 - loss: 1.5544 - precision: 0.7307 - recall: 0.1099\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b11/24 ━━━━━━━━━━━━━━━━━━━━ 2s 187ms/step - accuracy: 0.4230 - loss: 1.5471 - precision: 0.7347 - recall: 0.1132\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b12/24 ━━━━━━━━━━━━━━━━━━━━ 2s 189ms/step - accuracy: 0.4271 - loss: 1.5404 - precision: 0.7388 - recall: 0.1172\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b13/24 ━━━━━━━━━━━━━━━━━━━━ 2s 190ms/step - accuracy: 0.4310 - loss: 1.5348 - precision: 0.7408 - recall: 0.1210\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b14/24 ━━━━━━━━━━━━━━━━━━━━ 1s 191ms/step - accuracy: 0.4329 - loss: 1.5323 - precision: 0.7391 - recall: 0.1234\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b15/24 ━━━━━━━━━━━━━━━━━━━━ 1s 192ms/step - accuracy: 0.4340 - loss: 1.5316 - precision: 0.7358 - recall: 0.1256\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b16/24 ━━━━━━━━━━━━━━━━━━━━ 1s 192ms/step - accuracy: 0.4347 - loss: 1.5320 - precision: 0.7320 - recall: 0.1281\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b17/24 ━━━━━━━━━━━━━━━━━━━━ 1s 193ms/step - accuracy: 0.4347 - loss: 1.5332 - precision: 0.7277 - recall: 0.1304\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b18/24 ━━━━━━━━━━━━━━━━━━━━ 1s 193ms/step - accuracy: 0.4345 - loss: 1.5355 - precision: 0.7223 - recall: 0.1324\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b19/24 ━━━━━━━━━━━━━━━━━━━━ 0s 196ms/step - accuracy: 0.4344 - loss: 1.5377 - precision: 0.7174 - recall: 0.1344\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b20/24 ━━━━━━━━━━━━━━━━━━━━ 0s 197ms/step - accuracy: 0.4342 - loss: 1.5394 - precision: 0.7133 - recall: 0.1361\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b21/24 ━━━━━━━━━━━━━━━━━━━━ 0s 198ms/step - accuracy: 0.4339 - loss: 1.5415 - precision: 0.7092 - recall: 0.1374\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b22/24 ━━━━━━━━━━━━━━━━━━━━ 0s 198ms/step - accuracy: 0.4335 - loss: 1.5437 - precision: 0.7053 - recall: 0.1384\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b23/24 ━━━━━━━━━━━━━━━━━━━━ 0s 198ms/step - accuracy: 0.4332 - loss: 1.5456 - precision: 0.7018 - recall: 0.1392\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b24/24 ━━━━━━━━━━━━━━━━━━━━ 0s 198ms/step - accuracy: 0.4331 - loss: 1.5473 - precision: 0.6988 - recall: 0.1399\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b24/24 ━━━━━━━━━━━━━━━━━━━━ 6s 232ms/step - accuracy: 0.4329 - loss: 1.5488 - precision: 0.6961 - recall: 0.1405 - val_accuracy: 0.3568 - val_loss: 1.7556 - val_precision: 0.3750 - val_recall: 0.0486\nEpoch 17/20\n 1/24 ━━━━━━━━━━━━━━━━━━━━ 8s 372ms/step - accuracy: 0.3750 - loss: 1.8425 - precision: 0.6000 - recall: 0.0938\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 2/24 ━━━━━━━━━━━━━━━━━━━━ 6s 292ms/step - accuracy: 0.3594 - loss: 1.7887 - precision: 0.6125 - recall: 0.0859\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 3/24 ━━━━━━━━━━━━━━━━━━━━ 5s 273ms/step - accuracy: 0.3854 - loss: 1.7340 - precision: 0.6391 - recall: 0.0885\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 4/24 ━━━━━━━━━━━━━━━━━━━━ 6s 305ms/step - accuracy: 0.4023 - loss: 1.6997 - precision: 0.6512 - recall: 0.0879\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 5/24 ━━━━━━━━━━━━━━━━━━━━ 5s 304ms/step - accuracy: 0.4094 - loss: 1.6780 - precision: 0.6610 - recall: 0.0878\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 6/24 ━━━━━━━━━━━━━━━━━━━━ 5s 299ms/step - accuracy: 0.4123 - loss: 1.6688 - precision: 0.6740 - recall: 0.0879\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 7/24 ━━━━━━━━━━━━━━━━━━━━ 5s 303ms/step - accuracy: 0.4159 - loss: 1.6610 - precision: 0.6748 - recall: 0.0862\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 8/24 ━━━━━━━━━━━━━━━━━━━━ 4s 293ms/step - accuracy: 0.4186 - loss: 1.6542 - precision: 0.6785 - recall: 0.0847\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 9/24 ━━━━━━━━━━━━━━━━━━━━ 4s 289ms/step - accuracy: 0.4211 - loss: 1.6460 - precision: 0.6819 - recall: 0.0838\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b10/24 ━━━━━━━━━━━━━━━━━━━━ 4s 294ms/step - accuracy: 0.4227 - loss: 1.6390 - precision: 0.6860 - recall: 0.0835\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b11/24 ━━━━━━━━━━━━━━━━━━━━ 3s 289ms/step - accuracy: 0.4228 - loss: 1.6345 - precision: 0.6901 - recall: 0.0837\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b12/24 ━━━━━━━━━━━━━━━━━━━━ 3s 285ms/step - accuracy: 0.4238 - loss: 1.6314 - precision: 0.6956 - recall: 0.0841\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b14/24 ━━━━━━━━━━━━━━━━━━━━ 2s 262ms/step - accuracy: 0.4251 - loss: 1.6261 - precision: 0.7010 - recall: 0.0854\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b15/24 ━━━━━━━━━━━━━━━━━━━━ 2s 258ms/step - accuracy: 0.4248 - loss: 1.6246 - precision: 0.6991 - recall: 0.0863\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b16/24 ━━━━━━━━━━━━━━━━━━━━ 2s 254ms/step - accuracy: 0.4240 - loss: 1.6240 - precision: 0.6952 - recall: 0.0874\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b17/24 ━━━━━━━━━━━━━━━━━━━━ 1s 251ms/step - accuracy: 0.4236 - loss: 1.6226 - precision: 0.6919 - recall: 0.0893\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b18/24 ━━━━━━━━━━━━━━━━━━━━ 1s 248ms/step - accuracy: 0.4236 - loss: 1.6208 - precision: 0.6882 - recall: 0.0908\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b19/24 ━━━━━━━━━━━━━━━━━━━━ 1s 246ms/step - accuracy: 0.4238 - loss: 1.6187 - precision: 0.6850 - recall: 0.0927\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b20/24 ━━━━━━━━━━━━━━━━━━━━ 0s 245ms/step - accuracy: 0.4243 - loss: 1.6159 - precision: 0.6827 - recall: 0.0950\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b21/24 ━━━━━━━━━━━━━━━━━━━━ 0s 244ms/step - accuracy: 0.4248 - loss: 1.6133 - precision: 0.6813 - recall: 0.0975\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b22/24 ━━━━━━━━━━━━━━━━━━━━ 0s 242ms/step - accuracy: 0.4249 - loss: 1.6117 - precision: 0.6800 - recall: 0.0999\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b23/24 ━━━━━━━━━━━━━━━━━━━━ 0s 242ms/step - accuracy: 0.4249 - loss: 1.6100 - precision: 0.6788 - recall: 0.1020\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b24/24 ━━━━━━━━━━━━━━━━━━━━ 0s 241ms/step - accuracy: 0.4252 - loss: 1.6084 - precision: 0.6777 - recall: 0.1042\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b24/24 ━━━━━━━━━━━━━━━━━━━━ 7s 276ms/step - accuracy: 0.4255 - loss: 1.6069 - precision: 0.6767 - recall: 0.1062 - val_accuracy: 0.3784 - val_loss: 1.7572 - val_precision: 0.4048 - val_recall: 0.0919\nEpoch 18/20\n 1/24 ━━━━━━━━━━━━━━━━━━━━ 7s 317ms/step - accuracy: 0.4062 - loss: 1.4917 - precision: 0.6667 - recall: 0.0625\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 2/24 ━━━━━━━━━━━━━━━━━━━━ 5s 235ms/step - accuracy: 0.4297 - loss: 1.5140 - precision: 0.6667 - recall: 0.0781\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 3/24 ━━━━━━━━━━━━━━━━━━━━ 4s 225ms/step - accuracy: 0.4392 - loss: 1.5319 - precision: 0.6508 - recall: 0.0972\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 4/24 ━━━━━━━━━━━━━━━━━━━━ 4s 220ms/step - accuracy: 0.4466 - loss: 1.5412 - precision: 0.6381 - recall: 0.1081\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 5/24 ━━━━━━━━━━━━━━━━━━━━ 4s 219ms/step - accuracy: 0.4485 - loss: 1.5401 - precision: 0.6399 - recall: 0.1140\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 6/24 ━━━━━━━━━━━━━━━━━━━━ 3s 219ms/step - accuracy: 0.4484 - loss: 1.5447 - precision: 0.6416 - recall: 0.1175\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 7/24 ━━━━━━━━━━━━━━━━━━━━ 3s 216ms/step - accuracy: 0.4482 - loss: 1.5471 - precision: 0.6431 - recall: 0.1199\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 8/24 ━━━━━━━━━━━━━━━━━━━━ 3s 213ms/step - accuracy: 0.4473 - loss: 1.5491 - precision: 0.6476 - recall: 0.1225\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 9/24 ━━━━━━━━━━━━━━━━━━━━ 3s 213ms/step - accuracy: 0.4454 - loss: 1.5495 - precision: 0.6468 - recall: 0.1247\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b10/24 ━━━━━━━━━━━━━━━━━━━━ 2s 213ms/step - accuracy: 0.4437 - loss: 1.5477 - precision: 0.6479 - recall: 0.1266\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b11/24 ━━━━━━━━━━━━━━━━━━━━ 2s 215ms/step - accuracy: 0.4431 - loss: 1.5454 - precision: 0.6488 - recall: 0.1285\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b12/24 ━━━━━━━━━━━━━━━━━━━━ 2s 214ms/step - accuracy: 0.4435 - loss: 1.5436 - precision: 0.6493 - recall: 0.1302\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b13/24 ━━━━━━━━━━━━━━━━━━━━ 2s 213ms/step - accuracy: 0.4438 - loss: 1.5422 - precision: 0.6515 - recall: 0.1322\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b14/24 ━━━━━━━━━━━━━━━━━━━━ 2s 212ms/step - accuracy: 0.4437 - loss: 1.5409 - precision: 0.6528 - recall: 0.1337\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b15/24 ━━━━━━━━━━━━━━━━━━━━ 1s 213ms/step - accuracy: 0.4434 - loss: 1.5404 - precision: 0.6549 - recall: 0.1351\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b16/24 ━━━━━━━━━━━━━━━━━━━━ 1s 203ms/step - accuracy: 0.4432 - loss: 1.5407 - precision: 0.6564 - recall: 0.1361\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b17/24 ━━━━━━━━━━━━━━━━━━━━ 1s 203ms/step - accuracy: 0.4426 - loss: 1.5415 - precision: 0.6564 - recall: 0.1369\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b18/24 ━━━━━━━━━━━━━━━━━━━━ 1s 203ms/step - accuracy: 0.4424 - loss: 1.5421 - precision: 0.6567 - recall: 0.1378\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b19/24 ━━━━━━━━━━━━━━━━━━━━ 1s 203ms/step - accuracy: 0.4423 - loss: 1.5421 - precision: 0.6567 - recall: 0.1385\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b20/24 ━━━━━━━━━━━━━━━━━━━━ 1s 361ms/step - accuracy: 0.4421 - loss: 1.5426 - precision: 0.6566 - recall: 0.1391\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b21/24 ━━━━━━━━━━━━━━━━━━━━ 1s 353ms/step - accuracy: 0.4417 - loss: 1.5431 - precision: 0.6566 - recall: 0.1395\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b22/24 ━━━━━━━━━━━━━━━━━━━━ 0s 346ms/step - accuracy: 0.4414 - loss: 1.5436 - precision: 0.6566 - recall: 0.1398\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b23/24 ━━━━━━━━━━━━━━━━━━━━ 0s 339ms/step - accuracy: 0.4410 - loss: 1.5442 - precision: 0.6567 - recall: 0.1400\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b24/24 ━━━━━━━━━━━━━━━━━━━━ 0s 333ms/step - accuracy: 0.4404 - loss: 1.5448 - precision: 0.6570 - recall: 0.1401\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b24/24 ━━━━━━━━━━━━━━━━━━━━ 9s 370ms/step - accuracy: 0.4398 - loss: 1.5454 - precision: 0.6572 - recall: 0.1402 - val_accuracy: 0.4000 - val_loss: 1.6811 - val_precision: 0.5312 - val_recall: 0.0919\nEpoch 19/20\n 1/24 ━━━━━━━━━━━━━━━━━━━━ 2s 104ms/step - accuracy: 0.3750 - loss: 1.3887 - precision: 1.0000 - recall: 0.1250\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 2/24 ━━━━━━━━━━━━━━━━━━━━ 6s 288ms/step - accuracy: 0.4125 - loss: 1.3765 - precision: 0.9000 - recall: 0.1125\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 3/24 ━━━━━━━━━━━━━━━━━━━━ 5s 256ms/step - accuracy: 0.4185 - loss: 1.4361 - precision: 0.8667 - recall: 0.1120\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 4/24 ━━━━━━━━━━━━━━━━━━━━ 4s 240ms/step - accuracy: 0.4365 - loss: 1.4591 - precision: 0.8583 - recall: 0.1081\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 5/24 ━━━━━━━━━━━━━━━━━━━━ 4s 233ms/step - accuracy: 0.4433 - loss: 1.4707 - precision: 0.8412 - recall: 0.1115\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 6/24 ━━━━━━━━━━━━━━━━━━━━ 4s 236ms/step - accuracy: 0.4458 - loss: 1.4816 - precision: 0.8274 - recall: 0.1147\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 7/24 ━━━━━━━━━━━━━━━━━━━━ 3s 233ms/step - accuracy: 0.4471 - loss: 1.4875 - precision: 0.8107 - recall: 0.1176\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 8/24 ━━━━━━━━━━━━━━━━━━━━ 3s 230ms/step - accuracy: 0.4462 - loss: 1.4930 - precision: 0.7945 - recall: 0.1201\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 9/24 ━━━━━━━━━━━━━━━━━━━━ 3s 227ms/step - accuracy: 0.4463 - loss: 1.4964 - precision: 0.7840 - recall: 0.1215\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b10/24 ━━━━━━━━━━━━━━━━━━━━ 3s 230ms/step - accuracy: 0.4456 - loss: 1.5014 - precision: 0.7741 - recall: 0.1219\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b11/24 ━━━━━━━━━━━━━━━━━━━━ 3s 231ms/step - accuracy: 0.4439 - loss: 1.5090 - precision: 0.7644 - recall: 0.1219\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b12/24 ━━━━━━━━━━━━━━━━━━━━ 2s 229ms/step - accuracy: 0.4439 - loss: 1.5128 - precision: 0.7579 - recall: 0.1224\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b13/24 ━━━━━━━━━━━━━━━━━━━━ 2s 227ms/step - accuracy: 0.4429 - loss: 1.5166 - precision: 0.7529 - recall: 0.1232\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b14/24 ━━━━━━━━━━━━━━━━━━━━ 2s 229ms/step - accuracy: 0.4423 - loss: 1.5192 - precision: 0.7488 - recall: 0.1240\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b15/24 ━━━━━━━━━━━━━━━━━━━━ 2s 228ms/step - accuracy: 0.4416 - loss: 1.5218 - precision: 0.7445 - recall: 0.1249\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b16/24 ━━━━━━━━━━━━━━━━━━━━ 1s 227ms/step - accuracy: 0.4413 - loss: 1.5235 - precision: 0.7410 - recall: 0.1256\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b17/24 ━━━━━━━━━━━━━━━━━━━━ 1s 226ms/step - accuracy: 0.4408 - loss: 1.5247 - precision: 0.7385 - recall: 0.1263\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b18/24 ━━━━━━━━━━━━━━━━━━━━ 1s 227ms/step - accuracy: 0.4409 - loss: 1.5249 - precision: 0.7358 - recall: 0.1269\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b19/24 ━━━━━━━━━━━━━━━━━━━━ 1s 229ms/step - accuracy: 0.4414 - loss: 1.5249 - precision: 0.7334 - recall: 0.1278\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b20/24 ━━━━━━━━━━━━━━━━━━━━ 0s 229ms/step - accuracy: 0.4418 - loss: 1.5245 - precision: 0.7316 - recall: 0.1290\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b21/24 ━━━━━━━━━━━━━━━━━━━━ 0s 228ms/step - accuracy: 0.4420 - loss: 1.5249 - precision: 0.7297 - recall: 0.1301\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b22/24 ━━━━━━━━━━━━━━━━━━━━ 0s 229ms/step - accuracy: 0.4421 - loss: 1.5252 - precision: 0.7279 - recall: 0.1313\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b23/24 ━━━━━━━━━━━━━━━━━━━━ 0s 227ms/step - accuracy: 0.4420 - loss: 1.5260 - precision: 0.7260 - recall: 0.1325\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b24/24 ━━━━━━━━━━━━━━━━━━━━ 0s 226ms/step - accuracy: 0.4420 - loss: 1.5266 - precision: 0.7239 - recall: 0.1335\n\n\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\n\n\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b24/24 ━━━━━━━━━━━━━━━━━━━━ 6s 268ms/step - accuracy: 0.4420 - loss: 1.5273 - precision: 0.7220 - recall: 0.1345 - val_accuracy: 0.4216 - val_loss: 1.6487 - val_precision: 0.6667 - val_recall: 0.1946\nEpoch 20/20\n 1/24 ━━━━━━━━━━━━━━━━━━━━ 10s 443ms/step - accuracy: 0.5000 - loss: 1.3198 - precision: 0.7273 - recall: 0.2500\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 2/24 ━━━━━━━━━━━━━━━━━━━━ 7s 332ms/step - accuracy: 0.5156 - loss: 1.3002 - precision: 0.7684 - recall: 0.2578 \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 3/24 ━━━━━━━━━━━━━━━━━━━━ 6s 298ms/step - accuracy: 0.5104 - loss: 1.3060 - precision: 0.7766 - recall: 0.2517\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 4/24 ━━━━━━━━━━━━━━━━━━━━ 6s 305ms/step - accuracy: 0.5039 - loss: 1.3223 - precision: 0.7719 - recall: 0.2376\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 5/24 ━━━━━━━━━━━━━━━━━━━━ 5s 294ms/step - accuracy: 0.4994 - loss: 1.3367 - precision: 0.7675 - recall: 0.2314\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 6/24 ━━━━━━━━━━━━━━━━━━━━ 5s 281ms/step - accuracy: 0.4908 - loss: 1.3596 - precision: 0.7618 - recall: 0.2214\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 7/24 ━━━━━━━━━━━━━━━━━━━━ 4s 272ms/step - accuracy: 0.4838 - loss: 1.3746 - precision: 0.7569 - recall: 0.2153\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 8/24 ━━━━━━━━━━━━━━━━━━━━ 4s 264ms/step - accuracy: 0.4795 - loss: 1.3856 - precision: 0.7526 - recall: 0.2114\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 9/24 ━━━━━━━━━━━━━━━━━━━━ 3s 256ms/step - accuracy: 0.4768 - loss: 1.3944 - precision: 0.7502 - recall: 0.2099\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b10/24 ━━━━━━━━━━━━━━━━━━━━ 3s 250ms/step - accuracy: 0.4747 - loss: 1.4038 - precision: 0.7496 - recall: 0.2089\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b11/24 ━━━━━━━━━━━━━━━━━━━━ 3s 246ms/step - accuracy: 0.4747 - loss: 1.4100 - precision: 0.7499 - recall: 0.2095\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b12/24 ━━━━━━━━━━━━━━━━━━━━ 2s 242ms/step - accuracy: 0.4738 - loss: 1.4149 - precision: 0.7486 - recall: 0.2101\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b13/24 ━━━━━━━━━━━━━━━━━━━━ 2s 239ms/step - accuracy: 0.4728 - loss: 1.4192 - precision: 0.7460 - recall: 0.2102\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b14/24 ━━━━━━━━━━━━━━━━━━━━ 2s 236ms/step - accuracy: 0.4720 - loss: 1.4231 - precision: 0.7445 - recall: 0.2098\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b15/24 ━━━━━━━━━━━━━━━━━━━━ 2s 232ms/step - accuracy: 0.4714 - loss: 1.4267 - precision: 0.7432 - recall: 0.2097\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b16/24 ━━━━━━━━━━━━━━━━━━━━ 1s 231ms/step - accuracy: 0.4706 - loss: 1.4304 - precision: 0.7417 - recall: 0.2094\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b17/24 ━━━━━━━━━━━━━━━━━━━━ 1s 228ms/step - accuracy: 0.4700 - loss: 1.4340 - precision: 0.7393 - recall: 0.2088\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b18/24 ━━━━━━━━━━━━━━━━━━━━ 1s 226ms/step - accuracy: 0.4694 - loss: 1.4374 - precision: 0.7369 - recall: 0.2080\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b19/24 ━━━━━━━━━━━━━━━━━━━━ 1s 224ms/step - accuracy: 0.4688 - loss: 1.4407 - precision: 0.7343 - recall: 0.2070\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b20/24 ━━━━━━━━━━━━━━━━━━━━ 0s 223ms/step - accuracy: 0.4680 - loss: 1.4439 - precision: 0.7322 - recall: 0.2061\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b21/24 ━━━━━━━━━━━━━━━━━━━━ 0s 223ms/step - accuracy: 0.4670 - loss: 1.4474 - precision: 0.7305 - recall: 0.2051\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b22/24 ━━━━━━━━━━━━━━━━━━━━ 0s 221ms/step - accuracy: 0.4658 - loss: 1.4510 - precision: 0.7286 - recall: 0.2039\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b24/24 ━━━━━━━━━━━━━━━━━━━━ 0s 213ms/step - accuracy: 0.4640 - loss: 1.4567 - precision: 0.7254 - recall: 0.2017\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b24/24 ━━━━━━━━━━━━━━━━━━━━ 6s 247ms/step - accuracy: 0.4634 - loss: 1.4588 - precision: 0.7241 - recall: 0.2008 - val_accuracy: 0.3568 - val_loss: 1.7337 - val_precision: 0.5094 - val_recall: 0.1459\n\n\n\ndef plot_accuracy_loss(history):\n    \"\"\"\n    Plot the accuracy and the loss during the training of the CNN.\n    \"\"\"\n    fig = plt.figure(figsize=(10,5))\n\n    # Plot accuracy\n    plt.subplot(221)\n    plt.plot(history.history['accuracy'], 'bo--', label = \"acc\")\n    plt.plot(history.history['val_accuracy'], 'ro--', label = \"val_acc\")\n    plt.title(\"train_acc vs val_acc\")\n    plt.ylabel(\"accuracy\")\n    plt.xlabel(\"epochs\")\n    plt.legend()\n\n    # Plot loss function\n    plt.subplot(222)\n    plt.plot(history.history['loss'],'bo--', label = \"loss\")\n    plt.plot(history.history['val_loss'], 'ro--', label = \"val_loss\")\n    plt.title(\"train_loss vs val_loss\")\n    plt.ylabel(\"loss\")\n    plt.xlabel(\"epochs\")\n\n    plt.legend()\n    plt.show()\n\n\nplot_accuracy_loss(history)"
  },
  {
    "objectID": "projects/boat-classifier/index.html#evaluate-the-model",
    "href": "projects/boat-classifier/index.html#evaluate-the-model",
    "title": "Boat Image Classification with CNN and Transfer Learning",
    "section": "Evaluate the Model",
    "text": "Evaluate the Model\n\nbest_model = save_model(model, \"best_model.keras\")\n\n\n# Load the model, including both architecture and weights\nsaved_model = load_model('best_model.keras')\n\nresults = saved_model.evaluate(test_images)\nprint(f\"Test Loss: {results[0]:.4f}\")\nprint(f\"Test Accuracy: {results[1]*100:.2f} %\")\nprint(f\"Test Precision: {results[2]*100:.2f} %\")\n\n1/8 ━━━━━━━━━━━━━━━━━━━━ 3s 553ms/step - accuracy: 0.5000 - loss: 1.4016 - precision: 1.0000 - recall: 0.1875\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b2/8 ━━━━━━━━━━━━━━━━━━━━ 0s 120ms/step - accuracy: 0.4844 - loss: 1.4480 - precision: 0.9118 - recall: 0.2031\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b3/8 ━━━━━━━━━━━━━━━━━━━━ 0s 133ms/step - accuracy: 0.4757 - loss: 1.4687 - precision: 0.8345 - recall: 0.1944\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b4/8 ━━━━━━━━━━━━━━━━━━━━ 0s 136ms/step - accuracy: 0.4720 - loss: 1.4834 - precision: 0.7545 - recall: 0.1810\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b5/8 ━━━━━━━━━━━━━━━━━━━━ 0s 144ms/step - accuracy: 0.4676 - loss: 1.4973 - precision: 0.7102 - recall: 0.1748\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b6/8 ━━━━━━━━━━━━━━━━━━━━ 0s 144ms/step - accuracy: 0.4635 - loss: 1.5156 - precision: 0.6768 - recall: 0.1691\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b7/8 ━━━━━━━━━━━━━━━━━━━━ 0s 151ms/step - accuracy: 0.4604 - loss: 1.5258 - precision: 0.6563 - recall: 0.1653\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b8/8 ━━━━━━━━━━━━━━━━━━━━ 2s 137ms/step - accuracy: 0.4554 - loss: 1.5386 - precision: 0.6287 - recall: 0.1601\nTest Loss: 1.5836\nTest Accuracy: 43.78 %\nTest Precision: 53.23 %"
  },
  {
    "objectID": "projects/boat-classifier/index.html#plot-heatmap-of-the-confusion-matrix-and-print-classification-report",
    "href": "projects/boat-classifier/index.html#plot-heatmap-of-the-confusion-matrix-and-print-classification-report",
    "title": "Boat Image Classification with CNN and Transfer Learning",
    "section": "Plot Heatmap of the Confusion Matrix and Print Classification Report",
    "text": "Plot Heatmap of the Confusion Matrix and Print Classification Report\n\npredictions = np.argmax(model.predict(test_images), axis=1)\n\ncm = confusion_matrix(test_images.labels, predictions)\nreport = classification_report(test_images.labels, predictions, target_names=list(train_images.class_indices.keys()))\n\nplt.figure(figsize=(12, 12))\nsns.heatmap(cm, annot=True, fmt='g', vmin=0, cmap='Greens', cbar=False)\nplt.xticks(ticks=np.arange(9) + 0.5, labels=list(train_images.class_indices.keys()))\nplt.yticks(ticks=np.arange(9) + 0.5, labels=list(train_images.class_indices.keys()))\nplt.xlabel(\"Predicted\")\nplt.ylabel(\"Actual\")\nplt.title(\"Confusion Matrix\")\nplt.show()\nprint(\"\\n\")\nprint(\"Classification Report:\\n----------------------\\n\", report)\n\n1/8 ━━━━━━━━━━━━━━━━━━━━ 1s 236ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b2/8 ━━━━━━━━━━━━━━━━━━━━ 0s 110ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b3/8 ━━━━━━━━━━━━━━━━━━━━ 0s 115ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b4/8 ━━━━━━━━━━━━━━━━━━━━ 0s 115ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b5/8 ━━━━━━━━━━━━━━━━━━━━ 0s 120ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b6/8 ━━━━━━━━━━━━━━━━━━━━ 0s 123ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b7/8 ━━━━━━━━━━━━━━━━━━━━ 0s 122ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b8/8 ━━━━━━━━━━━━━━━━━━━━ 0s 114ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b8/8 ━━━━━━━━━━━━━━━━━━━━ 1s 115ms/step\n\n\n\n\n\n\n\n\n\n\n\nClassification Report:\n----------------------\n                  precision    recall  f1-score   support\n\n           buoy       0.00      0.00      0.00        12\n    cruise_ship       0.36      0.10      0.16        39\n     ferry_boat       0.00      0.00      0.00        12\n   freight_boat       0.00      0.00      0.00         4\n        gondola       0.51      0.78      0.62        45\ninflatable_boat       0.00      0.00      0.00         4\n          kayak       0.43      0.39      0.41        38\n     paper_boat       0.00      0.00      0.00         6\n       sailboat       0.40      0.66      0.50        73\n\n       accuracy                           0.44       233\n      macro avg       0.19      0.21      0.19       233\n   weighted avg       0.36      0.44      0.37       233"
  },
  {
    "objectID": "projects/boat-classifier/index.html#create-a-new-dataset-to-use-with-the-mobilenetv2-pre-trained-model",
    "href": "projects/boat-classifier/index.html#create-a-new-dataset-to-use-with-the-mobilenetv2-pre-trained-model",
    "title": "Boat Image Classification with CNN and Transfer Learning",
    "section": "Create a new dataset to use with the MobileNetV2 pre-trained model",
    "text": "Create a new dataset to use with the MobileNetV2 pre-trained model\n\nmn_train_df, mn_test_df = train_test_split(image_df, train_size=0.7, shuffle=True, random_state=1)"
  },
  {
    "objectID": "projects/boat-classifier/index.html#load-the-image-data-1",
    "href": "projects/boat-classifier/index.html#load-the-image-data-1",
    "title": "Boat Image Classification with CNN and Transfer Learning",
    "section": "Load the Image Data",
    "text": "Load the Image Data\n\nmn_train_generator = ImageDataGenerator(\n    rescale=1. / 255,\n    validation_split=0.2\n    )\n\nmn_test_generator = ImageDataGenerator(rescale=1. / 255)\n\nbatch_size = 32\nimg_width, img_height = (224, 224)\n\n\nmn_train_images = train_generator.flow_from_dataframe(\n    dataframe=mn_train_df,\n    x_col='Filepath',\n    y_col='Label',\n    target_size=(img_width, img_height),\n    color_mode='rgb',\n    class_mode='categorical',\n    batch_size=batch_size,\n    shuffle=True,\n    seed=1,\n    subset='training'\n)\n\nmn_val_images = train_generator.flow_from_dataframe(\n    dataframe=mn_train_df,\n    x_col='Filepath',\n    y_col='Label',\n    target_size=(img_width, img_height),\n    color_mode='rgb',\n    class_mode='categorical',\n    batch_size=batch_size,\n    shuffle=True,\n    seed=1,\n    subset='validation'\n)\n\n\nmn_test_images = test_generator.flow_from_dataframe(\n    dataframe=mn_test_df,\n    x_col='Filepath',\n    y_col='Label',\n    target_size=(img_width, img_height),\n    color_mode='rgb',\n    class_mode='categorical',\n    batch_size=batch_size,\n    shuffle=False\n)\n\nFound 651 validated image filenames belonging to 9 classes.\nFound 162 validated image filenames belonging to 9 classes.\nFound 349 validated image filenames belonging to 9 classes."
  },
  {
    "objectID": "projects/boat-classifier/index.html#build-the-model-1",
    "href": "projects/boat-classifier/index.html#build-the-model-1",
    "title": "Boat Image Classification with CNN and Transfer Learning",
    "section": "Build the Model",
    "text": "Build the Model\n\nchannel = 3\nnum_classes = len(class_names)\n\n# Load MobileNetV2 - Light Model\nmn_v2_light = MobileNetV2(include_top=False, weights='imagenet', input_shape=(img_width, img_height, channel))\n\n# Create a Sequential model\nmn_model = Sequential()\n\n# Add MobileNetV2 as the first layer\nmn_model.add(mn_v2_light)\n\n# Add other layers\nmn_model.add(GlobalAveragePooling2D())\nmn_model.add(Dropout(0.2))\nmn_model.add(Dense(256, activation='relu'))\nmn_model.add(BatchNormalization())\nmn_model.add(Dropout(0.1))\nmn_model.add(Dense(128, activation='relu'))\nmn_model.add(BatchNormalization())\nmn_model.add(Dropout(0.1))\nmn_model.add(Dense(128, activation='relu'))\nmn_model.add(Dense(128, activation='relu'))\nmn_model.add(Dense(num_classes, activation='softmax'))\n\n# Display the summary of the model architecture and the number of parameters\nmn_model.summary()\n\nModel: \"sequential_1\"\n\n\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃ Layer (type)                    ┃ Output Shape           ┃       Param # ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ mobilenetv2_1.00_224            │ (None, 7, 7, 1280)     │     2,257,984 │\n│ (Functional)                    │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ global_average_pooling2d_1      │ (None, 1280)           │             0 │\n│ (GlobalAveragePooling2D)        │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout (Dropout)               │ (None, 1280)           │             0 │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_3 (Dense)                 │ (None, 256)            │       327,936 │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ batch_normalization             │ (None, 256)            │         1,024 │\n│ (BatchNormalization)            │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout_1 (Dropout)             │ (None, 256)            │             0 │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_4 (Dense)                 │ (None, 128)            │        32,896 │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ batch_normalization_1           │ (None, 128)            │           512 │\n│ (BatchNormalization)            │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout_2 (Dropout)             │ (None, 128)            │             0 │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_5 (Dense)                 │ (None, 128)            │        16,512 │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_6 (Dense)                 │ (None, 128)            │        16,512 │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_7 (Dense)                 │ (None, 9)              │         1,161 │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n\n\n\n Total params: 2,654,537 (10.13 MB)\n\n\n\n Trainable params: 2,619,657 (9.99 MB)\n\n\n\n Non-trainable params: 34,880 (136.25 KB)"
  },
  {
    "objectID": "projects/boat-classifier/index.html#compile-the-model-1",
    "href": "projects/boat-classifier/index.html#compile-the-model-1",
    "title": "Boat Image Classification with CNN and Transfer Learning",
    "section": "Compile the Model",
    "text": "Compile the Model\n\nmn_model.compile(\n    optimizer = 'adam',\n    loss = 'categorical_crossentropy',\n    metrics = ['accuracy',\n                Precision(),\n               Recall(),\n    ]\n)"
  },
  {
    "objectID": "projects/boat-classifier/index.html#train-the-model-1",
    "href": "projects/boat-classifier/index.html#train-the-model-1",
    "title": "Boat Image Classification with CNN and Transfer Learning",
    "section": "Train the Model",
    "text": "Train the Model\nTrain the model with 50 epochs and we’ll plot training loss and accuracy against epochs. We want to monitor the validation loss at each epoch and after the validation loss has not improved after two epochs, training is interrupted.\n\n# Define the early stopping callback\nearly_stopping = EarlyStopping(monitor='val_loss',\n                               patience=10,\n                               restore_best_weights=True)\n\n# Define checkpoints\ncheckpoint = ModelCheckpoint('best_mn_model.weights.h5',\n                             save_best_only= True,\n                             save_weights_only=True,\n                             monitor='val_loss',\n                             mode='min',\n                             verbose=1)\n\n\nepochs=50\n\n# Train the model with early stopping and model checkpointing\nhistory = mn_model.fit(\n    mn_train_images,\n    epochs=epochs,\n    validation_data=mn_val_images,\n    callbacks=[early_stopping, checkpoint]\n)\n\nEpoch 1/50\n 1/21 ━━━━━━━━━━━━━━━━━━━━ 7:31 23s/step - accuracy: 0.3125 - loss: 2.1215 - precision_1: 0.2500 - recall_1: 0.0312\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 2/21 ━━━━━━━━━━━━━━━━━━━━ 27s 1s/step - accuracy: 0.2969 - loss: 2.1332 - precision_1: 0.2917 - recall_1: 0.0391  \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 3/21 ━━━━━━━━━━━━━━━━━━━━ 25s 1s/step - accuracy: 0.2882 - loss: 2.1302 - precision_1: 0.3317 - recall_1: 0.0503\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 4/21 ━━━━━━━━━━━━━━━━━━━━ 18s 1s/step - accuracy: 0.2839 - loss: 2.1252 - precision_1: 0.3460 - recall_1: 0.0541\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 5/21 ━━━━━━━━━━━━━━━━━━━━ 18s 1s/step - accuracy: 0.2904 - loss: 2.0994 - precision_1: 0.3768 - recall_1: 0.0591\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 6/21 ━━━━━━━━━━━━━━━━━━━━ 17s 1s/step - accuracy: 0.3005 - loss: 2.0645 - precision_1: 0.4174 - recall_1: 0.0668\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 7/21 ━━━━━━━━━━━━━━━━━━━━ 17s 1s/step - accuracy: 0.3118 - loss: 2.0336 - precision_1: 0.4517 - recall_1: 0.0735\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 8/21 ━━━━━━━━━━━━━━━━━━━━ 16s 1s/step - accuracy: 0.3228 - loss: 2.0034 - precision_1: 0.4827 - recall_1: 0.0792\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 9/21 ━━━━━━━━━━━━━━━━━━━━ 14s 1s/step - accuracy: 0.3348 - loss: 1.9717 - precision_1: 0.5097 - recall_1: 0.0858\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b10/21 ━━━━━━━━━━━━━━━━━━━━ 13s 1s/step - accuracy: 0.3451 - loss: 1.9436 - precision_1: 0.5333 - recall_1: 0.0929\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b11/21 ━━━━━━━━━━━━━━━━━━━━ 12s 1s/step - accuracy: 0.3552 - loss: 1.9172 - precision_1: 0.5542 - recall_1: 0.1012\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b12/21 ━━━━━━━━━━━━━━━━━━━━ 10s 1s/step - accuracy: 0.3649 - loss: 1.8935 - precision_1: 0.5722 - recall_1: 0.1098\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b13/21 ━━━━━━━━━━━━━━━━━━━━ 9s 1s/step - accuracy: 0.3744 - loss: 1.8698 - precision_1: 0.5879 - recall_1: 0.1189 \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b14/21 ━━━━━━━━━━━━━━━━━━━━ 8s 1s/step - accuracy: 0.3831 - loss: 1.8476 - precision_1: 0.6013 - recall_1: 0.1278\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b15/21 ━━━━━━━━━━━━━━━━━━━━ 7s 1s/step - accuracy: 0.3908 - loss: 1.8280 - precision_1: 0.6120 - recall_1: 0.1359\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b16/21 ━━━━━━━━━━━━━━━━━━━━ 6s 1s/step - accuracy: 0.3990 - loss: 1.8072 - precision_1: 0.6233 - recall_1: 0.1449\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b17/21 ━━━━━━━━━━━━━━━━━━━━ 4s 1s/step - accuracy: 0.4068 - loss: 1.7870 - precision_1: 0.6337 - recall_1: 0.1540\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b18/21 ━━━━━━━━━━━━━━━━━━━━ 3s 1s/step - accuracy: 0.4148 - loss: 1.7672 - precision_1: 0.6437 - recall_1: 0.1633\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b19/21 ━━━━━━━━━━━━━━━━━━━━ 2s 1s/step - accuracy: 0.4224 - loss: 1.7482 - precision_1: 0.6526 - recall_1: 0.1726\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b20/21 ━━━━━━━━━━━━━━━━━━━━ 1s 1s/step - accuracy: 0.4292 - loss: 1.7308 - precision_1: 0.6604 - recall_1: 0.1814\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b21/21 ━━━━━━━━━━━━━━━━━━━━ 0s 1s/step - accuracy: 0.4360 - loss: 1.7136 - precision_1: 0.6679 - recall_1: 0.1901\nEpoch 1: val_loss improved from inf to 1.45730, saving model to best_mn_model.weights.h5\n\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b21/21 ━━━━━━━━━━━━━━━━━━━━ 53s 2s/step - accuracy: 0.4422 - loss: 1.6979 - precision_1: 0.6747 - recall_1: 0.1981 - val_accuracy: 0.5617 - val_loss: 1.4573 - val_precision_1: 0.5938 - val_recall_1: 0.4691\nEpoch 2/50\n 1/21 ━━━━━━━━━━━━━━━━━━━━ 28s 1s/step - accuracy: 0.8125 - loss: 0.7959 - precision_1: 0.8519 - recall_1: 0.7188\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 2/21 ━━━━━━━━━━━━━━━━━━━━ 23s 1s/step - accuracy: 0.7891 - loss: 0.8307 - precision_1: 0.8490 - recall_1: 0.7031\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 3/21 ━━━━━━━━━━━━━━━━━━━━ 22s 1s/step - accuracy: 0.7830 - loss: 0.8194 - precision_1: 0.8566 - recall_1: 0.7049\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 4/21 ━━━━━━━━━━━━━━━━━━━━ 20s 1s/step - accuracy: 0.7826 - loss: 0.8044 - precision_1: 0.8600 - recall_1: 0.7122\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 5/21 ━━━━━━━━━━━━━━━━━━━━ 16s 1s/step - accuracy: 0.7800 - loss: 0.8032 - precision_1: 0.8604 - recall_1: 0.7137\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 6/21 ━━━━━━━━━━━━━━━━━━━━ 16s 1s/step - accuracy: 0.7767 - loss: 0.8035 - precision_1: 0.8623 - recall_1: 0.7136\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 7/21 ━━━━━━━━━━━━━━━━━━━━ 15s 1s/step - accuracy: 0.7741 - loss: 0.8024 - precision_1: 0.8631 - recall_1: 0.7137\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 8/21 ━━━━━━━━━━━━━━━━━━━━ 14s 1s/step - accuracy: 0.7710 - loss: 0.8053 - precision_1: 0.8621 - recall_1: 0.7123\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 9/21 ━━━━━━━━━━━━━━━━━━━━ 13s 1s/step - accuracy: 0.7681 - loss: 0.8092 - precision_1: 0.8607 - recall_1: 0.7105\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b10/21 ━━━━━━━━━━━━━━━━━━━━ 12s 1s/step - accuracy: 0.7646 - loss: 0.8141 - precision_1: 0.8600 - recall_1: 0.7080\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b11/21 ━━━━━━━━━━━━━━━━━━━━ 11s 1s/step - accuracy: 0.7607 - loss: 0.8218 - precision_1: 0.8581 - recall_1: 0.7049\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b12/21 ━━━━━━━━━━━━━━━━━━━━ 10s 1s/step - accuracy: 0.7574 - loss: 0.8288 - precision_1: 0.8563 - recall_1: 0.7017\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b13/21 ━━━━━━━━━━━━━━━━━━━━ 9s 1s/step - accuracy: 0.7551 - loss: 0.8332 - precision_1: 0.8553 - recall_1: 0.6992 \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b14/21 ━━━━━━━━━━━━━━━━━━━━ 8s 1s/step - accuracy: 0.7538 - loss: 0.8355 - precision_1: 0.8551 - recall_1: 0.6972\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b15/21 ━━━━━━━━━━━━━━━━━━━━ 6s 1s/step - accuracy: 0.7517 - loss: 0.8412 - precision_1: 0.8547 - recall_1: 0.6940\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b16/21 ━━━━━━━━━━━━━━━━━━━━ 5s 1s/step - accuracy: 0.7500 - loss: 0.8455 - precision_1: 0.8545 - recall_1: 0.6915\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b17/21 ━━━━━━━━━━━━━━━━━━━━ 4s 1s/step - accuracy: 0.7487 - loss: 0.8486 - precision_1: 0.8546 - recall_1: 0.6893\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b18/21 ━━━━━━━━━━━━━━━━━━━━ 3s 1s/step - accuracy: 0.7477 - loss: 0.8511 - precision_1: 0.8550 - recall_1: 0.6873\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b19/21 ━━━━━━━━━━━━━━━━━━━━ 2s 1s/step - accuracy: 0.7470 - loss: 0.8530 - precision_1: 0.8556 - recall_1: 0.6853\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b20/21 ━━━━━━━━━━━━━━━━━━━━ 1s 1s/step - accuracy: 0.7464 - loss: 0.8546 - precision_1: 0.8561 - recall_1: 0.6835\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b21/21 ━━━━━━━━━━━━━━━━━━━━ 0s 1s/step - accuracy: 0.7458 - loss: 0.8569 - precision_1: 0.8564 - recall_1: 0.6817\nEpoch 2: val_loss did not improve from 1.45730\n\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b21/21 ━━━━━━━━━━━━━━━━━━━━ 29s 1s/step - accuracy: 0.7452 - loss: 0.8591 - precision_1: 0.8567 - recall_1: 0.6801 - val_accuracy: 0.6049 - val_loss: 1.5676 - val_precision_1: 0.6338 - val_recall_1: 0.5556\nEpoch 3/50\n 1/21 ━━━━━━━━━━━━━━━━━━━━ 26s 1s/step - accuracy: 0.7500 - loss: 0.8723 - precision_1: 0.9200 - recall_1: 0.7188\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 2/21 ━━━━━━━━━━━━━━━━━━━━ 22s 1s/step - accuracy: 0.7500 - loss: 0.8378 - precision_1: 0.9100 - recall_1: 0.7109\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 3/21 ━━━━━━━━━━━━━━━━━━━━ 21s 1s/step - accuracy: 0.7674 - loss: 0.7779 - precision_1: 0.9175 - recall_1: 0.7135\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 4/21 ━━━━━━━━━━━━━━━━━━━━ 20s 1s/step - accuracy: 0.7767 - loss: 0.7433 - precision_1: 0.9226 - recall_1: 0.7129\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 5/21 ━━━━━━━━━━━━━━━━━━━━ 16s 1s/step - accuracy: 0.7811 - loss: 0.7257 - precision_1: 0.9247 - recall_1: 0.7099\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 6/21 ━━━━━━━━━━━━━━━━━━━━ 15s 1s/step - accuracy: 0.7825 - loss: 0.7165 - precision_1: 0.9231 - recall_1: 0.7076\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 7/21 ━━━━━━━━━━━━━━━━━━━━ 14s 1s/step - accuracy: 0.7847 - loss: 0.7089 - precision_1: 0.9223 - recall_1: 0.7078\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 8/21 ━━━━━━━━━━━━━━━━━━━━ 13s 1s/step - accuracy: 0.7850 - loss: 0.7087 - precision_1: 0.9196 - recall_1: 0.7060\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 9/21 ━━━━━━━━━━━━━━━━━━━━ 13s 1s/step - accuracy: 0.7868 - loss: 0.7058 - precision_1: 0.9187 - recall_1: 0.7054\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b10/21 ━━━━━━━━━━━━━━━━━━━━ 12s 1s/step - accuracy: 0.7891 - loss: 0.7013 - precision_1: 0.9179 - recall_1: 0.7061\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b11/21 ━━━━━━━━━━━━━━━━━━━━ 11s 1s/step - accuracy: 0.7896 - loss: 0.6992 - precision_1: 0.9169 - recall_1: 0.7059\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b12/21 ━━━━━━━━━━━━━━━━━━━━ 9s 1s/step - accuracy: 0.7901 - loss: 0.6967 - precision_1: 0.9161 - recall_1: 0.7061 \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b13/21 ━━━━━━━━━━━━━━━━━━━━ 8s 1s/step - accuracy: 0.7909 - loss: 0.6936 - precision_1: 0.9158 - recall_1: 0.7065\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b14/21 ━━━━━━━━━━━━━━━━━━━━ 7s 1s/step - accuracy: 0.7919 - loss: 0.6898 - precision_1: 0.9161 - recall_1: 0.7075\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b15/21 ━━━━━━━━━━━━━━━━━━━━ 6s 1s/step - accuracy: 0.7925 - loss: 0.6869 - precision_1: 0.9159 - recall_1: 0.7082\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b16/21 ━━━━━━━━━━━━━━━━━━━━ 5s 1s/step - accuracy: 0.7931 - loss: 0.6843 - precision_1: 0.9160 - recall_1: 0.7085\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b17/21 ━━━━━━━━━━━━━━━━━━━━ 4s 1s/step - accuracy: 0.7937 - loss: 0.6814 - precision_1: 0.9159 - recall_1: 0.7088\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b18/21 ━━━━━━━━━━━━━━━━━━━━ 3s 1s/step - accuracy: 0.7936 - loss: 0.6796 - precision_1: 0.9157 - recall_1: 0.7089\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b19/21 ━━━━━━━━━━━━━━━━━━━━ 2s 1s/step - accuracy: 0.7936 - loss: 0.6776 - precision_1: 0.9154 - recall_1: 0.7092\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b20/21 ━━━━━━━━━━━━━━━━━━━━ 1s 1s/step - accuracy: 0.7938 - loss: 0.6758 - precision_1: 0.9151 - recall_1: 0.7095\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b21/21 ━━━━━━━━━━━━━━━━━━━━ 0s 1s/step - accuracy: 0.7939 - loss: 0.6741 - precision_1: 0.9147 - recall_1: 0.7099\nEpoch 3: val_loss did not improve from 1.45730\n\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b21/21 ━━━━━━━━━━━━━━━━━━━━ 26s 1s/step - accuracy: 0.7939 - loss: 0.6725 - precision_1: 0.9144 - recall_1: 0.7102 - val_accuracy: 0.4938 - val_loss: 1.6468 - val_precision_1: 0.5825 - val_recall_1: 0.3704\nEpoch 4/50\n 1/21 ━━━━━━━━━━━━━━━━━━━━ 26s 1s/step - accuracy: 0.8750 - loss: 0.3259 - precision_1: 0.9310 - recall_1: 0.8438\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 2/21 ━━━━━━━━━━━━━━━━━━━━ 1:23 4s/step - accuracy: 0.8750 - loss: 0.3657 - precision_1: 0.9298 - recall_1: 0.8281\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 3/21 ━━━━━━━━━━━━━━━━━━━━ 52s 3s/step - accuracy: 0.8785 - loss: 0.3685 - precision_1: 0.9369 - recall_1: 0.8229 \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 4/21 ━━━━━━━━━━━━━━━━━━━━ 40s 2s/step - accuracy: 0.8717 - loss: 0.3815 - precision_1: 0.9364 - recall_1: 0.8125\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 5/21 ━━━━━━━━━━━━━━━━━━━━ 30s 2s/step - accuracy: 0.8686 - loss: 0.3901 - precision_1: 0.9354 - recall_1: 0.8068\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 6/21 ━━━━━━━━━━━━━━━━━━━━ 26s 2s/step - accuracy: 0.8700 - loss: 0.3895 - precision_1: 0.9360 - recall_1: 0.8069\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 7/21 ━━━━━━━━━━━━━━━━━━━━ 23s 2s/step - accuracy: 0.8696 - loss: 0.3930 - precision_1: 0.9361 - recall_1: 0.8063\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 8/21 ━━━━━━━━━━━━━━━━━━━━ 21s 2s/step - accuracy: 0.8700 - loss: 0.3946 - precision_1: 0.9360 - recall_1: 0.8055\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 9/21 ━━━━━━━━━━━━━━━━━━━━ 18s 2s/step - accuracy: 0.8694 - loss: 0.3977 - precision_1: 0.9348 - recall_1: 0.8038\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b10/21 ━━━━━━━━━━━━━━━━━━━━ 17s 2s/step - accuracy: 0.8691 - loss: 0.3995 - precision_1: 0.9339 - recall_1: 0.8024\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b11/21 ━━━━━━━━━━━━━━━━━━━━ 15s 2s/step - accuracy: 0.8673 - loss: 0.4042 - precision_1: 0.9318 - recall_1: 0.7997\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b12/21 ━━━━━━━━━━━━━━━━━━━━ 13s 2s/step - accuracy: 0.8655 - loss: 0.4092 - precision_1: 0.9296 - recall_1: 0.7969\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b13/21 ━━━━━━━━━━━━━━━━━━━━ 12s 2s/step - accuracy: 0.8639 - loss: 0.4135 - precision_1: 0.9277 - recall_1: 0.7950\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b14/21 ━━━━━━━━━━━━━━━━━━━━ 10s 1s/step - accuracy: 0.8621 - loss: 0.4190 - precision_1: 0.9258 - recall_1: 0.7929\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b15/21 ━━━━━━━━━━━━━━━━━━━━ 8s 1s/step - accuracy: 0.8607 - loss: 0.4233 - precision_1: 0.9243 - recall_1: 0.7915 \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b16/21 ━━━━━━━━━━━━━━━━━━━━ 7s 1s/step - accuracy: 0.8591 - loss: 0.4291 - precision_1: 0.9227 - recall_1: 0.7897\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b17/21 ━━━━━━━━━━━━━━━━━━━━ 5s 1s/step - accuracy: 0.8576 - loss: 0.4345 - precision_1: 0.9212 - recall_1: 0.7882\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b18/21 ━━━━━━━━━━━━━━━━━━━━ 4s 1s/step - accuracy: 0.8562 - loss: 0.4395 - precision_1: 0.9197 - recall_1: 0.7867\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b19/21 ━━━━━━━━━━━━━━━━━━━━ 2s 1s/step - accuracy: 0.8547 - loss: 0.4444 - precision_1: 0.9183 - recall_1: 0.7853\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b20/21 ━━━━━━━━━━━━━━━━━━━━ 1s 1s/step - accuracy: 0.8536 - loss: 0.4485 - precision_1: 0.9173 - recall_1: 0.7842\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b21/21 ━━━━━━━━━━━━━━━━━━━━ 0s 1s/step - accuracy: 0.8527 - loss: 0.4522 - precision_1: 0.9165 - recall_1: 0.7832\nEpoch 4: val_loss did not improve from 1.45730\n\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b21/21 ━━━━━━━━━━━━━━━━━━━━ 31s 1s/step - accuracy: 0.8518 - loss: 0.4556 - precision_1: 0.9157 - recall_1: 0.7823 - val_accuracy: 0.3457 - val_loss: 2.5689 - val_precision_1: 0.3967 - val_recall_1: 0.2963\nEpoch 5/50\n 1/21 ━━━━━━━━━━━━━━━━━━━━ 27s 1s/step - accuracy: 0.8750 - loss: 0.3048 - precision_1: 0.9643 - recall_1: 0.8438\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 2/21 ━━━━━━━━━━━━━━━━━━━━ 23s 1s/step - accuracy: 0.8906 - loss: 0.2974 - precision_1: 0.9731 - recall_1: 0.8438\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 3/21 ━━━━━━━━━━━━━━━━━━━━ 22s 1s/step - accuracy: 0.8958 - loss: 0.2959 - precision_1: 0.9739 - recall_1: 0.8403\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 4/21 ━━━━━━━━━━━━━━━━━━━━ 37s 2s/step - accuracy: 0.9023 - loss: 0.2894 - precision_1: 0.9760 - recall_1: 0.8451\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 5/21 ━━━━━━━━━━━━━━━━━━━━ 31s 2s/step - accuracy: 0.9019 - loss: 0.2987 - precision_1: 0.9750 - recall_1: 0.8435\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 6/21 ━━━━━━━━━━━━━━━━━━━━ 27s 2s/step - accuracy: 0.9000 - loss: 0.3099 - precision_1: 0.9711 - recall_1: 0.8401\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 7/21 ━━━━━━━━━━━━━━━━━━━━ 24s 2s/step - accuracy: 0.8983 - loss: 0.3181 - precision_1: 0.9672 - recall_1: 0.8381\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 8/21 ━━━━━━━━━━━━━━━━━━━━ 22s 2s/step - accuracy: 0.8944 - loss: 0.3263 - precision_1: 0.9634 - recall_1: 0.8349\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 9/21 ━━━━━━━━━━━━━━━━━━━━ 20s 2s/step - accuracy: 0.8911 - loss: 0.3322 - precision_1: 0.9613 - recall_1: 0.8328\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b10/21 ━━━━━━━━━━━━━━━━━━━━ 18s 2s/step - accuracy: 0.8889 - loss: 0.3358 - precision_1: 0.9598 - recall_1: 0.8320\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b11/21 ━━━━━━━━━━━━━━━━━━━━ 16s 2s/step - accuracy: 0.8874 - loss: 0.3387 - precision_1: 0.9587 - recall_1: 0.8313\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b12/21 ━━━━━━━━━━━━━━━━━━━━ 14s 2s/step - accuracy: 0.8866 - loss: 0.3402 - precision_1: 0.9579 - recall_1: 0.8314\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b13/21 ━━━━━━━━━━━━━━━━━━━━ 12s 2s/step - accuracy: 0.8857 - loss: 0.3426 - precision_1: 0.9565 - recall_1: 0.8315\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b14/21 ━━━━━━━━━━━━━━━━━━━━ 11s 2s/step - accuracy: 0.8846 - loss: 0.3467 - precision_1: 0.9548 - recall_1: 0.8314\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b15/21 ━━━━━━━━━━━━━━━━━━━━ 9s 2s/step - accuracy: 0.8839 - loss: 0.3496 - precision_1: 0.9533 - recall_1: 0.8316 \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b16/21 ━━━━━━━━━━━━━━━━━━━━ 7s 2s/step - accuracy: 0.8838 - loss: 0.3513 - precision_1: 0.9523 - recall_1: 0.8324\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b17/21 ━━━━━━━━━━━━━━━━━━━━ 6s 2s/step - accuracy: 0.8837 - loss: 0.3525 - precision_1: 0.9515 - recall_1: 0.8331\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b18/21 ━━━━━━━━━━━━━━━━━━━━ 4s 1s/step - accuracy: 0.8833 - loss: 0.3551 - precision_1: 0.9506 - recall_1: 0.8333\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b19/21 ━━━━━━━━━━━━━━━━━━━━ 2s 1s/step - accuracy: 0.8828 - loss: 0.3576 - precision_1: 0.9496 - recall_1: 0.8334\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b20/21 ━━━━━━━━━━━━━━━━━━━━ 1s 1s/step - accuracy: 0.8824 - loss: 0.3598 - precision_1: 0.9486 - recall_1: 0.8336\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b21/21 ━━━━━━━━━━━━━━━━━━━━ 0s 1s/step - accuracy: 0.8817 - loss: 0.3627 - precision_1: 0.9473 - recall_1: 0.8334\nEpoch 5: val_loss did not improve from 1.45730\n\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b21/21 ━━━━━━━━━━━━━━━━━━━━ 31s 1s/step - accuracy: 0.8811 - loss: 0.3654 - precision_1: 0.9462 - recall_1: 0.8332 - val_accuracy: 0.2284 - val_loss: 3.4780 - val_precision_1: 0.2602 - val_recall_1: 0.1975\nEpoch 6/50\n 1/21 ━━━━━━━━━━━━━━━━━━━━ 30s 2s/step - accuracy: 0.8125 - loss: 0.5277 - precision_1: 0.8276 - recall_1: 0.7500\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 2/21 ━━━━━━━━━━━━━━━━━━━━ 24s 1s/step - accuracy: 0.8516 - loss: 0.4349 - precision_1: 0.8646 - recall_1: 0.8047\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 3/21 ━━━━━━━━━━━━━━━━━━━━ 23s 1s/step - accuracy: 0.8733 - loss: 0.3934 - precision_1: 0.8838 - recall_1: 0.8247\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 4/21 ━━━━━━━━━━━━━━━━━━━━ 22s 1s/step - accuracy: 0.8815 - loss: 0.3744 - precision_1: 0.8940 - recall_1: 0.8333\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 5/21 ━━━━━━━━━━━━━━━━━━━━ 32s 2s/step - accuracy: 0.8902 - loss: 0.3569 - precision_1: 0.9031 - recall_1: 0.8417\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 6/21 ━━━━━━━━━━━━━━━━━━━━ 28s 2s/step - accuracy: 0.8911 - loss: 0.3621 - precision_1: 0.9051 - recall_1: 0.8420\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 7/21 ━━━━━━━━━━━━━━━━━━━━ 25s 2s/step - accuracy: 0.8914 - loss: 0.3660 - precision_1: 0.9069 - recall_1: 0.8423\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 8/21 ━━━━━━━━━━━━━━━━━━━━ 22s 2s/step - accuracy: 0.8923 - loss: 0.3661 - precision_1: 0.9090 - recall_1: 0.8434\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 9/21 ━━━━━━━━━━━━━━━━━━━━ 20s 2s/step - accuracy: 0.8919 - loss: 0.3678 - precision_1: 0.9099 - recall_1: 0.8435\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b10/21 ━━━━━━━━━━━━━━━━━━━━ 18s 2s/step - accuracy: 0.8915 - loss: 0.3683 - precision_1: 0.9104 - recall_1: 0.8435\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b11/21 ━━━━━━━━━━━━━━━━━━━━ 16s 2s/step - accuracy: 0.8913 - loss: 0.3676 - precision_1: 0.9113 - recall_1: 0.8440\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b12/21 ━━━━━━━━━━━━━━━━━━━━ 14s 2s/step - accuracy: 0.8914 - loss: 0.3663 - precision_1: 0.9125 - recall_1: 0.8447\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b13/21 ━━━━━━━━━━━━━━━━━━━━ 12s 2s/step - accuracy: 0.8911 - loss: 0.3660 - precision_1: 0.9134 - recall_1: 0.8446\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b14/21 ━━━━━━━━━━━━━━━━━━━━ 11s 2s/step - accuracy: 0.8912 - loss: 0.3645 - precision_1: 0.9144 - recall_1: 0.8452\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b15/21 ━━━━━━━━━━━━━━━━━━━━ 9s 2s/step - accuracy: 0.8909 - loss: 0.3645 - precision_1: 0.9147 - recall_1: 0.8453 \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b16/21 ━━━━━━━━━━━━━━━━━━━━ 7s 1s/step - accuracy: 0.8907 - loss: 0.3643 - precision_1: 0.9152 - recall_1: 0.8457\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b17/21 ━━━━━━━━━━━━━━━━━━━━ 5s 1s/step - accuracy: 0.8907 - loss: 0.3634 - precision_1: 0.9158 - recall_1: 0.8463\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b18/21 ━━━━━━━━━━━━━━━━━━━━ 4s 1s/step - accuracy: 0.8908 - loss: 0.3627 - precision_1: 0.9164 - recall_1: 0.8470\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b19/21 ━━━━━━━━━━━━━━━━━━━━ 2s 1s/step - accuracy: 0.8910 - loss: 0.3621 - precision_1: 0.9169 - recall_1: 0.8476\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b20/21 ━━━━━━━━━━━━━━━━━━━━ 1s 1s/step - accuracy: 0.8909 - loss: 0.3620 - precision_1: 0.9174 - recall_1: 0.8479\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b21/21 ━━━━━━━━━━━━━━━━━━━━ 0s 1s/step - accuracy: 0.8907 - loss: 0.3623 - precision_1: 0.9178 - recall_1: 0.8479\nEpoch 6: val_loss did not improve from 1.45730\n\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b21/21 ━━━━━━━━━━━━━━━━━━━━ 32s 2s/step - accuracy: 0.8906 - loss: 0.3626 - precision_1: 0.9181 - recall_1: 0.8479 - val_accuracy: 0.1790 - val_loss: 4.7349 - val_precision_1: 0.1970 - val_recall_1: 0.1605\nEpoch 7/50\n 1/21 ━━━━━━━━━━━━━━━━━━━━ 29s 1s/step - accuracy: 0.9375 - loss: 0.2062 - precision_1: 0.9677 - recall_1: 0.9375\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 2/21 ━━━━━━━━━━━━━━━━━━━━ 23s 1s/step - accuracy: 0.9375 - loss: 0.2021 - precision_1: 0.9757 - recall_1: 0.9375\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 3/21 ━━━━━━━━━━━━━━━━━━━━ 22s 1s/step - accuracy: 0.9306 - loss: 0.2501 - precision_1: 0.9690 - recall_1: 0.9236\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 4/21 ━━━━━━━━━━━━━━━━━━━━ 20s 1s/step - accuracy: 0.9225 - loss: 0.2899 - precision_1: 0.9601 - recall_1: 0.9115\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 5/21 ━━━━━━━━━━━━━━━━━━━━ 19s 1s/step - accuracy: 0.9180 - loss: 0.3079 - precision_1: 0.9536 - recall_1: 0.9054\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 6/21 ━━━━━━━━━━━━━━━━━━━━ 26s 2s/step - accuracy: 0.9161 - loss: 0.3154 - precision_1: 0.9511 - recall_1: 0.9012\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 7/21 ━━━━━━━━━━━━━━━━━━━━ 23s 2s/step - accuracy: 0.9134 - loss: 0.3214 - precision_1: 0.9498 - recall_1: 0.8962\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 8/21 ━━━━━━━━━━━━━━━━━━━━ 21s 2s/step - accuracy: 0.9120 - loss: 0.3238 - precision_1: 0.9497 - recall_1: 0.8931\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 9/21 ━━━━━━━━━━━━━━━━━━━━ 18s 2s/step - accuracy: 0.9094 - loss: 0.3332 - precision_1: 0.9481 - recall_1: 0.8895\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b10/21 ━━━━━━━━━━━━━━━━━━━━ 15s 1s/step - accuracy: 0.9071 - loss: 0.3432 - precision_1: 0.9468 - recall_1: 0.8865\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b11/21 ━━━━━━━━━━━━━━━━━━━━ 14s 1s/step - accuracy: 0.9054 - loss: 0.3503 - precision_1: 0.9457 - recall_1: 0.8842\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b12/21 ━━━━━━━━━━━━━━━━━━━━ 12s 1s/step - accuracy: 0.9041 - loss: 0.3547 - precision_1: 0.9449 - recall_1: 0.8824\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b13/21 ━━━━━━━━━━━━━━━━━━━━ 11s 1s/step - accuracy: 0.9027 - loss: 0.3598 - precision_1: 0.9437 - recall_1: 0.8807\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b14/21 ━━━━━━━━━━━━━━━━━━━━ 9s 1s/step - accuracy: 0.9018 - loss: 0.3631 - precision_1: 0.9429 - recall_1: 0.8795 \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b15/21 ━━━━━━━━━━━━━━━━━━━━ 8s 1s/step - accuracy: 0.9005 - loss: 0.3666 - precision_1: 0.9416 - recall_1: 0.8778\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b16/21 ━━━━━━━━━━━━━━━━━━━━ 6s 1s/step - accuracy: 0.8996 - loss: 0.3685 - precision_1: 0.9409 - recall_1: 0.8767\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b17/21 ━━━━━━━━━━━━━━━━━━━━ 5s 1s/step - accuracy: 0.8989 - loss: 0.3698 - precision_1: 0.9403 - recall_1: 0.8757\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b18/21 ━━━━━━━━━━━━━━━━━━━━ 3s 1s/step - accuracy: 0.8985 - loss: 0.3700 - precision_1: 0.9400 - recall_1: 0.8752\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b19/21 ━━━━━━━━━━━━━━━━━━━━ 2s 1s/step - accuracy: 0.8979 - loss: 0.3710 - precision_1: 0.9396 - recall_1: 0.8744\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b20/21 ━━━━━━━━━━━━━━━━━━━━ 1s 1s/step - accuracy: 0.8974 - loss: 0.3720 - precision_1: 0.9391 - recall_1: 0.8738\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b21/21 ━━━━━━━━━━━━━━━━━━━━ 0s 1s/step - accuracy: 0.8968 - loss: 0.3731 - precision_1: 0.9386 - recall_1: 0.8730\nEpoch 7: val_loss did not improve from 1.45730\n\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b21/21 ━━━━━━━━━━━━━━━━━━━━ 29s 1s/step - accuracy: 0.8964 - loss: 0.3741 - precision_1: 0.9381 - recall_1: 0.8724 - val_accuracy: 0.3333 - val_loss: 4.7201 - val_precision_1: 0.3312 - val_recall_1: 0.3148\nEpoch 8/50\n 1/21 ━━━━━━━━━━━━━━━━━━━━ 10s 511ms/step - accuracy: 1.0000 - loss: 0.1541 - precision_1: 1.0000 - recall_1: 0.9091\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 2/21 ━━━━━━━━━━━━━━━━━━━━ 23s 1s/step - accuracy: 0.9535 - loss: 0.2159 - precision_1: 0.9625 - recall_1: 0.8848   \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 3/21 ━━━━━━━━━━━━━━━━━━━━ 22s 1s/step - accuracy: 0.9423 - loss: 0.2339 - precision_1: 0.9519 - recall_1: 0.8876\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 4/21 ━━━━━━━━━━━━━━━━━━━━ 20s 1s/step - accuracy: 0.9310 - loss: 0.2577 - precision_1: 0.9464 - recall_1: 0.8830\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 5/21 ━━━━━━━━━━━━━━━━━━━━ 19s 1s/step - accuracy: 0.9247 - loss: 0.2681 - precision_1: 0.9418 - recall_1: 0.8805\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 6/21 ━━━━━━━━━━━━━━━━━━━━ 18s 1s/step - accuracy: 0.9197 - loss: 0.2740 - precision_1: 0.9400 - recall_1: 0.8780\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 7/21 ━━━━━━━━━━━━━━━━━━━━ 17s 1s/step - accuracy: 0.9150 - loss: 0.2816 - precision_1: 0.9379 - recall_1: 0.8743\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 8/21 ━━━━━━━━━━━━━━━━━━━━ 15s 1s/step - accuracy: 0.9112 - loss: 0.2879 - precision_1: 0.9364 - recall_1: 0.8719\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 9/21 ━━━━━━━━━━━━━━━━━━━━ 14s 1s/step - accuracy: 0.9078 - loss: 0.2954 - precision_1: 0.9345 - recall_1: 0.8695\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b10/21 ━━━━━━━━━━━━━━━━━━━━ 17s 2s/step - accuracy: 0.9046 - loss: 0.3040 - precision_1: 0.9324 - recall_1: 0.8669\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b11/21 ━━━━━━━━━━━━━━━━━━━━ 15s 2s/step - accuracy: 0.9020 - loss: 0.3119 - precision_1: 0.9302 - recall_1: 0.8647\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b12/21 ━━━━━━━━━━━━━━━━━━━━ 13s 2s/step - accuracy: 0.9003 - loss: 0.3174 - precision_1: 0.9287 - recall_1: 0.8636\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b13/21 ━━━━━━━━━━━━━━━━━━━━ 12s 2s/step - accuracy: 0.8990 - loss: 0.3224 - precision_1: 0.9273 - recall_1: 0.8630\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b14/21 ━━━━━━━━━━━━━━━━━━━━ 10s 1s/step - accuracy: 0.8974 - loss: 0.3274 - precision_1: 0.9260 - recall_1: 0.8619\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b15/21 ━━━━━━━━━━━━━━━━━━━━ 8s 1s/step - accuracy: 0.8964 - loss: 0.3305 - precision_1: 0.9252 - recall_1: 0.8613 \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b16/21 ━━━━━━━━━━━━━━━━━━━━ 7s 1s/step - accuracy: 0.8957 - loss: 0.3323 - precision_1: 0.9247 - recall_1: 0.8611\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b17/21 ━━━━━━━━━━━━━━━━━━━━ 5s 1s/step - accuracy: 0.8949 - loss: 0.3358 - precision_1: 0.9242 - recall_1: 0.8605\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b18/21 ━━━━━━━━━━━━━━━━━━━━ 4s 1s/step - accuracy: 0.8943 - loss: 0.3388 - precision_1: 0.9239 - recall_1: 0.8600\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b19/21 ━━━━━━━━━━━━━━━━━━━━ 2s 1s/step - accuracy: 0.8936 - loss: 0.3415 - precision_1: 0.9234 - recall_1: 0.8594\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b20/21 ━━━━━━━━━━━━━━━━━━━━ 1s 1s/step - accuracy: 0.8928 - loss: 0.3443 - precision_1: 0.9229 - recall_1: 0.8588\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b21/21 ━━━━━━━━━━━━━━━━━━━━ 0s 1s/step - accuracy: 0.8922 - loss: 0.3465 - precision_1: 0.9225 - recall_1: 0.8583\nEpoch 8: val_loss did not improve from 1.45730\n\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b21/21 ━━━━━━━━━━━━━━━━━━━━ 31s 2s/step - accuracy: 0.8916 - loss: 0.3484 - precision_1: 0.9222 - recall_1: 0.8579 - val_accuracy: 0.1296 - val_loss: 11.7399 - val_precision_1: 0.1296 - val_recall_1: 0.1296\nEpoch 9/50\n 1/21 ━━━━━━━━━━━━━━━━━━━━ 33s 2s/step - accuracy: 0.9688 - loss: 0.1850 - precision_1: 0.9688 - recall_1: 0.9688\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 2/21 ━━━━━━━━━━━━━━━━━━━━ 27s 1s/step - accuracy: 0.9531 - loss: 0.2107 - precision_1: 0.9682 - recall_1: 0.9531\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 3/21 ━━━━━━━━━━━━━━━━━━━━ 26s 1s/step - accuracy: 0.9479 - loss: 0.2246 - precision_1: 0.9643 - recall_1: 0.9410\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 4/21 ━━━━━━━━━━━━━━━━━━━━ 25s 2s/step - accuracy: 0.9434 - loss: 0.2334 - precision_1: 0.9609 - recall_1: 0.9303\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 5/21 ━━━━━━━━━━━━━━━━━━━━ 24s 2s/step - accuracy: 0.9409 - loss: 0.2370 - precision_1: 0.9594 - recall_1: 0.9243\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 6/21 ━━━━━━━━━━━━━━━━━━━━ 22s 2s/step - accuracy: 0.9343 - loss: 0.2514 - precision_1: 0.9534 - recall_1: 0.9161\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 7/21 ━━━━━━━━━━━━━━━━━━━━ 21s 2s/step - accuracy: 0.9309 - loss: 0.2586 - precision_1: 0.9500 - recall_1: 0.9115\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 8/21 ━━━━━━━━━━━━━━━━━━━━ 19s 2s/step - accuracy: 0.9283 - loss: 0.2622 - precision_1: 0.9480 - recall_1: 0.9084\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 9/21 ━━━━━━━━━━━━━━━━━━━━ 22s 2s/step - accuracy: 0.9266 - loss: 0.2630 - precision_1: 0.9473 - recall_1: 0.9066\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b10/21 ━━━━━━━━━━━━━━━━━━━━ 20s 2s/step - accuracy: 0.9255 - loss: 0.2627 - precision_1: 0.9466 - recall_1: 0.9056\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b11/21 ━━━━━━━━━━━━━━━━━━━━ 18s 2s/step - accuracy: 0.9251 - loss: 0.2614 - precision_1: 0.9464 - recall_1: 0.9054\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b12/21 ━━━━━━━━━━━━━━━━━━━━ 16s 2s/step - accuracy: 0.9239 - loss: 0.2614 - precision_1: 0.9456 - recall_1: 0.9044\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b13/21 ━━━━━━━━━━━━━━━━━━━━ 13s 2s/step - accuracy: 0.9226 - loss: 0.2635 - precision_1: 0.9445 - recall_1: 0.9032\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b14/21 ━━━━━━━━━━━━━━━━━━━━ 11s 2s/step - accuracy: 0.9208 - loss: 0.2677 - precision_1: 0.9428 - recall_1: 0.9014\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b15/21 ━━━━━━━━━━━━━━━━━━━━ 9s 2s/step - accuracy: 0.9188 - loss: 0.2723 - precision_1: 0.9411 - recall_1: 0.8993 \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b16/21 ━━━━━━━━━━━━━━━━━━━━ 8s 2s/step - accuracy: 0.9169 - loss: 0.2769 - precision_1: 0.9397 - recall_1: 0.8972\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b17/21 ━━━━━━━━━━━━━━━━━━━━ 6s 2s/step - accuracy: 0.9151 - loss: 0.2820 - precision_1: 0.9383 - recall_1: 0.8951\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b18/21 ━━━━━━━━━━━━━━━━━━━━ 4s 2s/step - accuracy: 0.9137 - loss: 0.2862 - precision_1: 0.9373 - recall_1: 0.8931\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b19/21 ━━━━━━━━━━━━━━━━━━━━ 3s 2s/step - accuracy: 0.9126 - loss: 0.2895 - precision_1: 0.9365 - recall_1: 0.8916\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b20/21 ━━━━━━━━━━━━━━━━━━━━ 1s 2s/step - accuracy: 0.9117 - loss: 0.2923 - precision_1: 0.9360 - recall_1: 0.8903\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b21/21 ━━━━━━━━━━━━━━━━━━━━ 0s 2s/step - accuracy: 0.9110 - loss: 0.2944 - precision_1: 0.9357 - recall_1: 0.8893\nEpoch 9: val_loss did not improve from 1.45730\n\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b21/21 ━━━━━━━━━━━━━━━━━━━━ 34s 2s/step - accuracy: 0.9104 - loss: 0.2964 - precision_1: 0.9354 - recall_1: 0.8884 - val_accuracy: 0.3642 - val_loss: 4.3274 - val_precision_1: 0.3694 - val_recall_1: 0.3580\nEpoch 10/50\n 1/21 ━━━━━━━━━━━━━━━━━━━━ 26s 1s/step - accuracy: 0.9375 - loss: 0.2248 - precision_1: 0.9667 - recall_1: 0.9062\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 2/21 ━━━━━━━━━━━━━━━━━━━━ 24s 1s/step - accuracy: 0.9531 - loss: 0.1942 - precision_1: 0.9751 - recall_1: 0.9219\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 3/21 ━━━━━━━━━━━━━━━━━━━━ 25s 1s/step - accuracy: 0.9583 - loss: 0.1790 - precision_1: 0.9762 - recall_1: 0.9271\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 4/21 ━━━━━━━━━━━━━━━━━━━━ 24s 1s/step - accuracy: 0.9551 - loss: 0.1807 - precision_1: 0.9738 - recall_1: 0.9219\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 5/21 ━━━━━━━━━━━━━━━━━━━━ 22s 1s/step - accuracy: 0.9491 - loss: 0.1966 - precision_1: 0.9672 - recall_1: 0.9162\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 6/21 ━━━━━━━━━━━━━━━━━━━━ 21s 1s/step - accuracy: 0.9437 - loss: 0.2131 - precision_1: 0.9608 - recall_1: 0.9111\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 7/21 ━━━━━━━━━━━━━━━━━━━━ 19s 1s/step - accuracy: 0.9396 - loss: 0.2254 - precision_1: 0.9557 - recall_1: 0.9066\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 8/21 ━━━━━━━━━━━━━━━━━━━━ 18s 1s/step - accuracy: 0.9369 - loss: 0.2340 - precision_1: 0.9525 - recall_1: 0.9036\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 9/21 ━━━━━━━━━━━━━━━━━━━━ 21s 2s/step - accuracy: 0.9346 - loss: 0.2415 - precision_1: 0.9497 - recall_1: 0.9012\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b10/21 ━━━━━━━━━━━━━━━━━━━━ 18s 2s/step - accuracy: 0.9331 - loss: 0.2467 - precision_1: 0.9478 - recall_1: 0.8998\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b11/21 ━━━━━━━━━━━━━━━━━━━━ 16s 2s/step - accuracy: 0.9319 - loss: 0.2502 - precision_1: 0.9466 - recall_1: 0.8986\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b12/21 ━━━━━━━━━━━━━━━━━━━━ 14s 2s/step - accuracy: 0.9306 - loss: 0.2535 - precision_1: 0.9455 - recall_1: 0.8975\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b13/21 ━━━━━━━━━━━━━━━━━━━━ 12s 2s/step - accuracy: 0.9295 - loss: 0.2565 - precision_1: 0.9446 - recall_1: 0.8965\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b14/21 ━━━━━━━━━━━━━━━━━━━━ 11s 2s/step - accuracy: 0.9283 - loss: 0.2602 - precision_1: 0.9435 - recall_1: 0.8955\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b15/21 ━━━━━━━━━━━━━━━━━━━━ 9s 2s/step - accuracy: 0.9275 - loss: 0.2629 - precision_1: 0.9428 - recall_1: 0.8948 \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b16/21 ━━━━━━━━━━━━━━━━━━━━ 7s 2s/step - accuracy: 0.9269 - loss: 0.2647 - precision_1: 0.9422 - recall_1: 0.8944\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b17/21 ━━━━━━━━━━━━━━━━━━━━ 6s 2s/step - accuracy: 0.9266 - loss: 0.2660 - precision_1: 0.9419 - recall_1: 0.8941\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b18/21 ━━━━━━━━━━━━━━━━━━━━ 4s 2s/step - accuracy: 0.9262 - loss: 0.2669 - precision_1: 0.9417 - recall_1: 0.8938\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b19/21 ━━━━━━━━━━━━━━━━━━━━ 2s 1s/step - accuracy: 0.9260 - loss: 0.2677 - precision_1: 0.9415 - recall_1: 0.8937\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b20/21 ━━━━━━━━━━━━━━━━━━━━ 1s 1s/step - accuracy: 0.9257 - loss: 0.2683 - precision_1: 0.9413 - recall_1: 0.8936\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b21/21 ━━━━━━━━━━━━━━━━━━━━ 0s 1s/step - accuracy: 0.9252 - loss: 0.2692 - precision_1: 0.9409 - recall_1: 0.8932\nEpoch 10: val_loss did not improve from 1.45730\n\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b21/21 ━━━━━━━━━━━━━━━━━━━━ 31s 1s/step - accuracy: 0.9248 - loss: 0.2700 - precision_1: 0.9406 - recall_1: 0.8929 - val_accuracy: 0.4444 - val_loss: 4.8501 - val_precision_1: 0.4472 - val_recall_1: 0.4444\nEpoch 11/50\n 1/21 ━━━━━━━━━━━━━━━━━━━━ 25s 1s/step - accuracy: 0.9688 - loss: 0.0983 - precision_1: 0.9688 - recall_1: 0.9688\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 2/21 ━━━━━━━━━━━━━━━━━━━━ 21s 1s/step - accuracy: 0.9688 - loss: 0.0990 - precision_1: 0.9764 - recall_1: 0.9688\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 3/21 ━━━━━━━━━━━━━━━━━━━━ 21s 1s/step - accuracy: 0.9618 - loss: 0.1312 - precision_1: 0.9703 - recall_1: 0.9618\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 4/21 ━━━━━━━━━━━━━━━━━━━━ 19s 1s/step - accuracy: 0.9557 - loss: 0.1568 - precision_1: 0.9638 - recall_1: 0.9538\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 5/21 ━━━━━━━━━━━━━━━━━━━━ 18s 1s/step - accuracy: 0.9533 - loss: 0.1695 - precision_1: 0.9609 - recall_1: 0.9505\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 6/21 ━━━━━━━━━━━━━━━━━━━━ 17s 1s/step - accuracy: 0.9516 - loss: 0.1760 - precision_1: 0.9603 - recall_1: 0.9484\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 7/21 ━━━━━━━━━━━━━━━━━━━━ 16s 1s/step - accuracy: 0.9508 - loss: 0.1787 - precision_1: 0.9602 - recall_1: 0.9474\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 8/21 ━━━━━━━━━━━━━━━━━━━━ 15s 1s/step - accuracy: 0.9497 - loss: 0.1808 - precision_1: 0.9601 - recall_1: 0.9452\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 9/21 ━━━━━━━━━━━━━━━━━━━━ 13s 1s/step - accuracy: 0.9468 - loss: 0.1940 - precision_1: 0.9577 - recall_1: 0.9405\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b10/21 ━━━━━━━━━━━━━━━━━━━━ 11s 1s/step - accuracy: 0.9444 - loss: 0.2042 - precision_1: 0.9560 - recall_1: 0.9368\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b11/21 ━━━━━━━━━━━━━━━━━━━━ 10s 1s/step - accuracy: 0.9431 - loss: 0.2106 - precision_1: 0.9552 - recall_1: 0.9345\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b12/21 ━━━━━━━━━━━━━━━━━━━━ 12s 1s/step - accuracy: 0.9419 - loss: 0.2158 - precision_1: 0.9544 - recall_1: 0.9326\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b13/21 ━━━━━━━━━━━━━━━━━━━━ 10s 1s/step - accuracy: 0.9407 - loss: 0.2208 - precision_1: 0.9535 - recall_1: 0.9308\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b14/21 ━━━━━━━━━━━━━━━━━━━━ 9s 1s/step - accuracy: 0.9394 - loss: 0.2258 - precision_1: 0.9523 - recall_1: 0.9291 \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b15/21 ━━━━━━━━━━━━━━━━━━━━ 7s 1s/step - accuracy: 0.9382 - loss: 0.2304 - precision_1: 0.9511 - recall_1: 0.9274\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b16/21 ━━━━━━━━━━━━━━━━━━━━ 6s 1s/step - accuracy: 0.9366 - loss: 0.2355 - precision_1: 0.9497 - recall_1: 0.9253\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b17/21 ━━━━━━━━━━━━━━━━━━━━ 5s 1s/step - accuracy: 0.9353 - loss: 0.2396 - precision_1: 0.9484 - recall_1: 0.9236\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b18/21 ━━━━━━━━━━━━━━━━━━━━ 3s 1s/step - accuracy: 0.9342 - loss: 0.2430 - precision_1: 0.9475 - recall_1: 0.9223\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b19/21 ━━━━━━━━━━━━━━━━━━━━ 2s 1s/step - accuracy: 0.9332 - loss: 0.2461 - precision_1: 0.9465 - recall_1: 0.9211\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b20/21 ━━━━━━━━━━━━━━━━━━━━ 1s 1s/step - accuracy: 0.9322 - loss: 0.2488 - precision_1: 0.9456 - recall_1: 0.9200\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b21/21 ━━━━━━━━━━━━━━━━━━━━ 0s 1s/step - accuracy: 0.9312 - loss: 0.2518 - precision_1: 0.9447 - recall_1: 0.9189\nEpoch 11: val_loss did not improve from 1.45730\n\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b21/21 ━━━━━━━━━━━━━━━━━━━━ 28s 1s/step - accuracy: 0.9303 - loss: 0.2546 - precision_1: 0.9438 - recall_1: 0.9179 - val_accuracy: 0.3148 - val_loss: 4.6065 - val_precision_1: 0.3056 - val_recall_1: 0.2716\n\n\n\ndef plot_accuracy_loss(history):\n    \"\"\"\n    Plot the accuracy and the loss during the training of the CNN.\n    \"\"\"\n    fig = plt.figure(figsize=(10,5))\n\n    # Plot accuracy\n    plt.subplot(221)\n    plt.plot(history.history['accuracy'], 'bo--', label = \"acc\")\n    plt.plot(history.history['val_accuracy'], 'ro--', label = \"val_acc\")\n    plt.title(\"train_acc vs val_acc\")\n    plt.ylabel(\"accuracy\")\n    plt.xlabel(\"epochs\")\n    plt.legend()\n\n    # Plot loss function\n    plt.subplot(222)\n    plt.plot(history.history['loss'],'bo--', label = \"loss\")\n    plt.plot(history.history['val_loss'], 'ro--', label = \"val_loss\")\n    plt.title(\"train_loss vs val_loss\")\n    plt.ylabel(\"loss\")\n    plt.xlabel(\"epochs\")\n\n    plt.legend()\n    plt.show()\n\n\nplot_accuracy_loss(history)"
  },
  {
    "objectID": "projects/boat-classifier/index.html#evaluate-the-model-1",
    "href": "projects/boat-classifier/index.html#evaluate-the-model-1",
    "title": "Boat Image Classification with CNN and Transfer Learning",
    "section": "Evaluate the Model",
    "text": "Evaluate the Model\n\nbest_model = save_model(mn_model, \"best_mn_model.weights.h5\")\n\nWARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n\n\n\n# Load the model, including both architecture and weights\nsaved_model = load_model('best_mn_model.weights.h5')\n\nresults = saved_model.evaluate(mn_test_images)\nprint(f\"Test Loss: {results[0]:.4f}\")\nprint(f\"Test Accuracy: {results[1]*100:.2f} %\")\nprint(f\"Test Precision: {results[2]*100:.2f} %\")\n\nWARNING:absl:Compiled the loaded model, but the compiled metrics have yet to be built. `model.compile_metrics` will be empty until you train or evaluate the model.\n\n\n 1/11 ━━━━━━━━━━━━━━━━━━━━ 18s 2s/step - accuracy: 0.4375 - loss: 1.7898 - precision_1: 0.4483 - recall_1: 0.4062\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 2/11 ━━━━━━━━━━━━━━━━━━━━ 2s 231ms/step - accuracy: 0.4609 - loss: 1.6893 - precision_1: 0.4927 - recall_1: 0.4297\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 3/11 ━━━━━━━━━━━━━━━━━━━━ 1s 245ms/step - accuracy: 0.4670 - loss: 1.6439 - precision_1: 0.5118 - recall_1: 0.4392\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 4/11 ━━━━━━━━━━━━━━━━━━━━ 1s 240ms/step - accuracy: 0.4694 - loss: 1.6255 - precision_1: 0.5193 - recall_1: 0.4427\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 5/11 ━━━━━━━━━━━━━━━━━━━━ 1s 241ms/step - accuracy: 0.4680 - loss: 1.6287 - precision_1: 0.5200 - recall_1: 0.4404\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 6/11 ━━━━━━━━━━━━━━━━━━━━ 1s 240ms/step - accuracy: 0.4664 - loss: 1.6397 - precision_1: 0.5194 - recall_1: 0.4365\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 7/11 ━━━━━━━━━━━━━━━━━━━━ 0s 239ms/step - accuracy: 0.4642 - loss: 1.6485 - precision_1: 0.5182 - recall_1: 0.4328\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 8/11 ━━━━━━━━━━━━━━━━━━━━ 0s 238ms/step - accuracy: 0.4604 - loss: 1.6587 - precision_1: 0.5147 - recall_1: 0.4280\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 9/11 ━━━━━━━━━━━━━━━━━━━━ 0s 238ms/step - accuracy: 0.4578 - loss: 1.6656 - precision_1: 0.5121 - recall_1: 0.4244\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b10/11 ━━━━━━━━━━━━━━━━━━━━ 0s 240ms/step - accuracy: 0.4561 - loss: 1.6709 - precision_1: 0.5107 - recall_1: 0.4220\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b11/11 ━━━━━━━━━━━━━━━━━━━━ 0s 238ms/step - accuracy: 0.4553 - loss: 1.6747 - precision_1: 0.5094 - recall_1: 0.4190\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b11/11 ━━━━━━━━━━━━━━━━━━━━ 4s 239ms/step - accuracy: 0.4546 - loss: 1.6778 - precision_1: 0.5083 - recall_1: 0.4166\nTest Loss: 1.7124\nTest Accuracy: 44.70 %\nTest Precision: 49.64 %"
  },
  {
    "objectID": "projects/ansible-kops/index.html",
    "href": "projects/ansible-kops/index.html",
    "title": "Optimizing a Flask API microservice with Kubernetes",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "projects/ansible-kops/index.html#project-description",
    "href": "projects/ansible-kops/index.html#project-description",
    "title": "Optimizing a Flask API microservice with Kubernetes",
    "section": "Project Description:",
    "text": "Project Description:\nThis project is based on the scenario where users add money to their wallet accounts via an app, but faces an issue in its payment success rate. The timeout that occurs with the connectivity of the database has been the reason for the issue.\nWhile troubleshooting, it is found that the database server has several downtime instances at irregular intervals. This situation compels the company to create its own infrastructure that runs in high-availability mode.\nGiven that online shopping experiences continue to evolve as per customer expectations, we’ll need to build infrastructe that can make the app more reliable, fast, and secure for improving the performance of the current system implementation."
  },
  {
    "objectID": "projects/ansible-kops/index.html#create-ansible-host-virtual-machine",
    "href": "projects/ansible-kops/index.html#create-ansible-host-virtual-machine",
    "title": "Optimizing a Flask API microservice with Kubernetes",
    "section": "Create Ansible host Virtual Machine",
    "text": "Create Ansible host Virtual Machine\nWe will create our development environment inside a local virtual machine. The logical design is easy to follow if you prefer using a public cloud such as AWS, Azure, GCP, or Digital Ocean. The vagrantfile seen below uses an Ubuntu 20.04 base image provided by the Bento project. We’ll create a single VM on the local device (i.e., laptop) in VirtualBox via Vagrant. You can set the network as either “private” or “public” if the ports are forwarded when testing Docker images locally.\n# -*- mode: ruby -*-\n# vi: set ft=ruby :\n\n# All Vagrant configuration is done below. The \"2\" in Vagrant.configure\n# configures the configuration version (we support older styles for\n# backwards compatibility). Please don't change it unless you know what\n# you're doing.\nVagrant.configure(\"2\") do |config|\n  # The most common configuration options are documented and commented below.\n  # For a complete reference, please see the online documentation at\n  # https://docs.vagrantup.com.\n\n  # Every Vagrant development environment requires a box. You can search for\n  # boxes at https://vagrantcloud.com/search.\n  config.vm.box = \"bento/ubuntu-20.04\"\n  config.vm.hostname = \"ansible-controller\"\n  config.vm.network \"public_network\", ip: \"192.168.1.100\"\n  config.vm.network \"forwarded_port\", guest: 80, host: 8080, auto_correct: true\n  config.vm.provider \"virtualbox\" do |vb|\n  vb.customize ['modifyvm', :id, '--cableconnected1', 'on']\n  end"
  },
  {
    "objectID": "projects/ansible-kops/index.html#install-the-pre-requisites-from-the-ansible-kops-repository",
    "href": "projects/ansible-kops/index.html#install-the-pre-requisites-from-the-ansible-kops-repository",
    "title": "Optimizing a Flask API microservice with Kubernetes",
    "section": "Install the pre-requisites from the Ansible-KOPS repository",
    "text": "Install the pre-requisites from the Ansible-KOPS repository\nThe purpose of this repository is to provide a Kubernetes cluster in a Public Cloud. The deployment of the cluster is fully automated and managed by multiple tools such as Ansible or Kops. It follows the Best Practices of Docker, Kubernetes, AWS, and Ansible as much as possible.\n\nRequired Tools\n\n\nkOps - kOps is an official Kubernetes project for managing production-grade Kubernetes clusters to Amazon Web Services.\nkubectl - kubectl is a command-line tool for controlling Kubernetes clusters.\nAnsible - Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy.\nDocker - Docker is a set of platform as a service (PaaS) products that use OS-level virtualization to deliver software in packages called containers.\nHelm - Helm is a tool for managing Charts. Charts are packages of pre-configured Kubernetes resources.\n\n\n\nPrerequisites\n\n\nAn AWS account\nAWS CLI v2\nAnsible\nBoto3 library\nDocker\nDocker Compose\nA registered domain\nCertbot\n\n\n\nKubernetes add-ons\n\n\nKube2IAM - kube2iam provides different AWS IAM roles for pods running on Kubernetes\nExternal-DNS - Configure external DNS servers (AWS Route53, Google CloudDNS, and others) for Kubernetes Ingresses and Services.\nIngress NGINX - Ingress-nginx is an Ingress controller for Kubernetes using NGINX as a reverse proxy and load balancer.\nCert-manager - Automatically provision and manage TLS certificates in Kubernetes.\n\n$ vagrant up && vagrant ssh\nOnce inside the virtual machine, clone down the ansible-kops repo and set up the environment with the install_prereqs.sh.\n$ git clone https://github.com/ctg123/ansible-kops.git\n$ cd ansible-kops\n$ chmod +x install_prereqs.sh\n$ ./install_prereqs.sh\nYou may need to reboot the machine for all the commands to appear. Once finished, check the following commands to verify that AWS CLI, Docker, and Ansible are correctly installed.\n$ aws --version\n\naws-cli/2.2.29 Python/3.8.8 Linux/5.4.0-58-generic exe/x86_64.ubuntu.20 prompt/off\n\n$ docker version\n\nClient: Docker Engine - Community\n Version:           20.10.8\n API version:       1.41\n Go version:        go1.16.6\n Git commit:        3967b7d\n Built:             Fri Jul 30 19:54:27 2021\n OS/Arch:           linux/amd64\n Context:           default\n Experimental:      true\n\nServer: Docker Engine - Community\n Engine:\n  Version:          20.10.8\n  API version:      1.41 (minimum version 1.12)\n  Go version:       go1.16.6\n  Git commit:       75249d8\n  Built:            Fri Jul 30 19:52:33 2021\n  OS/Arch:          linux/amd64\n  Experimental:     false\n containerd:\n  Version:          1.4.9\n  GitCommit:        e25210fe30a0a703442421b0f60afac609f950a3\n runc:\n  Version:          1.0.1\n  GitCommit:        v1.0.1-0-g4144b63\n docker-init:\n  Version:          0.19.0\n  GitCommit:        de40ad0\n\n$ docker-compose version\n\ndocker-compose version 1.27.4, build 40524192\ndocker-py version: 4.3.1\nCPython version: 3.7.7\nOpenSSL version: OpenSSL 1.1.0l  10 Sep 2019\n\n$ ansible --version\n\nansible [core 2.11.3] \n  config file = None\n  configured module search path = ['/home/vagrant/.ansible/plugins/modules', '/usr/share/ansible/plugins/modules']\n  ansible python module location = /home/vagrant/.local/lib/python3.8/site-packages/ansible\n  ansible collection location = /home/vagrant/.ansible/collections:/usr/share/ansible/collections\n  executable location = /home/vagrant/.local/bin/ansible\n  python version = 3.8.10 (default, Jun  2 2021, 10:49:15) [GCC 9.4.0]\n  jinja version = 3.0.1\n  libyaml = True"
  },
  {
    "objectID": "projects/ansible-kops/index.html#environment-setup",
    "href": "projects/ansible-kops/index.html#environment-setup",
    "title": "Optimizing a Flask API microservice with Kubernetes",
    "section": "Environment Setup",
    "text": "Environment Setup\nThe ansible packages for Kops & Kubectl are compatible with Linux-AMD64 and Darwin-AMD64 architectures. The following diagram is a visual representation of the infrastructure we will deploy to AWS.\n\n\n\naws-kops-ansible\n\n\n\nAWS account\nFor the Kubernetes to be fully operational, you need to create an IAM user for your AWS account with the following permissions:\n\nAmazonEC2FullAccess\nAmazonRouteS3FullAccess\nAmazonS3FullAccess\nIAMFullAccess\n\nOnce you have all the permissions, run the following command. Enter your AWS user credentials and select the region you will use in your environment.\n$ aws configure\n\n# Optionally you can specify the AWS Profile\n$ aws configure --profile &lt;profile_name&gt;\n\n# You will be prompted for your access keys\nAWS Access Key ID [None]: AKIA************\nAWS Secret Access Key [None]: kCcT****************\nDefault region name [None]: us-east-1\nDefault output format [None]: json\n\n\nRegister your Domain\n\nYou must own a registered domain to complete the Kubernetes cluster deployment by using either method(s) seen below\n\nNew Domain: Register a new domain using AWS Route53.\nExisting Domain: Create a subdomain without migrating the parent domain.\n\nCreate a hosted zone for your subdomain(example.mydomain.com.)\nTake note of your NS record.\nLog into your domain registrar account.\nCreate the corresponding NS record to let your domain know that your subdomain is hosted on AWS.\n\n\nDOMAIN                   TTL       TYPE                     TARGET\nexample.mydomain.com.      0         NS      ns-xxxx.awsdns-xx.org\nexample.mydomain.com.      0         NS      ns-yyy.awsdns-yy.org\n...\n\n\nCertbot\n\nWe’ll use the Route53 DNS plugin for Certbot. This plugin automates completing a DNS-01 challenge (DNS01) by creating and subsequently removing TXT records using the Amazon Web Services Route 53 API. My example is for my registered domain. To initiate a DNS challenge, please execute the following command:\n$ python3 -m pip install certbot-dns-route53 --user\n\n$ certbot certonly --dns-route53 -d ctgkube.com \\\n--config-dir ~/.config/letsencrypt \\\n--logs-dir /tmp/letsencrypt \\\n--work-dir /tmp/letsencrypt \\\n--dns-route53-propagation-seconds 30\n\n\nEnvironment variables\n\nYou will find all of the environment variables in the group_vars directory.\n\ngroup_vars/all.yml contains the global environment variables.\n\n#####################\n# ~~ Domain name ~~ #\ncluster_name: ctgkube.com\n\n##########################\n# ~~ Kops state store ~~ #\nbucket_name: ctgadget-kops-store\n\n###############################################\n# ~~ SSH public key to access Kubernetes API ~~#\n# Enter the full path with the name of the SSH public key created by the generate-ssh-key.yml file.\nssh_pub_key: ~/.ssh/ctgkube.pub\n\n########################################\n# ~~ AWS environment for kubernetes ~~ #\n\n# Match with your AWS profile in case of multi-account environment\naws_profile: default\naws_region: us-east-1\n\n# Be careful, master_zones must match maser_node_count\n# Example: can't have 1 master in 2 AWS availability zones\nmaster_zones: us-east-1a\naws_zones: us-east-1a,us-east-1b,us-east-1c\n\n# EC2 host sizing\n# (Ubuntu 20.04 LTS)\nbase_image: ami-019212a8baeffb0fa\n\n# Kubernetes master nodes\nmaster_instance_type: t3.medium\nmaster_node_count: 1\n\n# Kubernetes worker nodes\nworker_instance_type: t3.medium\nworker_node_count: 3\n\n############################################\n# ~~ Let's encrypt domain's email owner ~~ #\nemail_owner: chaance.graves@ctginnovations.io\n\n\nGenerate the SSH Keys and deploy the cluster\n\nWhen the environment and the pre-requisites configures, run the following playbooks with Ansible. The generate-ssh-key.yml will create the SSH key pair to access Kubernetes API, which you can use to log in to the master node with. Once generated, make sure the path matches the variable specified in the group_vars directory. You’re now ready to run the deploy-cluster.yml playbook!\n$ ansible-playbook generate-ssh-key.yml\n$ ansible-playbook deploy-cluster.yml --ask-become-pass\nIt should take approximately 8 - 10 minutes to complete.\n\n\n\nInstall Kubernetes Dashboard\nA critical feature for any Kubernetes cluster is efficient monitoring of all resources with an accessible UI. The Kubernetes dashboard enables the ability to deploy containerized applications, troubleshoot pods, and manage other cluster resources such as scaling a deployment, initiating rolling updates, resetting pods instead of using the kubectl command.\nRun the deploy_dashboard.sh to pull from the latest version of the Kubernetes dashboard stored in the official Github repo. You can check at this link to see which version is the latest release and update the script accordingly.\nOnce complete, the default service type configures as a ClusterIP. We will change this to LoadBalancer to access it externally. You can find the service type and edit it with the following command:\n$ kubectl -n kubernetes-dashboard edit svc kubernetes-dashboard\nMake sure the service type changed to LoadBalancer successfully. You should get an AWS ELB address as an output.\n$ kubectl -n kubernetes-dashboard get svc\nNAME                        TYPE           CLUSTER-IP      EXTERNAL-IP                                                               PORT(S)         AGE\ndashboard-metrics-scraper   ClusterIP      100.67.72.147   &lt;none&gt;                                                                    8000/TCP        5h20m\nkubernetes-dashboard        LoadBalancer   100.69.145.80   a6c1db00d3d9d42659150be7771c2ba5-1256148891.us-east-1.elb.amazonaws.com   443:31463/TCP   5h20m\nAn output of the script produced a security token needed to log in. Copy the token and enter it in the dashboard. You will then sign into the Kubernetes dashboard. You can retrieve the token when needed with this command:\n$ kubectl get secret $(kubectl get serviceaccount dashboard -o jsonpath=\"{.secrets[0].name}\") -o jsonpath=\"{.data.token}\" | base64 --decode\n\n\n\nKubernetes Dashboard Login\n\n\n\n\n\nExample Kubernetes Dashboard UI"
  },
  {
    "objectID": "projects/ansible-kops/index.html#deploy-flask-api-mongodb-app-on-kubernetes",
    "href": "projects/ansible-kops/index.html#deploy-flask-api-mongodb-app-on-kubernetes",
    "title": "Optimizing a Flask API microservice with Kubernetes",
    "section": "Deploy Flask API + MongoDB app on Kubernetes",
    "text": "Deploy Flask API + MongoDB app on Kubernetes\nWe will develop a simple Python Flask API application, which will communicate to a MongoDB database, containerize it using Docker, and deploy it to the Kubernetes cluster.\n\nPrerequisites for development on a local machine\nInstall the following python libraries using pip located in the requirements.txt file in the payment-app directory. You will have Flask running locally on your machine prior to deploying the Docker image to Kubernetes.\n$ cd ansible-kops/payment-app\n$ python3 -m pip install -r requirements.txt --user\n$ pip list\n\n\nCreating the Flask Payment application\n\nWe’ll produce a simple RESTful API to create, read, update, and delete (CRUD) payment entries. The app will store the data in a MongoDB database, an open-source database that stores flexible JSON-like documents that is Non-relational (often called NoSQL databases).\nBy default, when a MongoDB Server instance starts on a machine, it listens to port 27017. The Flask-PyMongo module helps us to bridge Flask and MongoDB and provides some convenience helpers. An objectId module is a tool for working with MongoDB ObjectId, the default value of _id field of each document, generated during the creation of any document.\nThe app.py which can run on any host (python app.py), can be accessed at http://localhost:5000/.\nfrom flask import Flask, request, jsonify\nfrom flask_pymongo import PyMongo\nfrom bson.objectid import ObjectId\nfrom flask_cors import CORS\nimport socket\n\n# Configuration\nDEBUG = True\n\n# Instantiate the app\napp = Flask(__name__)\napp.config[\"MONGO_URI\"] = \"mongodb://mongo:27017/dev\"\napp.config['JSONIFY_PRETTYPRINT_REGULAR'] = True\nmongo = PyMongo(app)\ndb = mongo.db\n\n# enable CORS\nCORS(app, resources={r'/*': {'origins': '*'}})\n\n# UI message to show which pods the Payment API container is running\n@app.route(\"/\")\ndef index():\n    hostname = socket.gethostname()\n    return jsonify(\n        message=\"Welcome to the EasyPay app. I am running inside the {} pod!\".format(hostname)\n    )\n\n@app.route(\"/payments\")\ndef get_all_payments():\n    payments = db.payment.find()\n    data = []\n    for payment in payments:\n        item = {\n            \"id\": str(payment[\"_id\"]),\n            \"payment\": payment[\"payment\"]\n        }\n        data.append(item)\n    return jsonify(\n        data=data\n    )\n\n# POST Method to collect a user's payment\n@app.route(\"/payments\", methods=[\"POST\"])\ndef add_payment():\n    data = request.get_json(force=True)\n    db.payment.insert_one({\"payment\": data[\"payment\"]})\n    return jsonify(\n        message=\"Payment saved successfully to your account!\"\n    )\n\n# PUT Method to update a user's payment\n@app.route(\"/payments/&lt;id&gt;\", methods=[\"PUT\"])\ndef update_payment(id):\n    data = request.get_json(force=True)[\"payment\"]\n    response = db.payment.update_one({\"_id\": ObjectId(id)}, {\"$set\": {\"payment\": data}})\n    if response.matched_count:\n        message = \"Payment updated successfully!\"\n    else:\n        message = \"No Payments were found!\"\n    return jsonify(\n        message=message\n    )\n\n# DELETE Method to delete a user's payment\n@app.route(\"/payments/&lt;id&gt;\", methods=[\"DELETE\"])\ndef delete_payment(id):\n    response = db.payment.delete_one({\"_id\": ObjectId(id)})\n    if response.deleted_count:\n        message = \"Payment deleted successfully!\"\n    else:\n        message = \"No Payments were found!\"\n    return jsonify(\n        message=message\n    )\n\n# POST Method to delet all payment data\n@app.route(\"/payments/delete\", methods=[\"POST\"])\ndef delete_all_payments():\n    db.payment.remove()\n    return jsonify(\n        message=\"All Payments deleted!\"\n    )\n\n# The app server will be able to run locally at port 5000\nif __name__ == \"__main__\":\n    app.run(host=\"0.0.0.0\", port=5000)\nWe first import all the required modules and create instances of the Flask class (the app) and the PyMongo class (the database). Note that the hostname in the MONGO_URI Flask configuration variable defines the mongo instead of localhost. Mongo will be the name of our database container, and containers in the same Docker network can talk to each other by their names.\nOur app consists of six functions which are assigned URLs by @app.route() Python decorator. At first glance, it is easy to understand that the decorator is telling our app to execute the underlying function whenever a user visits our @app domain at the given route().\n\nindex() - displays a welcome message for the app. It Also displays the hostname of the machine where our app is running. This is useful to understand that we will be hitting a random pod each time we try to access our app on Kubernetes.\nget_all_payments() - displays all the payments that are available in the database as a list of dictionaries.\nadd_payment() - adds a new payment that is stored in the database with a unique ID.\nupdate_payment(id) - modifies any existing payment entry. If no payment data is found with the queried ID, the appropriate message is returned.\ndelete_payment(id) - removes that entry of the task having the queried ID from the database. Returns appropriate message if no task with the specified ID is found.\ndelete_all_payments() - removes all the payment data and returns an empty list.\n\nIn the final section, where we run the app, we define the host parameter as ‘0.0.0.0’ to make the server publicly available, running on the machine’s IP address, which will be inside a unique container.\n\n\nContainerizing the application\n\nOnce you have Docker installed locally, we will store our images to Docker Hub. Use the docker login command to authorize Docker to connect to your Docker Hub account.\nLet’s build a Docker image of the app to push to the Docker Hub registry. In the directory payment-app, a Dockerfile with the following contents to create the image:\n######################################\n# ~~ DOCKERFILE for Flask API app ~~ #\n######################################\n\nFROM python:alpine3.9\nCOPY . /app\nWORKDIR /app\nRUN pip install -r requirements.txt\nENV PORT 5000\nEXPOSE 5000\nENTRYPOINT [ \"python\" ]\nCMD [ \"app.py\" ]\nWe are using the official Python3.9 image, based on the Alpine Linux project, as the base image and copying our working directory’s contents to a new directory on the image. We are instructing the image to expose the port 5000 when run as a container, on which we can access our app. Finally, our app container configures to run python app.py automatically when deployed to a pod.\nHere, we build our image with the tag &lt;username&gt;/&lt;image-name&gt;:&lt;version&gt; format using the below command:\n$ docker build -t ctgraves16/paymentapp-python:1.0.0 .\nand then push it to the Docker Hub registry. It will be publicly available where anyone in the world can download and run it:\n$ docker push ctgraves16/paymentapp-python:1.0.0\n\n👉🏾 NOTE: Ensure to replace “ctgraves16” with your Docker Hub username.\n\nNow that we containerized the app, what about the database? How can we containerize that? We don’t have to worry about it as we can easily use the official mongo Docker image and run it on the same network as the app container.\nRun the below commands to test the image locally where it can be accessible at http://localhost:5000/\n$ docker network create payment-app-net\n$ docker run --name=mongo --rm -d --network=payment-app-net mongo\n$ docker run --name=paymentapp-python --rm -p 5000:5000 -d --network=payment-app-net ctgraves16/paymentapp-python:1.0.0\n\n\n\nPayment App on Localhost\n\n\n\n\nDeploy the application and MongoDB database to Kubernetes\n\nWe can check on how the nodes are set up by running kubectl get nodes.\n~/ansible-kops$ kubectl get nodes\nNAME                             STATUS   ROLES                  AGE   VERSION\nip-172-20-125-204.ec2.internal   Ready    node                   17h   v1.21.3\nip-172-20-42-157.ec2.internal    Ready    control-plane,master   17h   v1.21.3\nip-172-20-50-137.ec2.internal    Ready    node                   17h   v1.21.3\nip-172-20-81-89.ec2.internal     Ready    node                   17h   v1.21.3\nThe deploy.sh script automates all the steps for setting up the deployments and services. The deployment of the resources are in the following order:\n\nmongo-pv.yml Persistent Volume:\n\nThe mongo-pv.yml file creates a storage volume of 256 MB to be made available to the mongo container. The contents of this volume persist, even if the MongoDB pod is deleted or moved to a different node.\napiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: mongo-pv\n  labels:\n    type: local\nspec:\n  capacity:\n    storage: 256Mi\n  storageClassName: default\n  accessModes:\n    - ReadWriteOnce\n  hostPath:\n    path: /tmp/db\nWe’ll use a local path /tmp/db on the host as the disk path for simplicity.\n\n👉🏾 NOTE: Both PVC and PV must have the same class, otherwise, a PVC will not find a PV, and STATUS of such a PVC will be Pending.\n\n$ kubectl get storageclass -o wide\nNAME                      PROVISIONER             RECLAIMPOLICY   VOLUMEBINDINGMODE      ALLOWVOLUMEEXPANSION   AGE\ndefault                   kubernetes.io/aws-ebs   Delete          Immediate              false                  17h\ngp2                       kubernetes.io/aws-ebs   Delete          Immediate              false                  17h\nkops-ssd-1-17 (default)   kubernetes.io/aws-ebs   Delete          WaitForFirstConsumer   true                   17h\n\nmongo-pvc Persistent Volume Claim:\n\nThe mongo-pvc.yml file claims the storage create above and mounts onto the mongo container. Kops creates a default StorageClass set where our PVC will reside.\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: mongo-pvc\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 256Mi\nThe Persistent Volume Claim will show that the volume status is now changed to Bound when the scripts are complete.\n$ kubectl get pv && kubectl get pvc\nNAME                                       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM               STORAGECLASS    REASON   AGE\nmongo-pv                                   256Mi      RWO            Retain           Available                       default                  17h\npvc-ee7ae28d-a7ad-478e-ba5f-038aa830b1b2   1Gi        RWO            Delete           Bound       default/mongo-pvc   kops-ssd-1-17            17h\nNAME        STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS    AGE\nmongo-pvc   Bound    pvc-ee7ae28d-a7ad-478e-ba5f-038aa830b1b2   1Gi        RWO            kops-ssd-1-17   17h\n\nmongo Deployment:\n\nThe mongo-deployment.yml file is where we define the mongo deployment that creates a single instance of a MongoDB database. Here, we’ll expose the native port 27017, which other pods can access. The persistent volume will then proceed to mount onto a directory inside the container.\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: mongo\nspec:\n  selector:\n    matchLabels:\n      app: mongo\n  template:\n    metadata:\n      labels:\n        app: mongo\n    spec:\n      containers:\n        - name: mongo\n          image: mongo\n          ports:\n            - containerPort: 27017\n          volumeMounts:\n            - name: storage\n              mountPath: /data/db\n      volumes:\n        - name: storage\n          persistentVolumeClaim:\n            claimName: mongo-pvc\n\nmongo Service:\n\nThis service, defined by mongo-svc.yml, is set as a ClusterIP (default type of Service in Kubernetes). This service makes the mongo pod accessible from within the cluster but not from outside. The only resource that should have access to the MongoDB database is the payment app.\napiVersion: v1\nkind: Service\nmetadata:\n  name: mongo\nspec:\n  selector:\n    app: mongo\n  ports:\n    - port: 27017\n\npayment-app Deployment:\n\nThe payment-app-deployment.yml file defines the deployment of our app running in a pod on any worker node. The spec section defines the pod where we specify the image to be pulled and run. Port 5000 of the pod is exposed.\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: payment-app\n  labels:\n    app: payment-app\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: payment-app\n  template:\n    metadata:\n      labels:\n        app: payment-app\n    spec:\n      containers:\n        - name: payment-app\n          image: ctgraves16/paymentapp-python:1.0.0\n          ports:\n            - containerPort: 5000\n          imagePullPolicy: Always\n\npayment-app Load Balancer Service:\n\nThe LoadBalancer Service enables the pods in a deployment to be accessible from outside the cluster. Here, since we are using a custom Kubernetes cluster, we will be accessing the app from the master node at &lt;service-ip&gt;:&lt;service-port&gt;. The payment-app-svc.yml file defines this service. The advantage of using a Service is that it gives us a single consistent IP to access our app as many pods may come and go in our deployment.\napiVersion: v1\nkind: Service\nmetadata:\n  name: payment-app-svc\nspec:\n  selector:\n    app: payment-app\n  ports:\n    - port: 8080\n      targetPort: 5000\n  type: LoadBalancer\nHere, port 8080 of the service payment-app-svc is bound to port 5000 of the pods attached.\n$ kubectl get svc payment-app-svc\nNAME              TYPE           CLUSTER-IP      EXTERNAL-IP                                                               PORT(S)          AGE\npayment-app-svc   LoadBalancer   100.66.62.244   ac0a73109d80b449d8b2094246ab3e18-1598075260.us-east-1.elb.amazonaws.com   8080:30164/TCP   17h\nWe are now able to access the payment app at the ELB address:\nvagrant@ansible-controller:~/ansible-kops/kubernetes$ curl http://ac0a73109d80b449d8b2094246ab3e18-1598075260.us-east-1.elb.amazonaws.com:8080\n{\n  \"message\": \"Welcome to the EasyPay app. I am running inside the payment-app-99695c66b-dv776 pod!\"\n}\nvagrant@ansible-controller:~/ansible-kops/kubernetes$ curl http://ac0a73109d80b449d8b2094246ab3e18-1598075260.us-east-1.elb.amazonaws.com:8080\n{\n  \"message\": \"Welcome to the EasyPay app. I am running inside the payment-app-99695c66b-2bk98 pod!\"\n}\nvagrant@ansible-controller:~/ansible-kops/kubernetes$ curl http://ac0a73109d80b449d8b2094246ab3e18-1598075260.us-east-1.elb.amazonaws.com:8080\n{\n  \"message\": \"Welcome to the EasyPay app. I am running inside the payment-app-99695c66b-dv776 pod!\"\n}\nvagrant@ansible-controller:~/ansible-kops/kubernetes$ curl http://ac0a73109d80b449d8b2094246ab3e18-1598075260.us-east-1.elb.amazonaws.com:8080\n{\n  \"message\": \"Welcome to the EasyPay app. I am running inside the payment-app-99695c66b-2bk98 pod!\"\n}\nvagrant@ansible-controller:~/ansible-kops/kubernetes$ curl http://ac0a73109d80b449d8b2094246ab3e18-1598075260.us-east-1.elb.amazonaws.com:8080\n{\n  \"message\": \"Welcome to the EasyPay app. I am running inside the payment-app-99695c66b-dv776 pod!\"\n}\nvagrant@ansible-controller:~/ansible-kops/kubernetes$ curl http://ac0a73109d80b449d8b2094246ab3e18-1598075260.us-east-1.elb.amazonaws.com:8080\n{\n  \"message\": \"Welcome to the EasyPay app. I am running inside the payment-app-99695c66b-6n4kg pod!\"\n}\nWe can see that the LoadBalancer sends the traffic to any random pod each time we try to access our app.\n\npayment-app Ingress\n\nThe Ingress service allows external interfaces with the payment app using a single load balancer provided by the NGINX Ingress Controller created when Ansible deployed the Helm chart onto the cluster. We will create a domain name at easypay.ctgkube.com.\n\n\n\nPayment App Ingress\n\n\n---\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: payment-app-ingress\n  annotations:\nspec:\n  rules:\n  - host: easypay.ctgkube.com\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: payment-app-svc\n            port:\n              number: 8080\n\n👉🏾 NOTE: The Ingress resource defines rules that redirect anything for easypay.ctgkube.com to payment-app-svc. Any request that doesn’t match the rule returns a 404 “Not Found” error message.\n\nIf we describe the Ingress, you’ll receive a message similar to the following:\n$ kubectl describe ingress\nName:             payment-app-ingress\nNamespace:        default\nAddress:          ab58e1ce3541e475f8365c9ddfcd4496-883895960.us-east-1.elb.amazonaws.com\nDefault backend:  default-http-backend:80 (&lt;error: endpoints \"default-http-backend\" not found&gt;)\nRules:\n  Host                 Path  Backends\n  ----                 ----  --------\n  easypay.ctgkube.com  \n                       /   payment-app-svc:8080 (100.117.243.5:5000,100.125.236.198:5000,100.125.236.199:5000)\nAnnotations:           &lt;none&gt;\nEvents:                &lt;none&gt;\nYou can test the NGINX Ingress Controller using the DNS URL of the ELB load balancer:\n$ curl -I http://ab58e1ce3xxxxxxx-8xxxx960.us-east-1.elb.amazonaws.com/\nHTTP/1.1 404 Not Found\nDate: Sat, 21 Aug 2021 21:11:28 GMT\nContent-Type: text/html\nContent-Length: 146\nConnection: keep-alive\nThe default server returns a “Not Found” page with a 404 status code for all the requests for domains where no Ingress rules are defined. Based on the prescribed rules, the Ingress Controller doesn’t divert traffic to the specified backend service unless the request matches the configuration. Because the host field configures for the Ingress object, you must supply the Host header of the request with the same hostname.\n$ curl -I -H \"Host: easypay.ctgkube.com\" http://ab58e1ce3541e475f8365c9ddfcd4496-883895960.us-east-1.elb.amazonaws.com/\nHTTP/1.1 200 OK\nDate: Sat, 21 Aug 2021 21:17:46 GMT\nContent-Type: application/json\nContent-Length: 104\nConnection: keep-alive\nAccess-Control-Allow-Origin: *\n\npayment-app Horizontal Pod Autoscaler\n\nOne of the design requirements is to enable the cluster to scale up whenever the CPU utilization exceeds 50%. An HPA resource is at the pod level, and it scales the pods in a deployment or replica set. It implements as a Kubernetes API resource and a controller. The controller manager queries the resource utilization against the metrics specified in each HorizontalPodAutoscaler definition. It obtains the metrics from either the resource metrics API (for per-pod resource metrics) or the custom metrics API (for all other metrics).\napiVersion: autoscaling/v1\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: payment-app-hpa\nspec:\n  maxReplicas: 10\n  minReplicas: 3\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: payment-app\n  targetCPUUtilizationPercentage: 50\nNow that the complete application setup is ready, we can interact with the Flask app at easypay.ctgkube.com.\n\n\n\npayment-app-kubernetes\n\n\nWe can try all the API methods specified in the app to interact with the data from the command line.\n$ curl http://easypay.ctgkube.com\n{\n  \"message\": \"Welcome to the EasyPay app. I am running inside the payment-app-99695c66b-dv776 pod!\"\n}\n\n$ curl http://easypay.ctgkube.com/payments\n{\n  \"data\": [ \n    {\n      \"id\": \"61207498207b153038b3b0b3\", \n      \"payment\": \"00.00\"\n    }, \n    {\n      \"id\": \"612074b5207b153038b3b0b4\", \n      \"payment\": \"500.00\"\n    }, \n    {\n      \"id\": \"612074df879dd6b7458ac593\", \n      \"payment\": \"99.99\"\n    }, \n    {\n      \"id\": \"61207582879dd6b7458ac594\", \n      \"payment\": \"199.99\"\n    }\n  ]\n}\n\n$ curl -X POST -d \"{\\\"payment\\\": \\\"19.99\\\"}\" http://easypay.ctgkube.com/payments\n{\n  \"message\": \"Payment saved successfully to your account!\"\n}\n\n$ curl -X DELETE easypay.ctgkube.com/payments/61217595207b153038b3b0b6\n{\n  \"message\": \"Payment deleted successfully!\"\n}\n\n$ curl easypay.ctgkube.com/payments\n{\n  \"data\": [\n    {\n      \"id\": \"61206c7864a10df0ec229aca\", \n      \"payment\": \"29.99\"\n    }, \n    {\n      \"id\": \"61206c8764a10df0ec229acb\", \n      \"payment\": \"2000.00\"\n    }, \n    {\n      \"id\": \"612074b5207b153038b3b0b4\", \n      \"payment\": \"500.00\"\n    }, \n    {\n      \"id\": \"61207573207b153038b3b0b5\", \n      \"payment\": \"99.99\"\n    }, \n    {\n      \"id\": \"61207582879dd6b7458ac594\", \n      \"payment\": \"199.99\"\n    }\n  ]\n}\n\n$ curl -X POST easypay.ctgkube.com/payments/delete\n{\n  \"message\": \"All Payments deleted!\"\n}\n\n$ curl easypay.ctgkube.com/payments\n{\n  \"data\": []\n}\n\n\n\neasypay.ctgkube.com-payments\n\n\n\n\n\ndefault-deployments-kubernetes-dashboard\n\n\n\n\nInstalling the Metrics server\n\nWithin the ansible-kops repository, we have the metrics server resource files stored in the kubernetes/metrics-server folder. Run the kubectl apply -f. to deploy all the resources at the same time.\n~ ansible-kops/kubernetes/metrics-server\n\n$ ls -l\ntotal 32\n-rw-rw-r-- 1 vagrant vagrant  410 Aug 19 14:44 aggregated-metrics-reader.yaml\n-rw-rw-r-- 1 vagrant vagrant  316 Aug 19 14:44 auth-delegator.yaml\n-rw-rw-r-- 1 vagrant vagrant  338 Aug 19 14:44 auth-reader.yaml\n-rw-rw-r-- 1 vagrant vagrant  307 Aug 19 14:44 metrics-apiservice.yaml\n-rw-rw-r-- 1 vagrant vagrant 1002 Aug 19 14:44 metrics-server-deployment.yaml\n-rw-rw-r-- 1 vagrant vagrant  307 Aug 19 14:44 metrics-server-service.yaml\n-rw-rw-r-- 1 vagrant vagrant  563 Aug 19 14:44 resource-reader.yaml\n-rwxrwxr-x 1 vagrant vagrant  695 Aug 19 14:44 rm-metrics-server.sh\n\n$ kubectl apply -f.\nclusterrole.rbac.authorization.k8s.io/system:aggregated-metrics-reader created\nclusterrolebinding.rbac.authorization.k8s.io/metrics-server:system:auth-delegator created\nrolebinding.rbac.authorization.k8s.io/metrics-server-auth-reader created\nWarning: apiregistration.k8s.io/v1beta1 APIService is deprecated in v1.19+, unavailable in v1.22+; use apiregistration.k8s.io/v1 APIService\napiservice.apiregistration.k8s.io/v1beta1.metrics.k8s.io created\nserviceaccount/metrics-server created\ndeployment.apps/metrics-server created\nservice/metrics-server created\nclusterrole.rbac.authorization.k8s.io/system:metrics-server created\nclusterrolebinding.rbac.authorization.k8s.io/system:metrics-server created\n\n$ kubectl get pods -n kube-system\nNAME                                                      READY   STATUS    RESTARTS   AGE\ncalico-kube-controllers-78d6f96c7b-c4pjk                  1/1     Running   0          20h\ncalico-node-4bjcm                                         1/1     Running   0          20h\ncalico-node-74m42                                         1/1     Running   0          20h\ncalico-node-gnrh2                                         1/1     Running   0          20h\ncalico-node-sbfzl                                         1/1     Running   0          20h\ncoredns-autoscaler-6f594f4c58-k8xpx                       1/1     Running   0          20h\ncoredns-f45c4bf76-m6d9g                                   1/1     Running   0          20h\ncoredns-f45c4bf76-tk77l                                   1/1     Running   0          20h\ndns-controller-64f8b56bdc-k82kx                           1/1     Running   0          20h\netcd-manager-events-ip-172-20-42-157.ec2.internal         1/1     Running   0          20h\netcd-manager-main-ip-172-20-42-157.ec2.internal           1/1     Running   0          20h\nkops-controller-8kp2r                                     1/1     Running   0          20h\nkube-apiserver-ip-172-20-42-157.ec2.internal              2/2     Running   1          20h\nkube-controller-manager-ip-172-20-42-157.ec2.internal     1/1     Running   0          20h\nkube-proxy-ip-172-20-125-204.ec2.internal                 1/1     Running   0          20h\nkube-proxy-ip-172-20-42-157.ec2.internal                  1/1     Running   0          20h\nkube-proxy-ip-172-20-50-137.ec2.internal                  1/1     Running   0          20h\nkube-proxy-ip-172-20-81-89.ec2.internal                   1/1     Running   0          20h\nkube-scheduler-ip-172-20-42-157.ec2.internal              1/1     Running   0          20h\nkube2iam-9tfsx                                            1/1     Running   0          20h\nkube2iam-m8ls4                                            1/1     Running   0          20h\nkube2iam-xnp8z                                            1/1     Running   0          20h\nmetrics-server-6fcb6cbf6f-mrsgl                           1/1     Running   0          19h\nnginx-ingress-ingress-nginx-controller-84bf68bdd7-shkj4   1/1     Running   0          20h\n\n$ kubectl get svc -n kube-system\nNAME                                               TYPE           CLUSTER-IP       EXTERNAL-IP                                                              PORT(S)                      AGE\nkube-dns                                           ClusterIP      100.64.0.10      &lt;none&gt;                                                                   53/UDP,53/TCP,9153/TCP       20h\nmetrics-server                                     ClusterIP      100.68.52.42     &lt;none&gt;                                                                   443/TCP                      19h\nnginx-ingress-ingress-nginx-controller             LoadBalancer   100.64.25.22     ab58e1ce3541e475f8365c9ddfcd4496-883895960.us-east-1.elb.amazonaws.com   80:32111/TCP,443:30841/TCP   20h\nnginx-ingress-ingress-nginx-controller-admission   ClusterIP      100.69.127.174   &lt;none&gt;                                                                   443/TCP                      20h\n\n\nTesting the payment app HPA\n\n\n\n\nkops-hpa-ca-architecture\n\n\nBefore installing and running an open-source load testing generator to test the payment-app-hpa, let’s run the kubectl describe hpa to see all the conditions affecting the HorizontalPodAutoscaler.\n$ kubectl describe hpa\nName:                                                  payment-app-hpa\nNamespace:                                             default\nLabels:                                                &lt;none&gt;\nAnnotations:                                           &lt;none&gt;\nCreationTimestamp:                                     Sat, 21 Aug 2021 02:54:24 +0000\nReference:                                             Deployment/payment-app\nMetrics:                                               ( current / target )\n  resource cpu on pods  (as a percentage of request):  1% (1m) / 50%\nMin replicas:                                          3\nMax replicas:                                          10\nDeployment pods:                                       3 current / 3 desired\nConditions:\n  Type            Status  Reason            Message\n  ----            ------  ------            -------\n  AbleToScale     True    ReadyForNewScale  recommended size matches current size\n  ScalingActive   True    ValidMetricFound  the HPA was able to successfully calculate a replica count from cpu resource utilization (percentage of request)\n  ScalingLimited  True    TooFewReplicas    the desired replica count is less than the minimum replica count\nEvents:\n  Type     Reason                        Age                From                       Message\n  ----     ------                        ----               ----                       -------\n  Normal   SuccessfulRescale             22m (x2 over 19h)  horizontal-pod-autoscaler  New size: 3; reason: Current number of replicas below Spec.MinReplicas\n  Warning  FailedGetResourceMetric       21m (x4 over 22m)  horizontal-pod-autoscaler  failed to get cpu utilization: did not receive metrics for any ready pods\n  Warning  FailedComputeMetricsReplicas  21m (x4 over 22m)  horizontal-pod-autoscaler  invalid metrics (1 invalid out of 1), first error is: failed to get cpu utilization: did not receive metrics for any ready pods"
  },
  {
    "objectID": "projects/ansible-kops/index.html#testing-the-payment-application-with-load-testing-tools",
    "href": "projects/ansible-kops/index.html#testing-the-payment-application-with-load-testing-tools",
    "title": "Optimizing a Flask API microservice with Kubernetes",
    "section": "Testing the payment application with Load testing tools",
    "text": "Testing the payment application with Load testing tools\nFor our load testing tool, we will use Apache bench. Apache bench (also called Apache benchmark) is a helpful load testing tool for websites that run on Apache webserver. It is easy to install and allows you to simulate & test different kinds of website loads to enable your website to cope with real-world situations.\nFor Ubuntu 20.04, the following command will install Apache bench:\nsudo apt-get install apache2-utils -y\nOnce installed, you can directly use it for load testing. Here’s the syntax for Apache bench.\n$ ab &lt;OPTIONS&gt; &lt;WEB_SERVER_ADDRESS&gt;/&lt;PATH&gt;\nUsing the above command, we will specify the address from the easypay-payment-ingress at easypay.ctgkube.com. We will simulate 100,000 requests with 1000 concurrent connections to see how it will scale like it would be if it were in production.\n$ kubectl get pods\nNAME                            READY   STATUS    RESTARTS   AGE\nexternal-dns-7ff5ccbb48-p8wdd   1/1     Running   0          20h\nmongo-786f4cb565-dr62t          1/1     Running   0          19h\npayment-app-767748b689-4vl9t    1/1     Running   0          40m\npayment-app-767748b689-6vbhw    1/1     Running   0          40m\npayment-app-767748b689-pkwnz    1/1     Running   0          40m\n\n$ kubectl top pods --use-protocol-buffers\nNAME                            CPU(cores)   MEMORY(bytes)   \nexternal-dns-7ff5ccbb48-p8wdd   1m           16Mi            \nmongo-786f4cb565-dr62t          9m           71Mi            \npayment-app-767748b689-4vl9t    1m           23Mi            \npayment-app-767748b689-6vbhw    1m           23Mi            \npayment-app-767748b689-pkwnz    1m           23Mi\n\n$ ab -n 100000 -c 1000 http://easypay.ctgkube.com/payments\nThis is ApacheBench, Version 2.3 &lt;$Revision: 1843412 $&gt;\nCopyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/\nLicensed to The Apache Software Foundation, http://www.apache.org/\n\nBenchmarking easypay.ctgkube.com (be patient)\nCompleted 10000 requests\nCompleted 20000 requests\nCompleted 30000 requests\nCompleted 40000 requests\nCompleted 50000 requests\nCompleted 60000 requests\nCompleted 70000 requests\nCompleted 80000 requests\nCompleted 90000 requests\nCompleted 100000 requests\nFinished 100000 requests\n\n\nServer Software:        \nServer Hostname:        easypay.ctgkube.com\nServer Port:            80\n\nDocument Path:          /payments\nDocument Length:        340 bytes\n\nConcurrency Level:      1000\nTime taken for tests:   212.537 seconds\nComplete requests:      100000\nFailed requests:        76\n   (Connect: 0, Receive: 0, Length: 76, Exceptions: 0)\nTotal transferred:      49964000 bytes\nHTML transferred:       33975520 bytes\nRequests per second:    470.51 [#/sec] (mean)\nTime per request:       2125.374 [ms] (mean)\nTime per request:       2.125 [ms] (mean, across all concurrent requests)\nTransfer rate:          229.57 [Kbytes/sec] received\n\nConnection Times (ms)\n              min  mean[+/-sd] median   max\nConnect:        0  630 1540.3    208   65609\nProcessing:    95  897 2306.1    254   99451\nWaiting:        0  834 1647.1    248   99451\nTotal:        189 1527 2762.2    865  100599\n\nPercentage of the requests served within a certain time (ms)\n  50%    865\n  66%   1395\n  75%   1519\n  80%   1884\n  90%   3392\n  95%   4694\n  98%   7501\n  99%  10187\n 100%  100599 (longest request)\nThe auto-scaling functionality, as we can see, was successful once Apache bench completed all the requests. The kubectl get hpa -w command monitors the performance of the cluster deployments in real time. The replica set went from 3 payment-app pods running in service to 10 to handle a 500% or higher CPU utilization, which exceeds the 50% threshold. Once the load decreases, the replica set will scale back down to its orginal state of 3.\n$ kubectl get hpa -w\nNAME              REFERENCE                TARGETS   MINPODS   MAXPODS   REPLICAS   AGE\npayment-app-hpa   Deployment/payment-app   1%/50%    3         10        3          4d4h\npayment-app-hpa   Deployment/payment-app   559%/50%   3         10        3          4d4h\npayment-app-hpa   Deployment/payment-app   559%/50%   3         10        6          4d4h\npayment-app-hpa   Deployment/payment-app   559%/50%   3         10        10         4d4h\npayment-app-hpa   Deployment/payment-app   247%/50%   3         10        10         4d4h\npayment-app-hpa   Deployment/payment-app   1%/50%     3         10        10         4d4h\npayment-app-hpa   Deployment/payment-app   1%/50%     3         10        10         4d5h\npayment-app-hpa   Deployment/payment-app   1%/50%     3         10        3          4d5h\n\n$ kubectl top pods --use-protocol-buffers\nNAME                            CPU(cores)   MEMORY(bytes)   \nexternal-dns-7ff5ccbb48-p8wdd   1m           17Mi            \nmongo-786f4cb565-dr62t          129m         97Mi            \npayment-app-767748b689-2r54p    170m         24Mi            \npayment-app-767748b689-46hzw    169m         25Mi            \npayment-app-767748b689-4vl9t    177m         31Mi            \npayment-app-767748b689-6vbhw    174m         25Mi            \npayment-app-767748b689-g6l7c    180m         25Mi            \npayment-app-767748b689-pkwnz    177m         31Mi            \npayment-app-767748b689-q6b7l    170m         24Mi            \npayment-app-767748b689-s42wl    173m         25Mi            \npayment-app-767748b689-sjwm2    170m         24Mi            \npayment-app-767748b689-xkpct    180m         25Mi\n\n$ kubectl get pods\nNAME                            READY   STATUS    RESTARTS   AGE\nexternal-dns-7ff5ccbb48-p8wdd   1/1     Running   0          20h\nmongo-786f4cb565-dr62t          1/1     Running   0          20h\npayment-app-767748b689-2r54p    1/1     Running   0          77s\npayment-app-767748b689-46hzw    1/1     Running   0          92s\npayment-app-767748b689-4vl9t    1/1     Running   0          49m\npayment-app-767748b689-6vbhw    1/1     Running   0          48m\npayment-app-767748b689-g6l7c    1/1     Running   0          92s\npayment-app-767748b689-pkwnz    1/1     Running   0          48m\npayment-app-767748b689-q6b7l    1/1     Running   0          77s\npayment-app-767748b689-s42wl    1/1     Running   0          92s\npayment-app-767748b689-sjwm2    1/1     Running   0          77s\npayment-app-767748b689-xkpct    1/1     Running   0          77s\n\n\n\nhpa-deployments-kubernetes-dashboard"
  },
  {
    "objectID": "projects/ansible-kops/index.html#conclusion",
    "href": "projects/ansible-kops/index.html#conclusion",
    "title": "Optimizing a Flask API microservice with Kubernetes",
    "section": "Conclusion",
    "text": "Conclusion\nWow, this was quite a project! If you made it this far, congratulations! You have a fully capable microservices application deployed to a Highly Available Kubernetes cluster 👏🏾\nIf you enjoyed this project or have any other suggestions, leave a comment below. Your feedback is always welcome."
  },
  {
    "objectID": "blog/posts/digital-assets-demo/index.html",
    "href": "blog/posts/digital-assets-demo/index.html",
    "title": "Digital Asset Display in Quarto Blog Posts",
    "section": "",
    "text": "In this post, I’ll walk you through my workflow for displaying various types of digital assets in Quarto blog posts. I use a combination of tools to create an engaging and interactive reading experience:\n\nCloudinary for image and video hosting\nasciinema for terminal session recordings\nQuarto’s built-in markdown features. You can find more information here.\n\nLet’s explore each of these tools and how to implement them in your blog posts."
  },
  {
    "objectID": "blog/posts/digital-assets-demo/index.html#introduction",
    "href": "blog/posts/digital-assets-demo/index.html#introduction",
    "title": "Digital Asset Display in Quarto Blog Posts",
    "section": "",
    "text": "In this post, I’ll walk you through my workflow for displaying various types of digital assets in Quarto blog posts. I use a combination of tools to create an engaging and interactive reading experience:\n\nCloudinary for image and video hosting\nasciinema for terminal session recordings\nQuarto’s built-in markdown features. You can find more information here.\n\nLet’s explore each of these tools and how to implement them in your blog posts."
  },
  {
    "objectID": "blog/posts/digital-assets-demo/index.html#image-display-with-cloudinary",
    "href": "blog/posts/digital-assets-demo/index.html#image-display-with-cloudinary",
    "title": "Digital Asset Display in Quarto Blog Posts",
    "section": "Image Display with Cloudinary",
    "text": "Image Display with Cloudinary\nCloudinary is a SaaS tailored for media asset managment that I discovered works pretty well for blog images, and comes with a decent amount of resources and documentation to learn to use their platform effectively. This would include some features such as:\n\nAutomated image optimization\nResponsive image delivery and upload API\nCDN-powered fast loading\nCan perform image transformations\n\n\nImplementation Steps\n\nSign up for a Cloudinary account\nUpload your images to Cloudinary using the Cloudinary Upload API or SDK packages in your preferred language of choice.\nUse the provided URL in your Quarto markdown\n\nHere’s an example of an image hosted directly on Cloudinary:\n\nThe markdown syntax is simple:\n![](https://res.cloudinary.com/your-account/image/upload/your-image.jpg)"
  },
  {
    "objectID": "blog/posts/digital-assets-demo/index.html#terminal-session-recording-with-asciinema",
    "href": "blog/posts/digital-assets-demo/index.html#terminal-session-recording-with-asciinema",
    "title": "Digital Asset Display in Quarto Blog Posts",
    "section": "Terminal Session Recording with asciinema",
    "text": "Terminal Session Recording with asciinema\nasciinema is an excellent tool for recording and sharing terminal sessions. It creates lightweight, text-based recordings that are perfect for tutorials and documentation.\n\nHow to Use asciinema\n\nInstall asciinema via Python: pip install asciinema\nRecord a session: asciinema rec demo.cast\nUpload to asciinema.org\nEmbed in your blog using their JavaScript player\n\nHere’s an example recording:\n\nThe embed code is straightforward:\n&lt;script src=\"https://asciinema.org/a/YOUR-CAST-ID.js\" id=\"asciicast-YOUR-CAST-ID\" async=\"true\"&gt;&lt;/script&gt;"
  },
  {
    "objectID": "blog/posts/digital-assets-demo/index.html#video-display-with-cloudinary",
    "href": "blog/posts/digital-assets-demo/index.html#video-display-with-cloudinary",
    "title": "Digital Asset Display in Quarto Blog Posts",
    "section": "Video Display with Cloudinary",
    "text": "Video Display with Cloudinary\nCloudinary also excels at video hosting and delivery. It provides:\n\nAdaptive bitrate streaming\nAutomatic format optimization\nGlobal CDN delivery\nThumbnail generation\n\n\nAdding Videos to Your Blog\n\nUpload your video to Cloudinary\nEmbed the video URL in your .qmd\\.md post document\nOptionally, add a poster image for the video thumbnail\n\nHere’s an example video:\n\n\nVideo\nSea Turtle Example Video"
  },
  {
    "objectID": "blog/posts/digital-assets-demo/index.html#best-practices",
    "href": "blog/posts/digital-assets-demo/index.html#best-practices",
    "title": "Digital Asset Display in Quarto Blog Posts",
    "section": "Best Practices",
    "text": "Best Practices\n\nImage Optimization: Always compress images before uploading to Cloudinary\nResponsive Design: Use Cloudinary’s responsive image features\nTerminal Sessions: Keep recordings concise and focused\nVideo Content: Consider adding captions and descriptions\nPerformance: Monitor your page load times and optimize accordingly"
  },
  {
    "objectID": "blog/posts/digital-assets-demo/index.html#conclusion",
    "href": "blog/posts/digital-assets-demo/index.html#conclusion",
    "title": "Digital Asset Display in Quarto Blog Posts",
    "section": "Conclusion",
    "text": "Conclusion\nBy combining these tools, you can create rich, interactive blog posts that effectively communicate your ideas. Cloudinary handles your media assets efficiently, while asciinema provides an excellent way to share terminal sessions. Quarto’s markdown support makes it all work seamlessly together.\nFeel free to experiment with these tools if you like and adapt them to your specific needs. Also share your experiences with other alternatives too. Happy blogging!👋🏾"
  },
  {
    "objectID": "blog/index.html",
    "href": "blog/index.html",
    "title": "ctgadget.log()",
    "section": "",
    "text": "Welcome to my blog! 👋🏾\nI’ll be sharing interesting articles about my experiments, ideas, and thoughts.\nI invite you to explore, and I’m always open to further discussions.\n\n\n\n\n\n\n\n    \n      \n      \n    \n\n\n\n\n\n\nDate\n\n\n\nTitle\n\n\n\nDescription\n\n\n\nReading Time\n\n\n\n\n\n\n\n\n11/29/24\n\n\nDigital Asset Display in Quarto Blog Posts\n\n\nA comprehensive guide to displaying images, videos, and terminal sessions in Quarto blog posts. \n\n\n3 min\n\n\n\n\n\n\n11/5/24\n\n\nAwesome Sites! 😎\n\n\nEssential Resource Collections for Developers. \n\n\n3 min\n\n\n\n\n\n\n1/20/21\n\n\nAre you getting started to learn Python? 🐍\n\n\nUseful Resources for Beginners \n\n\n2 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Chaance T. Graves",
    "section": "",
    "text": "Welcome to my website! 👋🏾\nI’m an Electrical Engineer specializing in hardware systems development, automation, and AI-driven solutions. In particular, I’m interested in diving deeper into Embedded Systems Engineering and Low Power Design & Optimization.\nBeyond my professional work, I’m also passionate about self-hosting — the practice of running your own applications and services instead of relying on third parties. It gives me more control over my data and allows me to experiment with emerging technologies on my own terms.\n\n\nI bring experience in analyzing and troubleshooting complex systems, developing automation scripts, and optimizing system performance, particularly within the context of x86 and ARM-based hardware and software. My technical experience spans:\n\nOEM/ODM Product Development support for Cloud & Enterprise\nAI Infrastructure and Operations with familarity in Networking\nFPGA development\nEmbedded Systems\n\n\n\n\nMy site here will serve as my hub where I share:\n\nProjects: In-depth studies of my technical work and experiments, which are all open source.\nBlog: Insights on tech trends, tutorials, and my perspective on industry developments.\nResume: My professional background and skillset.\n\n\n\n\nI’m always open to collaborating, mentoring, and exchanging ideas with fellow technology enthusiasts. Feel free to reach out through LinkedIn or check out my detailed experience on my resume.\nAs a strong believer in knowledge sharing and continous learning, I’m committed to helping others who are curious or eager to grow. Whether you’re a experienced professional or just starting your tech journey, I’d love to connect!"
  },
  {
    "objectID": "index.html#what-i-do",
    "href": "index.html#what-i-do",
    "title": "Chaance T. Graves",
    "section": "",
    "text": "I bring experience in analyzing and troubleshooting complex systems, developing automation scripts, and optimizing system performance, particularly within the context of x86 and ARM-based hardware and software. My technical experience spans:\n\nOEM/ODM Product Development support for Cloud & Enterprise\nAI Infrastructure and Operations with familarity in Networking\nFPGA development\nEmbedded Systems"
  },
  {
    "objectID": "index.html#what-youll-find-here",
    "href": "index.html#what-youll-find-here",
    "title": "Chaance T. Graves",
    "section": "",
    "text": "My site here will serve as my hub where I share:\n\nProjects: In-depth studies of my technical work and experiments, which are all open source.\nBlog: Insights on tech trends, tutorials, and my perspective on industry developments.\nResume: My professional background and skillset."
  },
  {
    "objectID": "index.html#lets-connect",
    "href": "index.html#lets-connect",
    "title": "Chaance T. Graves",
    "section": "",
    "text": "I’m always open to collaborating, mentoring, and exchanging ideas with fellow technology enthusiasts. Feel free to reach out through LinkedIn or check out my detailed experience on my resume.\nAs a strong believer in knowledge sharing and continous learning, I’m committed to helping others who are curious or eager to grow. Whether you’re a experienced professional or just starting your tech journey, I’d love to connect!"
  },
  {
    "objectID": "resume.html",
    "href": "resume.html",
    "title": "My Resume",
    "section": "",
    "text": "Download PDF file."
  },
  {
    "objectID": "notes/index.html",
    "href": "notes/index.html",
    "title": "My Notes",
    "section": "",
    "text": "I’ll publish my “Digital Garden” that’ll be associated with the navbar link.\nCOMING SOON …"
  },
  {
    "objectID": "license.html",
    "href": "license.html",
    "title": "CC BY-NC-SA 4.0 license",
    "section": "",
    "text": "©  Chaance T. Graves\nMy content is released under the CC BY NC ND 4.0 license.\n   \nYou may share and adapt this content with appropriate credit and notation of any changes. You may not use this material for any commercial purposes.\n\n\n\n\n\n\nNote\n\n\n\nNote that my Opinions expressed are solely my own and do not express the views of my employer or any organizations I am associated with."
  },
  {
    "objectID": "blog/posts/awesome/index.html",
    "href": "blog/posts/awesome/index.html",
    "title": "Awesome Sites! 😎",
    "section": "",
    "text": "If you’re a developer/engineer that’s constantly searching for high-quality resources to enhance our skills and discover new tools like I am, you can check out the “awesome” lists on GitHub which have become a cornerstone of community-curated knowledge sharing. These collections are meticulously maintained by passionate developers worldwide, offering carefully selected resources across various technological domains.\nThe concept started with Sindre Sorhus’s original awesome list, which has since spawned thousands of specialized collections. These lists follow strict guidelines to ensure quality and relevance, making them invaluable for both beginners and experienced developers. I’ve highlighted some lists based on the domain that you can explore further into.\n\n\n\nAwesome Machine Learning\n\nA comprehensive collection of ML frameworks, libraries, and software\nCovers multiple programming languages including Python, R, Java, and more\nIncludes sections on computer vision, natural language processing, and deep learning\n\n\n\n\n\n\nAwesome Python\n\nEssential Python frameworks, libraries, and resources\nOrganized by application domain (web development, data science, testing, etc.)\nExcellent for both Python beginners and advanced developers\n\nAwesome Rust\n\nCurated resources for Rust programming language\nApplications, development tools, and learning materials\nGreat for those interested in systems programming and performance\n\n\n\n\n\n\nAwesome Embedded\n\nResources for embedded systems development\nHardware platforms, tools, and frameworks\nEssential for IoT, Hardware and Embedded Software Engineers\n\nAwesome Self Hosted\n\nTons of SaaS tools which you can host on your own servers\nAlternatives to popular cloud services\nExcellet for individuals and organizations focused on data privacy and goverenance\n\nAwesome Quarto\n\nQuarto specific curated content!\n\n\n\n\n\n\nAwesome Static Site Generators\n\nTools for building modern static websites\nFrameworks across multiple programming languages\nIncludes JAMstack resources and deployment options\n\n\n\n\n\n\nAwesome Prompts\n\nCollection of effective prompts for AI models\nBest practices for prompt engineering\nExamples for various use cases and applications\n\n\n\n\n\nTo keep track of changes and new additions to these collections, I recommend using Track Awesome List. This tool helps you monitor updates to your favorite awesome lists and discover new resources regularly.\n\n\n\nThese curated collections represent countless hours of community effort to organize and validate the best resources in each field. Whether you’re exploring a new technology or deepening your expertise in a familiar domain, these awesome lists are invaluable starting points for your journey.\nRemember to contribute back to these collections if you discover valuable resources that aren’t already included. The strength of these lists comes from active community participation and sharing."
  },
  {
    "objectID": "blog/posts/awesome/index.html#staying-updated",
    "href": "blog/posts/awesome/index.html#staying-updated",
    "title": "Awesome Sites! 😎",
    "section": "",
    "text": "To keep track of changes and new additions to these collections, I recommend using Track Awesome List. This tool helps you monitor updates to your favorite awesome lists and discover new resources regularly."
  },
  {
    "objectID": "blog/posts/awesome/index.html#final-thoughts",
    "href": "blog/posts/awesome/index.html#final-thoughts",
    "title": "Awesome Sites! 😎",
    "section": "",
    "text": "These curated collections represent countless hours of community effort to organize and validate the best resources in each field. Whether you’re exploring a new technology or deepening your expertise in a familiar domain, these awesome lists are invaluable starting points for your journey.\nRemember to contribute back to these collections if you discover valuable resources that aren’t already included. The strength of these lists comes from active community participation and sharing."
  },
  {
    "objectID": "blog/posts/python-intro/index.html",
    "href": "blog/posts/python-intro/index.html",
    "title": "Are you getting started to learn Python? 🐍",
    "section": "",
    "text": "Are you new to programming? Have questions about which language would be a good one to start?\nChoosing which programming language to learn is more a personal preference depending on what project and solution you’re looking to achieve. However, for a beginner, you have lots of flexibility to experiment with which one is right for you. One programming language I enjoy working with and others have found helpful is Python. I recommend installing Python 3 to have more community support to be developed and used for years to come.\nThere are likely millions of developers worldwide using Python to build projects, tools and using it to teach others the fundamentals of programming. You can do all kinds of other fantastic work in a multitude of domains.\n\nExample applications:\n\nWeb applications\nMachine Learning / Deep learning\nAutomating weekly emails\nSetting up jobs to update a spreadsheet\netc.\n\n\n\nHelpful online resources & books\nYou can find plentiful resources to teach yourself Python or pair with a small group to work on projects!\nCodeacademy: Codeacademy offers free code tutorials that are very popular for a good reason. The tutorials should give you a good idea of what it’s like to code Python with hands-on lessons to write code.\nLearn Python the Hard Way by Zed Shaw: This book is well received and aims to teach beginners how to read and write basic Python to understand other books on Python. It is high quality which I recommend regardless of where your current skill is. You can try the free sample to see if it would work for you.\nReal Python: This website offers in-depth tutorials to learn any aspect of Python you may be curious to explore. Check it out and keep a list of articles for future reference!\nAutomate the boring stuff with Python by Al Sweigart: This is an enjoyable read and practical for anyone who is currently working a tedious, routine job! He also offers a video course provided through Udemy.\nUdemy: You can find all sorts of courses and projects offered on this online education website. They range from beginner to advanced and have instructors teaching financial topics such as predicting stock prices, data science, full-stack web development, and more.\nI’m confident your programming journey will be well on its way towards success. Feel free to discuss any other valuable resources or projects you’ve discovered learning Python! 👌🏾"
  },
  {
    "objectID": "projects/heart-disease-prediction/index.html#importing-libraries",
    "href": "projects/heart-disease-prediction/index.html#importing-libraries",
    "title": "Heart Disease Prediction Random Forest Classifer",
    "section": "Importing Libraries",
    "text": "Importing Libraries\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings"
  },
  {
    "objectID": "projects/heart-disease-prediction/index.html#import-data",
    "href": "projects/heart-disease-prediction/index.html#import-data",
    "title": "Heart Disease Prediction Random Forest Classifer",
    "section": "Import Data",
    "text": "Import Data\n\ncardio_data = pd.read_csv(\"datasets/cep1_dataset.csv\")\ncardio_data.shape\n\n(303, 14)"
  },
  {
    "objectID": "projects/heart-disease-prediction/index.html#exploring-categorical-variables",
    "href": "projects/heart-disease-prediction/index.html#exploring-categorical-variables",
    "title": "Heart Disease Prediction Random Forest Classifer",
    "section": "Exploring Categorical Variables",
    "text": "Exploring Categorical Variables\n\n# Identify categorical variables\ncategorical_vars = ['sex', 'cp', 'fbs', 'restecg', 'exang', 'slope', 'ca', 'thal']\n\nfor var in categorical_vars:\n    plt.figure(figsize=(8, 4))\n    sns.countplot(x=var, data=cardio_data)\n    plt.title(f'Count Plot of {var}')\n    plt.show()"
  },
  {
    "objectID": "projects/heart-disease-prediction/index.html#factors-determining-the-occurrence-of-cvd",
    "href": "projects/heart-disease-prediction/index.html#factors-determining-the-occurrence-of-cvd",
    "title": "Heart Disease Prediction Random Forest Classifer",
    "section": "Factors Determining the Occurrence of CVD",
    "text": "Factors Determining the Occurrence of CVD\nWe’ll list how other factors in the dataset determine the occurrence of cardiovascular diseases.\n\nplt.figure(figsize=(15,10))\nsns.heatmap(cardio_data.corr(),linewidth=.01,annot=True,cmap=\"summer\")\nplt.title('Correlation Heatmap')\nplt.show()\n\nplt.savefig('correlationfigure')\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\nFrom the above heatmap, we can understand that Chest pain(cp) and target have a positive correlation. It means that whose has a large risk of chest pain results in a greater chance to have heart disease. In addition to chest pain, thalach, slope, and resting have a positive correlation with the target.\nThen, exercise-induced angina(exan) and the target have a negative correlation which means when we exercise, the heart requires more blood, but narrowed arteries slow down the blood flow. In addition to ca, old peak, thal have a negative correlation with the targetet.\nLet us see the relation between each features distribution with help of histogram\n\ncardio_data.hist(figsize=(12,12))\nplt.savefig('featuresplot')"
  },
  {
    "objectID": "projects/heart-disease-prediction/index.html#occurrence-of-cvd-across-age-categories",
    "href": "projects/heart-disease-prediction/index.html#occurrence-of-cvd-across-age-categories",
    "title": "Heart Disease Prediction Random Forest Classifer",
    "section": "Occurrence of CVD Across Age Categories",
    "text": "Occurrence of CVD Across Age Categories\nLet’s study the occurrence of cardiovascular diseases across different age categories with a histogram distribution.\n\nprint(f\"The youngest patient is {min(cardio_data.age)}\")\nprint(f\"The oldest patient is {max(cardio_data.age)}\")\nprint(f\"The mean age is {cardio_data.age.mean()}\")\nprint(\"\\n\")\n\n# Set the style for Seaborn\nsns.set(style='whitegrid')\n\n# Create the histogram plot using Seaborn\nplt.figure(figsize=(8, 4))\nsns.histplot(data=cardio_data, x='age', bins=20, kde=False)\nplt.title('Occurrence of CVD across Age Categories')\nplt.xlabel('Age')\nplt.ylabel('Frequency')\nplt.show()\n\nThe youngest patient is 29\nThe oldest patient is 77\nThe mean age is 54.366336633663366"
  },
  {
    "objectID": "projects/heart-disease-prediction/index.html#composition-of-patients-by-sex",
    "href": "projects/heart-disease-prediction/index.html#composition-of-patients-by-sex",
    "title": "Heart Disease Prediction Random Forest Classifer",
    "section": "Composition of Patients by Sex",
    "text": "Composition of Patients by Sex\nWe’ll study the composition of all patients with respect to the sex category.\n\n# Set the style for Seaborn\nsns.set(style='whitegrid')\n\n# Create the count plot for gender distribution according to the target variable\nfig, ax = plt.subplots(figsize=(8, 5))\ngender = cardio_data['sex']\nax = sns.countplot(x='sex', hue='target', data=cardio_data, palette='muted')\n\n# Set the title and x-axis labels\nax.set_title(\"Gender Distribution according to Target\", fontsize=13, weight='bold')\nax.set_xlabel('Gender')\nax.set_ylabel('Count')\nax.set_xticklabels(['Female', 'Male'])  # Explicitly set x-axis labels\n\n# Add percentage annotations\ntotals = []\nfor i in ax.patches:\n    totals.append(i.get_height())\ntotal = sum(totals)\nfor i in ax.patches:\n    ax.text(i.get_x() + 0.05, i.get_height() - 15,\n            f\"{round((i.get_height() / total) * 100, 2)}%\", fontsize=14,\n            color='white', weight='bold')\n\nplt.tight_layout()\nplt.show()\n\n/tmp/ipykernel_73277/1354869852.py:13: UserWarning: set_ticklabels() should only be used with a fixed number of ticks, i.e. after set_ticks() or using a FixedLocator.\n  ax.set_xticklabels(['Female', 'Male'])  # Explicitly set x-axis labels\n\n\n\n\n\n\n\n\n\nFrom the bar graph, we can observe that among disease patients, males are higher than females."
  },
  {
    "objectID": "projects/heart-disease-prediction/index.html#detecting-heart-attacks-based-on-resting-blood-pressure",
    "href": "projects/heart-disease-prediction/index.html#detecting-heart-attacks-based-on-resting-blood-pressure",
    "title": "Heart Disease Prediction Random Forest Classifer",
    "section": "Detecting Heart Attacks based on Resting Blood Pressure",
    "text": "Detecting Heart Attacks based on Resting Blood Pressure\nWe’ll study if heart attacks can be detected based on anomalies in resting blood pressure (trestbps).\n\nplt.figure(figsize=(15, 5))\n\n# plotting subplot #1 - Box plot of resting blood pressure by target variable\nplt.subplot(1,2,1)\nsns.boxplot(x='target', y='trestbps', data=cardio_data)\nplt.title('Resting Blood Pressure (trestbps) vs. Target Variable')\n\n# plotting subplot #2 - Scatter plot of resting blood pressure by target variable\nplt.subplot(1,2,2)\nsns.scatterplot(y=cardio_data.age, x=cardio_data.trestbps, hue= cardio_data.target)\n\nplt.show()\n\n\n\n\n\n\n\n\nWe observe that people who develop CVD have lower resting bp than people who don’t develop CVD"
  },
  {
    "objectID": "projects/heart-disease-prediction/index.html#relationship-between-cholesterol-levels-and-target-variable",
    "href": "projects/heart-disease-prediction/index.html#relationship-between-cholesterol-levels-and-target-variable",
    "title": "Heart Disease Prediction Random Forest Classifer",
    "section": "Relationship between Cholesterol Levels and Target Variable",
    "text": "Relationship between Cholesterol Levels and Target Variable\nLet’s describe the relationship between cholesterol levels (chol) and the target variable.\n\nplt.figure(figsize=(15, 5))\n\n# plotting subplot #1 - Box plot of cholesterol levels by target variable\nplt.subplot(1,2,1)\nsns.boxplot(x='target', y='chol', data=cardio_data)\nplt.title('Cholesterol Levels (chol) vs. Target Variable')\n\n# plotting subplot #2 - Scatter plot of cholesterol levels by target variable\nplt.subplot(1,2,2)\nsns.scatterplot(x=cardio_data.chol, y=cardio_data.target, hue=cardio_data.target)\nplt.legend(loc='center left')\n\nplt.show()\n\n\n\n\n\n\n\n\nWe can infer that people who develop CVD have much higher level of cholestrol and concentrated within the range between 200 - 300."
  },
  {
    "objectID": "projects/heart-disease-prediction/index.html#relationship-between-peak-exercising-and-heart-attack-occurrence",
    "href": "projects/heart-disease-prediction/index.html#relationship-between-peak-exercising-and-heart-attack-occurrence",
    "title": "Heart Disease Prediction Random Forest Classifer",
    "section": "Relationship between Peak Exercising and Heart Attack Occurrence",
    "text": "Relationship between Peak Exercising and Heart Attack Occurrence\nWe’ll explore the relationship between peak exercising (oldpeak) and the occurrence of a heart attack.\n\nplt.figure(figsize=(15, 5))\n\n# plotting subplot #1 - Box plot of peak exercising (oldpeak) by target variable\nplt.subplot(1,2,1)\nsns.boxplot(x='target', y='oldpeak', data=cardio_data)\nplt.title('Peak Exercising (oldpeak) vs. Target Variable')\n\n# plotting subplot #2 - Bar plot of peak exercising (oldpeak) by target variable\nplt.subplot(1,2,2)\nsns.barplot(y=cardio_data.oldpeak, x=cardio_data.slope, hue=cardio_data.target)\n\nplt.show()\n\n\n\n\n\n\n\n\nWe can infer that oldpeak is lower in people who develop CVD."
  },
  {
    "objectID": "projects/heart-disease-prediction/index.html#checking-if-thalassemia-is-a-major-cause-of-cvd",
    "href": "projects/heart-disease-prediction/index.html#checking-if-thalassemia-is-a-major-cause-of-cvd",
    "title": "Heart Disease Prediction Random Forest Classifer",
    "section": "Checking if Thalassemia is a Major Cause of CVD",
    "text": "Checking if Thalassemia is a Major Cause of CVD\nLet’s check if thalassemia is a major cause of cardiovascular diseases.\n\n# Count plot of thalassemia by target variable\nplt.figure(figsize=(15, 5))\nsns.countplot(x='thal', hue='target', data=cardio_data)\nplt.title('Thalassemia vs. Target Variable')\nplt.show()\n\n\n\n\n\n\n\n\nThalassemia can be a major cause for CVD as it is more associated in 2."
  },
  {
    "objectID": "projects/heart-disease-prediction/index.html#pair-plot-to-understand-variable-relationships",
    "href": "projects/heart-disease-prediction/index.html#pair-plot-to-understand-variable-relationships",
    "title": "Heart Disease Prediction Random Forest Classifer",
    "section": "Pair Plot to Understand Variable Relationships",
    "text": "Pair Plot to Understand Variable Relationships\nLastly, we’ll use a pair plot to understand the relationship between all the given variables.\n\n# Pair plot\nsns.pairplot(cardio_data, hue='target')\nplt.title('Pair Plot')\nplt.show()"
  },
  {
    "objectID": "projects/heart-disease-prediction/index.html#train-test-split",
    "href": "projects/heart-disease-prediction/index.html#train-test-split",
    "title": "Heart Disease Prediction Random Forest Classifer",
    "section": "Train-Test Split",
    "text": "Train-Test Split\nWe split the whole dataset into trainset and testset which contains 75% train and 25% test.\nWe can include this train set into classifiers to train our model and the test set is useful for predicting the performance of the model by different classifiers.\n\n# Modeling\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\nfrom sklearn.metrics import confusion_matrix, classification_report, roc_auc_score, roc_curve\nfrom sklearn.model_selection import RandomizedSearchCV, train_test_split\nfrom scipy.stats import randint\n\n# Tree and Data Visualisation\nimport graphviz\nfrom sklearn.tree import export_graphviz\n\n\n# Features\nX = cardio_data.drop('target', axis=1)\n# Target Variable\ny = cardio_data['target']\n\nprint('shape of X and y respectively :', X.shape, y.shape)\n\nshape of X and y respectively : (303, 13) (303,)\n\n\n\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.25,random_state=40)\n\nprint(f'X_train: {X_train.shape}')\nprint(f'X_test: {X_test.shape}')\nprint(f'y_train: {y_train.shape}')\nprint(f'y_test: {y_test.shape}')\n\nX_train: (227, 13)\nX_test: (76, 13)\ny_train: (227,)\ny_test: (76,)"
  },
  {
    "objectID": "projects/heart-disease-prediction/index.html#logistic-regression-with-statsmodel",
    "href": "projects/heart-disease-prediction/index.html#logistic-regression-with-statsmodel",
    "title": "Heart Disease Prediction Random Forest Classifer",
    "section": "Logistic Regression with Statsmodel",
    "text": "Logistic Regression with Statsmodel\n\nimport statsmodels.api as sm\n\n\nlogreg_stats = sm.Logit(y_train, X_train).fit()\n\nOptimization terminated successfully.\n         Current function value: 0.371141\n         Iterations 7\n\n\n\nprint(logreg_stats.summary())\n\n                           Logit Regression Results                           \n==============================================================================\nDep. Variable:                 target   No. Observations:                  227\nModel:                          Logit   Df Residuals:                      214\nMethod:                           MLE   Df Model:                           12\nDate:                Thu, 24 Apr 2025   Pseudo R-squ.:                  0.4618\nTime:                        07:01:40   Log-Likelihood:                -84.249\nconverged:                       True   LL-Null:                       -156.55\nCovariance Type:            nonrobust   LLR p-value:                 7.046e-25\n==============================================================================\n                 coef    std err          z      P&gt;|z|      [0.025      0.975]\n------------------------------------------------------------------------------\nage            0.0228      0.023      0.997      0.319      -0.022       0.068\nsex           -1.6290      0.519     -3.138      0.002      -2.647      -0.612\ncp             0.9382      0.220      4.265      0.000       0.507       1.369\ntrestbps      -0.0252      0.012     -2.170      0.030      -0.048      -0.002\nchol          -0.0032      0.004     -0.755      0.450      -0.011       0.005\nfbs           -0.2011      0.608     -0.331      0.741      -1.392       0.990\nrestecg        0.8217      0.390      2.109      0.035       0.058       1.585\nthalach        0.0346      0.010      3.498      0.000       0.015       0.054\nexang         -0.6767      0.479     -1.414      0.157      -1.615       0.261\noldpeak       -0.6029      0.250     -2.411      0.016      -1.093      -0.113\nslope          0.4173      0.397      1.051      0.293      -0.361       1.195\nca            -0.6518      0.214     -3.044      0.002      -1.072      -0.232\nthal          -0.7534      0.317     -2.378      0.017      -1.374      -0.132\n==============================================================================\n\n\n\nlogreg_prediction = logreg_stats.predict(X_test)\npredictions = list(map(round, logreg_prediction))\nprint(predictions)\n\n[0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0]\n\n\n\naccuracy = accuracy_score(y_test, predictions)\nrecall = recall_score(y_test, predictions)\nprecision = precision_score(y_test, predictions)\nf1 = f1_score(y_test, predictions)\n\n# Displaying the scores with their corresponding percentages using f-strings\nprint(f'Accuracy score: {accuracy} -&gt; {accuracy * 100:.2f}%')\nprint(f'Recall score: {recall} -&gt; {recall * 100:.2f}%')\nprint(f'Precision score: {precision} -&gt; {precision * 100:.2f}%')\nprint(f'f1 score: {f1} -&gt; {f1 * 100:.2f}%')\n\nlogreg_stats_cm = confusion_matrix(y_test,predictions)\nsns.heatmap(logreg_stats_cm,annot=True)\n\nAccuracy score: 0.881578947368421 -&gt; 88.16%\nRecall score: 0.9285714285714286 -&gt; 92.86%\nPrecision score: 0.8666666666666667 -&gt; 86.67%\nf1 score: 0.896551724137931 -&gt; 89.66%"
  },
  {
    "objectID": "projects/heart-disease-prediction/index.html#logistic-regression-with-scikit-learn",
    "href": "projects/heart-disease-prediction/index.html#logistic-regression-with-scikit-learn",
    "title": "Heart Disease Prediction Random Forest Classifer",
    "section": "Logistic Regression with scikit-learn",
    "text": "Logistic Regression with scikit-learn\n\nfrom sklearn.linear_model import LogisticRegression\n\n# initialize the model\nlogreg_model = LogisticRegression(max_iter=1000)\n# fit the model\nlogreg_model.fit(X_train, y_train)\n# prediction\nY_prediction = logreg_model.predict(X_test)\n\n\nscore = logreg_model.score(X_train, y_train)\nprint(f'Training Score: {score} -&gt; {score * 100:.2f}%')\n\nscore = logreg_model.score(X_test, y_test)\nprint(f'Testing Score: {score} -&gt; {score * 100:.2f}%')\n\nprint(\"\\n\")\n\n# Heart-Disease yes or no? 1/0\noutput = pd.DataFrame({'Predicted':Y_prediction})\nprint(output.head())\npeople = output.loc[output.Predicted == 1][\"Predicted\"]\n\nrate_people = 0\nif len(people) &gt; 0 :\n    rate_people = len(people)/len(output)\n\nprint(f'% of people predicted with heart-disease: {rate_people} -&gt; {rate_people * 100:.2f}%')\n\nscore_logreg = score\nout_logreg = output\n\nTraining Score: 0.8414096916299559 -&gt; 84.14%\nTesting Score: 0.881578947368421 -&gt; 88.16%\n\n\n   Predicted\n0          0\n1          1\n2          1\n3          0\n4          1\n% of people predicted with heart-disease: 0.5921052631578947 -&gt; 59.21%\n\n\nNow let’s evaluate a logistic regression model’s performance on the test dataset using a classification report, which includes precision, recall, F1-score, and support metrics for each class. Additionally, we will generate a heatmap of the confusion matrix to visualize the true positive, false positive, true negative, and false negative predictions. This assessment allows a quick and comprehensive understanding of how well the model performs in predicting the target variable for different classes, aiding in the evaluation and interpretation of its predictive capabilities.\n\nfrom sklearn.metrics import confusion_matrix\n\nprint(classification_report(y_test,Y_prediction))\n\nlogreg_confusion_matrix = confusion_matrix(y_test,Y_prediction)\nclass_names = [0,1]\nfig,ax = plt.subplots()\ntick_marks = np.arange(len(class_names))\nplt.xticks(tick_marks,class_names)\nplt.yticks(tick_marks,class_names)\nsns.heatmap(pd.DataFrame(logreg_confusion_matrix), annot = True, cmap = 'Greens', fmt = 'g')\nax.xaxis.set_label_position('top')\nplt.tight_layout()\nplt.title('Confusion matrix for logistic regression')\nplt.ylabel('Actual label')\nplt.xlabel('Predicted label')\nplt.show()\n\n              precision    recall  f1-score   support\n\n           0       0.90      0.82      0.86        34\n           1       0.87      0.93      0.90        42\n\n    accuracy                           0.88        76\n   macro avg       0.88      0.88      0.88        76\nweighted avg       0.88      0.88      0.88        76\n\n\n\n\n\n\n\n\n\n\nThe Receiver Operating Characteristic (ROC) curve calculates the probabilities of the positive class (heart disease present) using predict_proba, and then computes the false positive rate (FPR), true positive rate (TPR), and corresponding thresholds using roc_curve from sklearn.metrics. The resulting curve is plotted using matplotlib, with the green line representing the ROC curve and a dashed line indicating the baseline (random guessing) performance. The plot also includes vertical and horizontal lines at 0 and 1, respectively, to mark the extreme points. The area under the ROC curve (AUC) is displayed on the plot, providing a single-value summary of the model’s discrimination performance.\nA higher AUC indicates better model performance in distinguishing between positive and negative cases. This visualization helps to assess the model’s overall performance and choose an appropriate probability threshold for classification based on the trade-off between false positives and true positives.\n\n# ROC Curve\ny_probabilities = logreg_model.predict_proba(X_test)[:,1]\nfalse_positive_rate_knn, true_positive_rate_knn, threshold_knn = roc_curve(y_test,y_probabilities)\n\nplt.figure(figsize=(10,6))\nplt.title('ROC for logistic regression')\nplt.plot(false_positive_rate_knn, true_positive_rate_knn, linewidth=5, color='green')\nplt.plot([0,1],ls='--',linewidth=5)\nplt.plot([0,0],[1,0],c='.5')\nplt.plot([1,1],c='.5')\nplt.text(0.2,0.6,'AUC: {:.2f}'.format(roc_auc_score(y_test,y_probabilities)),size= 16)\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.show()"
  },
  {
    "objectID": "projects/heart-disease-prediction/index.html#random-forest-classifier",
    "href": "projects/heart-disease-prediction/index.html#random-forest-classifier",
    "title": "Heart Disease Prediction Random Forest Classifer",
    "section": "Random Forest Classifier",
    "text": "Random Forest Classifier\nLet’s first fit and the evaluate a base model\n\nfrom sklearn.ensemble import RandomForestClassifier\n\n# initialize the model\nrfc_model = RandomForestClassifier(n_estimators=100) # , max_depth=5, random_state=1\n# fit the model\nrfc_model.fit(X_train, y_train)\n# prediction\nY_prediction = rfc_model.predict(X_test)\n\n\nscore = rfc_model.score(X_train, y_train)\nprint(f'Training Score: {score} -&gt; {score * 100:.2f}%')\n\nscore = rfc_model.score(X_test, y_test)\nprint(f'Testing Score: {score} -&gt; {score * 100:.2f}%')\n\naccuracy = accuracy_score(y_test, Y_prediction)\nprint(f'Accuracy score: {accuracy} -&gt; {accuracy * 100:.2f}%')\n\nprint(\"\\n\")\n\n# Heart-Disease yes or no? 1/0\noutput = pd.DataFrame({'Predicted':Y_prediction})\nprint(output.head())\npeople = output.loc[output.Predicted == 1][\"Predicted\"]\n\nrate_people = 0\nif len(people) &gt; 0 :\n    rate_people = len(people)/len(output)\n\nprint(f'% of people predicted with heart-disease: {rate_people} -&gt; {rate_people * 100:.2f}%')\n\nscore_rfc = score\nout_rfc = output\n\nTraining Score: 1.0 -&gt; 100.00%\nTesting Score: 0.8157894736842105 -&gt; 81.58%\nAccuracy score: 0.8157894736842105 -&gt; 81.58%\n\n\n   Predicted\n0          1\n1          0\n2          1\n3          0\n4          1\n% of people predicted with heart-disease: 0.5526315789473685 -&gt; 55.26%\n\n\n\nVisualizing the Results\nLet’s display the first three decision trees from the random forest classifier (rfc_model). The loop iterates three times, and for each iteration, it retrieves one decision tree from the random forest using rfc_model.estimators_[i]. It then uses export_graphviz from sklearn.tree to generate a Graphviz dot data representation of the decision tree. The visualization options include displaying feature names, filling tree nodes with colors based on class proportions, and limiting the tree depth to 2 levels (max_depth=2). The graphviz.Source function is used to create a graph from the dot data, and the display function shows the decision tree as an image in the notebook for visual inspection.\nThis export and display process allows for a closer examination of individual trees within the random forest ensemble, helping to understand the different decision paths and feature importance in the model’s decision-making process.\n\n# Export the first three decision trees from the forest\n\nfor i in range(3):\n    tree = rfc_model.estimators_[i]\n    dot_data = export_graphviz(tree,\n                               feature_names=X_train.columns,\n                               filled=True,\n                               max_depth=2,\n                               impurity=False,\n                               proportion=True)\n    graph = graphviz.Source(dot_data)\n    display(graph)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHyperparameter Tuning\nThe code below uses Scikit-Learn’s RandomizedSearchCV, which will randomly search parameters within a range per hyperparameter. We define the hyperparameters to use and their ranges in the param_dist dictionary. In our case, we are using:\n\nn_estimators: the number of decision trees in the forest. ncreasing this hyperparameter generally improves the performance of the model but also increases the computational cost of training and predicting.\nmax_depth: the maximum depth of each decision tree in the forest. Setting a higher value for max_depth can lead to overfitting while setting it too low can lead to underfitting.\n\n\nparam_dist = {'n_estimators': randint(50,500),\n              'max_depth': randint(1,20)}\n\n# Use random search to find the best hyperparameters\nrand_search = RandomizedSearchCV(rfc_model,\n                                 param_distributions = param_dist,\n                                 n_iter=5,\n                                 cv=5)\n\n# Fit the random search object to the data\nrand_search.fit(X_train, y_train)\n\nRandomizedSearchCV(cv=5, estimator=RandomForestClassifier(), n_iter=5,\n                   param_distributions={'max_depth': &lt;scipy.stats._distn_infrastructure.rv_discrete_frozen object at 0x7fc009652960&gt;,\n                                        'n_estimators': &lt;scipy.stats._distn_infrastructure.rv_discrete_frozen object at 0x7fc00460e1e0&gt;})In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.RandomizedSearchCV?Documentation for RandomizedSearchCViFittedRandomizedSearchCV(cv=5, estimator=RandomForestClassifier(), n_iter=5,\n                   param_distributions={'max_depth': &lt;scipy.stats._distn_infrastructure.rv_discrete_frozen object at 0x7fc009652960&gt;,\n                                        'n_estimators': &lt;scipy.stats._distn_infrastructure.rv_discrete_frozen object at 0x7fc00460e1e0&gt;}) best_estimator_: RandomForestClassifierRandomForestClassifier(max_depth=5, n_estimators=469) RandomForestClassifier?Documentation for RandomForestClassifierRandomForestClassifier(max_depth=5, n_estimators=469) \n\n\n\n# Create a variable for the best model\nbest_rf = rand_search.best_estimator_\n\n# Print the best hyperparameters\nprint('Best hyperparameters:',  rand_search.best_params_)\n\nBest hyperparameters: {'max_depth': 5, 'n_estimators': 469}\n\n\n\nprint(classification_report(y_test,Y_prediction))\n\n# Generate predictions with the best model\ny_pred = best_rf.predict(X_test)\n\n# Create the confusion matrix\nrfc_confusion_matrix = confusion_matrix(y_test, y_pred)\n\nclass_names = [0,1]\nfig,ax = plt.subplots()\ntick_marks = np.arange(len(class_names))\nplt.xticks(tick_marks,class_names)\nplt.yticks(tick_marks,class_names)\nsns.heatmap(pd.DataFrame(rfc_confusion_matrix), annot = True, cmap = 'Greens', fmt = 'g')\nax.xaxis.set_label_position('top')\nplt.tight_layout()\nplt.title('Confusion matrix for random forest')\nplt.ylabel('Actual label')\nplt.xlabel('Best Predicted label')\nplt.show()\n\n              precision    recall  f1-score   support\n\n           0       0.79      0.79      0.79        34\n           1       0.83      0.83      0.83        42\n\n    accuracy                           0.82        76\n   macro avg       0.81      0.81      0.81        76\nweighted avg       0.82      0.82      0.82        76\n\n\n\n\n\n\n\n\n\n\nWe should also evaluate the best model with accuracy, precision, and recall (note your results may differ due to randomization)\n\nscore = best_rf.score(X_train, y_train)\nprint(f'Training Score: {score} -&gt; {score * 100:.2f}%')\n\nscore = best_rf.score(X_test, y_test)\nprint(f'Testing Score: {score} -&gt; {score * 100:.2f}%')\n\naccuracy = accuracy_score(y_test, y_pred)\nprecision = precision_score(y_test, y_pred)\nrecall = recall_score(y_test, y_pred)\n\n# Displaying the scores with their corresponding percentages using f-strings\nprint(f'Accuracy score: {accuracy} -&gt; {accuracy * 100:.2f}%')\nprint(f'Recall score: {recall} -&gt; {recall * 100:.2f}%')\nprint(f'Precision score: {precision} -&gt; {precision * 100:.2f}%')\n\nscore_best_rfc = score\nout_best_rfc = output\n\nTraining Score: 0.9515418502202643 -&gt; 95.15%\nTesting Score: 0.8552631578947368 -&gt; 85.53%\nAccuracy score: 0.8552631578947368 -&gt; 85.53%\nRecall score: 0.8809523809523809 -&gt; 88.10%\nPrecision score: 0.8604651162790697 -&gt; 86.05%\n\n\nThe below code plots the importance of each feature, using the model’s internal score to find the best way to split the data within each decision tree.\n\n# Create a series containing feature importances from the model and feature names from the training data\nfeature_importances = pd.Series(best_rf.feature_importances_, index=X_train.columns).sort_values(ascending=False)\n\n# Plot a simple bar chart\nfeature_importances.plot.bar();\n\n\n\n\n\n\n\n\nLet’s also evalaute and display the ROC curve for the best Random Forest model\n\ny_probabilities = best_rf.predict_proba(X_test)[:,1]\nfalse_positive_rate, true_positive_rate, threshold_knn = roc_curve(y_test,y_probabilities)\nplt.figure(figsize=(10,6))\nplt.title('ROC for best random forest')\nplt.plot(false_positive_rate, true_positive_rate, linewidth=5, color='green')\nplt.plot([0,1],ls='--',linewidth=5)\nplt.plot([0,0],[1,0],c='.5')\nplt.plot([1,1],c='.5')\nplt.text(0.2,0.6,'AUC: {:.2f}'.format(roc_auc_score(y_test,y_probabilities)),size= 16)\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.show()"
  },
  {
    "objectID": "projects/customer-service-analysis/index.html#problem-statement",
    "href": "projects/customer-service-analysis/index.html#problem-statement",
    "title": "NYC 311 Customer Service Requests Analysis",
    "section": "Problem Statement",
    "text": "Problem Statement\nAnalyze the data on service request (311) call from New York City. Utilize Data Wrangling techniques to understand the patterns in the data and visualize the major type of complaints."
  },
  {
    "objectID": "projects/customer-service-analysis/index.html#import-the-libraries-for-analysis",
    "href": "projects/customer-service-analysis/index.html#import-the-libraries-for-analysis",
    "title": "NYC 311 Customer Service Requests Analysis",
    "section": "Import the libraries for analysis",
    "text": "Import the libraries for analysis\n\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom ydata_profiling import ProfileReport\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n\n            \n                Upgrade to ydata-sdk\n                \n                    Improve your data and profiling with ydata-sdk, featuring data quality scoring, redundancy detection, outlier identification, text validation, and synthetic data generation."
  },
  {
    "objectID": "projects/customer-service-analysis/index.html#understanding-the-dataset",
    "href": "projects/customer-service-analysis/index.html#understanding-the-dataset",
    "title": "NYC 311 Customer Service Requests Analysis",
    "section": "Understanding the dataset",
    "text": "Understanding the dataset\n\n# checking the info about the installed pandas package version\nprint(pd.show_versions())\n\n\nINSTALLED VERSIONS\n------------------\ncommit                : 0691c5cf90477d3503834d983f69350f250a6ff7\npython                : 3.12.2\npython-bits           : 64\nOS                    : Linux\nOS-release            : 5.15.167.4-microsoft-standard-WSL2\nVersion               : #1 SMP Tue Nov 5 00:21:55 UTC 2024\nmachine               : x86_64\nprocessor             : x86_64\nbyteorder             : little\nLC_ALL                : None\nLANG                  : C.UTF-8\nLOCALE                : C.UTF-8\n\npandas                : 2.2.3\nnumpy                 : 2.1.3\npytz                  : 2025.2\ndateutil              : 2.9.0.post0\npip                   : None\nCython                : None\nsphinx                : None\nIPython               : 9.1.0\nadbc-driver-postgresql: None\nadbc-driver-sqlite    : None\nbs4                   : 4.13.4\nblosc                 : None\nbottleneck            : None\ndataframe-api-compat  : None\nfastparquet           : None\nfsspec                : None\nhtml5lib              : None\nhypothesis            : None\ngcsfs                 : None\njinja2                : 3.1.6\nlxml.etree            : None\nmatplotlib            : 3.10.0\nnumba                 : 0.61.0\nnumexpr               : None\nodfpy                 : None\nopenpyxl              : None\npandas_gbq            : None\npsycopg2              : None\npymysql               : None\npyarrow               : None\npyreadstat            : None\npytest                : None\npython-calamine       : None\npyxlsb                : None\ns3fs                  : None\nscipy                 : 1.15.2\nsqlalchemy            : None\ntables                : None\ntabulate              : None\nxarray                : None\nxlrd                  : None\nxlsxwriter            : None\nzstandard             : None\ntzdata                : 2025.2\nqtpy                  : None\npyqt5                 : None\nNone\n\n\n\n# Setting the constants to use throughout the notebook\nDATA_PATH = \"data/\"\nDATASETS_PATH = \"datasets/\"\n\n\ndf = pd.read_csv(DATASETS_PATH + \"311_Service_Requests_from_2010_to_Present.csv\")\n\n\ndf.head()\n\n\n\n\n\n\n\n\nUnique Key\nCreated Date\nClosed Date\nAgency\nAgency Name\nComplaint Type\nDescriptor\nLocation Type\nIncident Zip\nIncident Address\n...\nBridge Highway Name\nBridge Highway Direction\nRoad Ramp\nBridge Highway Segment\nGarage Lot Name\nFerry Direction\nFerry Terminal Name\nLatitude\nLongitude\nLocation\n\n\n\n\n0\n32310363\n12/31/2015 11:59:45 PM\n01/01/2016 12:55:15 AM\nNYPD\nNew York City Police Department\nNoise - Street/Sidewalk\nLoud Music/Party\nStreet/Sidewalk\n10034.0\n71 VERMILYEA AVENUE\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n40.865682\n-73.923501\n(40.86568153633767, -73.92350095571744)\n\n\n1\n32309934\n12/31/2015 11:59:44 PM\n01/01/2016 01:26:57 AM\nNYPD\nNew York City Police Department\nBlocked Driveway\nNo Access\nStreet/Sidewalk\n11105.0\n27-07 23 AVENUE\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n40.775945\n-73.915094\n(40.775945312321085, -73.91509393898605)\n\n\n2\n32309159\n12/31/2015 11:59:29 PM\n01/01/2016 04:51:03 AM\nNYPD\nNew York City Police Department\nBlocked Driveway\nNo Access\nStreet/Sidewalk\n10458.0\n2897 VALENTINE AVENUE\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n40.870325\n-73.888525\n(40.870324522111424, -73.88852464418646)\n\n\n3\n32305098\n12/31/2015 11:57:46 PM\n01/01/2016 07:43:13 AM\nNYPD\nNew York City Police Department\nIllegal Parking\nCommercial Overnight Parking\nStreet/Sidewalk\n10461.0\n2940 BAISLEY AVENUE\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n40.835994\n-73.828379\n(40.83599404683083, -73.82837939584206)\n\n\n4\n32306529\n12/31/2015 11:56:58 PM\n01/01/2016 03:24:42 AM\nNYPD\nNew York City Police Department\nIllegal Parking\nBlocked Sidewalk\nStreet/Sidewalk\n11373.0\n87-14 57 ROAD\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n40.733060\n-73.874170\n(40.733059618956815, -73.87416975810375)\n\n\n\n\n5 rows × 53 columns\n\n\n\n\n# Let's get the info about the dataset, shape of the dimensions\ndf.info()\nprint(\"\\n\")\nprint( f\"The shape of the dataset is {df.shape}\")\nprint(\"\\n\")\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 364558 entries, 0 to 364557\nData columns (total 53 columns):\n #   Column                          Non-Null Count   Dtype  \n---  ------                          --------------   -----  \n 0   Unique Key                      364558 non-null  int64  \n 1   Created Date                    364558 non-null  object \n 2   Closed Date                     362177 non-null  object \n 3   Agency                          364558 non-null  object \n 4   Agency Name                     364558 non-null  object \n 5   Complaint Type                  364558 non-null  object \n 6   Descriptor                      358057 non-null  object \n 7   Location Type                   364425 non-null  object \n 8   Incident Zip                    361560 non-null  float64\n 9   Incident Address                312859 non-null  object \n 10  Street Name                     312859 non-null  object \n 11  Cross Street 1                  307370 non-null  object \n 12  Cross Street 2                  306753 non-null  object \n 13  Intersection Street 1           51120 non-null   object \n 14  Intersection Street 2           50512 non-null   object \n 15  Address Type                    361306 non-null  object \n 16  City                            361561 non-null  object \n 17  Landmark                        375 non-null     object \n 18  Facility Type                   362169 non-null  object \n 19  Status                          364558 non-null  object \n 20  Due Date                        364555 non-null  object \n 21  Resolution Description          364558 non-null  object \n 22  Resolution Action Updated Date  362156 non-null  object \n 23  Community Board                 364558 non-null  object \n 24  Borough                         364558 non-null  object \n 25  X Coordinate (State Plane)      360528 non-null  float64\n 26  Y Coordinate (State Plane)      360528 non-null  float64\n 27  Park Facility Name              364558 non-null  object \n 28  Park Borough                    364558 non-null  object \n 29  School Name                     364558 non-null  object \n 30  School Number                   364558 non-null  object \n 31  School Region                   364557 non-null  object \n 32  School Code                     364557 non-null  object \n 33  School Phone Number             364558 non-null  object \n 34  School Address                  364558 non-null  object \n 35  School City                     364558 non-null  object \n 36  School State                    364558 non-null  object \n 37  School Zip                      364557 non-null  object \n 38  School Not Found                364558 non-null  object \n 39  School or Citywide Complaint    0 non-null       float64\n 40  Vehicle Type                    0 non-null       float64\n 41  Taxi Company Borough            0 non-null       float64\n 42  Taxi Pick Up Location           0 non-null       float64\n 43  Bridge Highway Name             297 non-null     object \n 44  Bridge Highway Direction        297 non-null     object \n 45  Road Ramp                       262 non-null     object \n 46  Bridge Highway Segment          262 non-null     object \n 47  Garage Lot Name                 0 non-null       float64\n 48  Ferry Direction                 1 non-null       object \n 49  Ferry Terminal Name             2 non-null       object \n 50  Latitude                        360528 non-null  float64\n 51  Longitude                       360528 non-null  float64\n 52  Location                        360528 non-null  object \ndtypes: float64(10), int64(1), object(42)\nmemory usage: 147.4+ MB\n\n\nThe shape of the dataset is (364558, 53)\n\n\n\n\n\n# Let's check if any null values exists\nnull_counts = df.isnull().sum()\nprint(null_counts)\n\nUnique Key                             0\nCreated Date                           0\nClosed Date                         2381\nAgency                                 0\nAgency Name                            0\nComplaint Type                         0\nDescriptor                          6501\nLocation Type                        133\nIncident Zip                        2998\nIncident Address                   51699\nStreet Name                        51699\nCross Street 1                     57188\nCross Street 2                     57805\nIntersection Street 1             313438\nIntersection Street 2             314046\nAddress Type                        3252\nCity                                2997\nLandmark                          364183\nFacility Type                       2389\nStatus                                 0\nDue Date                               3\nResolution Description                 0\nResolution Action Updated Date      2402\nCommunity Board                        0\nBorough                                0\nX Coordinate (State Plane)          4030\nY Coordinate (State Plane)          4030\nPark Facility Name                     0\nPark Borough                           0\nSchool Name                            0\nSchool Number                          0\nSchool Region                          1\nSchool Code                            1\nSchool Phone Number                    0\nSchool Address                         0\nSchool City                            0\nSchool State                           0\nSchool Zip                             1\nSchool Not Found                       0\nSchool or Citywide Complaint      364558\nVehicle Type                      364558\nTaxi Company Borough              364558\nTaxi Pick Up Location             364558\nBridge Highway Name               364261\nBridge Highway Direction          364261\nRoad Ramp                         364296\nBridge Highway Segment            364296\nGarage Lot Name                   364558\nFerry Direction                   364557\nFerry Terminal Name               364556\nLatitude                            4030\nLongitude                           4030\nLocation                            4030\ndtype: int64\n\n\nObservations:\nThere are null values present in the df dataframe for the following variables:\n\nClosed Date\nDescriptor\nLocation Type etc…"
  },
  {
    "objectID": "projects/customer-service-analysis/index.html#exploratory-data-analysis-eda",
    "href": "projects/customer-service-analysis/index.html#exploratory-data-analysis-eda",
    "title": "NYC 311 Customer Service Requests Analysis",
    "section": "Exploratory Data Analysis (EDA)",
    "text": "Exploratory Data Analysis (EDA)\nwe use plt.style.use('ggplot') to set the ggplot style for Matplotlib. We then use the same code as before to count the null values and create the bar chart, and set the chart title and axis labels using plt.title(), plt.xlabel(), and plt.ylabel().\n\nplt.style.use('ggplot')\n\n# Create bar chart of null value counts\nnull_counts.plot.barh(figsize=(15,10), stacked=True)\n\n# Set chart title and axis labels\nplt.title('Null Value Counts')\nplt.xlabel('Columns', labelpad=10)\nplt.ylabel('Count')\n\n# Show chart\nplt.show()\n\n\n\n\n\n\n\n\n\n# Remove null values from \"Closed Date\" column\ndf.dropna(subset=[\"Closed Date\"], inplace=True)\n\n# Show sample of dataset with null values removed\ndf.head()\n\n\n\n\n\n\n\n\nUnique Key\nCreated Date\nClosed Date\nAgency\nAgency Name\nComplaint Type\nDescriptor\nLocation Type\nIncident Zip\nIncident Address\n...\nBridge Highway Name\nBridge Highway Direction\nRoad Ramp\nBridge Highway Segment\nGarage Lot Name\nFerry Direction\nFerry Terminal Name\nLatitude\nLongitude\nLocation\n\n\n\n\n0\n32310363\n12/31/2015 11:59:45 PM\n01/01/2016 12:55:15 AM\nNYPD\nNew York City Police Department\nNoise - Street/Sidewalk\nLoud Music/Party\nStreet/Sidewalk\n10034.0\n71 VERMILYEA AVENUE\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n40.865682\n-73.923501\n(40.86568153633767, -73.92350095571744)\n\n\n1\n32309934\n12/31/2015 11:59:44 PM\n01/01/2016 01:26:57 AM\nNYPD\nNew York City Police Department\nBlocked Driveway\nNo Access\nStreet/Sidewalk\n11105.0\n27-07 23 AVENUE\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n40.775945\n-73.915094\n(40.775945312321085, -73.91509393898605)\n\n\n2\n32309159\n12/31/2015 11:59:29 PM\n01/01/2016 04:51:03 AM\nNYPD\nNew York City Police Department\nBlocked Driveway\nNo Access\nStreet/Sidewalk\n10458.0\n2897 VALENTINE AVENUE\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n40.870325\n-73.888525\n(40.870324522111424, -73.88852464418646)\n\n\n3\n32305098\n12/31/2015 11:57:46 PM\n01/01/2016 07:43:13 AM\nNYPD\nNew York City Police Department\nIllegal Parking\nCommercial Overnight Parking\nStreet/Sidewalk\n10461.0\n2940 BAISLEY AVENUE\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n40.835994\n-73.828379\n(40.83599404683083, -73.82837939584206)\n\n\n4\n32306529\n12/31/2015 11:56:58 PM\n01/01/2016 03:24:42 AM\nNYPD\nNew York City Police Department\nIllegal Parking\nBlocked Sidewalk\nStreet/Sidewalk\n11373.0\n87-14 57 ROAD\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n40.733060\n-73.874170\n(40.733059618956815, -73.87416975810375)\n\n\n\n\n5 rows × 53 columns\n\n\n\n\n# Check if null values are still present in \"Closed Date\" column\nif df['Closed Date'].isnull().any():\n    print('Null values still present in \"Closed Date\" column.')\nelse:\n    print('No null values present in \"Closed Date\" column.')\n\nNo null values present in \"Closed Date\" column.\n\n\n\n# Convert the \"Closed Date\" and \"Created Date\" columns to datetime format\ndf[\"Created Date\"] = pd.to_datetime(df[\"Created Date\"], format=\"%m/%d/%Y %I:%M:%S %p\")\ndf[\"Closed Date\"] = pd.to_datetime(df[\"Closed Date\"], format=\"%m/%d/%Y %I:%M:%S %p\")\ndf.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nIndex: 362177 entries, 0 to 364557\nData columns (total 53 columns):\n #   Column                          Non-Null Count   Dtype         \n---  ------                          --------------   -----         \n 0   Unique Key                      362177 non-null  int64         \n 1   Created Date                    362177 non-null  datetime64[ns]\n 2   Closed Date                     362177 non-null  datetime64[ns]\n 3   Agency                          362177 non-null  object        \n 4   Agency Name                     362177 non-null  object        \n 5   Complaint Type                  362177 non-null  object        \n 6   Descriptor                      355681 non-null  object        \n 7   Location Type                   362047 non-null  object        \n 8   Incident Zip                    361502 non-null  float64       \n 9   Incident Address                310491 non-null  object        \n 10  Street Name                     310491 non-null  object        \n 11  Cross Street 1                  306846 non-null  object        \n 12  Cross Street 2                  306713 non-null  object        \n 13  Intersection Street 1           50628 non-null   object        \n 14  Intersection Street 2           50504 non-null   object        \n 15  Address Type                    361248 non-null  object        \n 16  City                            361503 non-null  object        \n 17  Landmark                        375 non-null     object        \n 18  Facility Type                   362159 non-null  object        \n 19  Status                          362177 non-null  object        \n 20  Due Date                        362176 non-null  object        \n 21  Resolution Description          362177 non-null  object        \n 22  Resolution Action Updated Date  362138 non-null  object        \n 23  Community Board                 362177 non-null  object        \n 24  Borough                         362177 non-null  object        \n 25  X Coordinate (State Plane)      360470 non-null  float64       \n 26  Y Coordinate (State Plane)      360470 non-null  float64       \n 27  Park Facility Name              362177 non-null  object        \n 28  Park Borough                    362177 non-null  object        \n 29  School Name                     362177 non-null  object        \n 30  School Number                   362177 non-null  object        \n 31  School Region                   362176 non-null  object        \n 32  School Code                     362176 non-null  object        \n 33  School Phone Number             362177 non-null  object        \n 34  School Address                  362177 non-null  object        \n 35  School City                     362177 non-null  object        \n 36  School State                    362177 non-null  object        \n 37  School Zip                      362176 non-null  object        \n 38  School Not Found                362177 non-null  object        \n 39  School or Citywide Complaint    0 non-null       float64       \n 40  Vehicle Type                    0 non-null       float64       \n 41  Taxi Company Borough            0 non-null       float64       \n 42  Taxi Pick Up Location           0 non-null       float64       \n 43  Bridge Highway Name             297 non-null     object        \n 44  Bridge Highway Direction        297 non-null     object        \n 45  Road Ramp                       262 non-null     object        \n 46  Bridge Highway Segment          262 non-null     object        \n 47  Garage Lot Name                 0 non-null       float64       \n 48  Ferry Direction                 0 non-null       object        \n 49  Ferry Terminal Name             0 non-null       object        \n 50  Latitude                        360470 non-null  float64       \n 51  Longitude                       360470 non-null  float64       \n 52  Location                        360470 non-null  object        \ndtypes: datetime64[ns](2), float64(10), int64(1), object(40)\nmemory usage: 149.2+ MB\n\n\n\n# Create a new column called \"Time Delta\" and calculate the time delta between \"Closed Date\" and \"Created Date\"\ndf[\"request_closing_time_sec\"] = (df[\"Closed Date\"] - df[\"Created Date\"]).dt.total_seconds()\n\n# View descriptive statistics of the \"Time Delta\" column\ndf[\"request_closing_time_sec\"].describe()\n\ncount    3.621770e+05\nmean     1.511330e+04\nstd      2.110255e+04\nmin      6.100000e+01\n25%      4.533000e+03\n50%      9.616000e+03\n75%      1.887800e+04\nmax      2.134342e+06\nName: request_closing_time_sec, dtype: float64"
  },
  {
    "objectID": "projects/customer-service-analysis/index.html#finding-the-major-type-of-complaints",
    "href": "projects/customer-service-analysis/index.html#finding-the-major-type-of-complaints",
    "title": "NYC 311 Customer Service Requests Analysis",
    "section": "Finding the major type of complaints",
    "text": "Finding the major type of complaints\n\n# Check the number of null values in the \"Complaint_Type\" and \"City\" columns using f-strings\nprint(f'Number of null values in \"Complaint_Type\" column: {df[\"Complaint Type\"].isnull().sum()}')\nprint(f'Number of null values in \"City\" column: {df[\"City\"].isnull().sum()}')\n\nNumber of null values in \"Complaint_Type\" column: 0\nNumber of null values in \"City\" column: 674\n\n\n\n# fill in missing values (nan) in the 'City' column with 'Unknown City'\ndf['City'].fillna('Unknown City', inplace=True)\n\n# Get Unique Count using Series.unique()\ncity_count = df.City.unique().size\n\n# Let's check what all unique values are in the 'City' column\ncity_col = df['City'].unique()\n\nprint(f\"There are {city_count} values in the dataset that contain the following info: \\n {city_col}\")\n\nThere are 54 values in the dataset that contain the following info: \n ['NEW YORK' 'ASTORIA' 'BRONX' 'ELMHURST' 'BROOKLYN' 'KEW GARDENS'\n 'JACKSON HEIGHTS' 'MIDDLE VILLAGE' 'REGO PARK' 'SAINT ALBANS' 'JAMAICA'\n 'SOUTH RICHMOND HILL' 'Unknown City' 'RIDGEWOOD' 'HOWARD BEACH'\n 'FOREST HILLS' 'STATEN ISLAND' 'OZONE PARK' 'RICHMOND HILL' 'WOODHAVEN'\n 'FLUSHING' 'CORONA' 'QUEENS VILLAGE' 'OAKLAND GARDENS' 'HOLLIS' 'MASPETH'\n 'EAST ELMHURST' 'SOUTH OZONE PARK' 'WOODSIDE' 'FRESH MEADOWS'\n 'LONG ISLAND CITY' 'ROCKAWAY PARK' 'SPRINGFIELD GARDENS' 'COLLEGE POINT'\n 'BAYSIDE' 'GLEN OAKS' 'FAR ROCKAWAY' 'BELLEROSE' 'LITTLE NECK'\n 'CAMBRIA HEIGHTS' 'ROSEDALE' 'SUNNYSIDE' 'WHITESTONE' 'ARVERNE'\n 'FLORAL PARK' 'NEW HYDE PARK' 'CENTRAL PARK' 'BREEZY POINT' 'QUEENS'\n 'Astoria' 'Long Island City' 'Woodside' 'East Elmhurst' 'Howard Beach']\n\n\n\ntotal_city_complaints = df.groupby(['City','Complaint Type']).size().unstack().fillna(0)\n\ntotal_city_complaints.head()\n\n\n\n\n\n\n\nComplaint Type\nAgency Issues\nAnimal Abuse\nAnimal in a Park\nBike/Roller/Skate Chronic\nBlocked Driveway\nDerelict Vehicle\nDisorderly Youth\nDrinking\nGraffiti\nHomeless Encampment\n...\nNoise - House of Worship\nNoise - Park\nNoise - Street/Sidewalk\nNoise - Vehicle\nPanhandling\nPosting Advertisement\nSqueegee\nTraffic\nUrinating in Public\nVending\n\n\nCity\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nARVERNE\n0.0\n46.0\n0.0\n0.0\n50.0\n32.0\n2.0\n1.0\n1.0\n4.0\n...\n14.0\n2.0\n29.0\n10.0\n1.0\n0.0\n0.0\n1.0\n1.0\n1.0\n\n\nASTORIA\n0.0\n170.0\n0.0\n16.0\n3436.0\n426.0\n5.0\n43.0\n4.0\n32.0\n...\n21.0\n64.0\n409.0\n236.0\n2.0\n3.0\n0.0\n60.0\n10.0\n57.0\n\n\nAstoria\n0.0\n0.0\n0.0\n0.0\n159.0\n14.0\n0.0\n0.0\n0.0\n0.0\n...\n0.0\n0.0\n145.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\nBAYSIDE\n0.0\n53.0\n0.0\n0.0\n514.0\n231.0\n2.0\n1.0\n3.0\n2.0\n...\n3.0\n4.0\n17.0\n24.0\n0.0\n0.0\n0.0\n9.0\n0.0\n2.0\n\n\nBELLEROSE\n0.0\n15.0\n0.0\n1.0\n138.0\n120.0\n2.0\n1.0\n0.0\n1.0\n...\n1.0\n1.0\n13.0\n11.0\n1.0\n1.0\n0.0\n9.0\n1.0\n0.0\n\n\n\n\n5 rows × 23 columns\n\n\n\n\ntotal_city_complaints.plot.bar(figsize=(15,10), stacked=True)\n\n# set the axis labels and title\nplt.xlabel('Number of Complaints')\nplt.ylabel('City')\nplt.title('Frequency of Complaints by City')\n\n# show the plot\nplt.show()"
  },
  {
    "objectID": "projects/customer-service-analysis/index.html#data-visualization-of-the-major-type-of-complaints",
    "href": "projects/customer-service-analysis/index.html#data-visualization-of-the-major-type-of-complaints",
    "title": "NYC 311 Customer Service Requests Analysis",
    "section": "Data Visualization of the major type of complaints",
    "text": "Data Visualization of the major type of complaints\nIn order to find the major type of complaints in the dataset, the following code groups the dataset by complaint type, counts the number of occurrences for each type, and then sorts the counts in descending order. The resulting bar graph shows the counts for each complaint type.\n\n# Group by complaint type and count the number of occurrences\ncomplaint_counts = df.groupby('Complaint Type').size().reset_index(name='counts')\n\n# Sort the counts in descending order\ncomplaint_counts = complaint_counts.sort_values('counts', ascending=False)\n\ncomplaint_counts\n\n\n\n\n\n\n\n\nComplaint Type\ncounts\n\n\n\n\n4\nBlocked Driveway\n100624\n\n\n11\nIllegal Parking\n91716\n\n\n15\nNoise - Street/Sidewalk\n51139\n\n\n12\nNoise - Commercial\n43751\n\n\n5\nDerelict Vehicle\n21518\n\n\n16\nNoise - Vehicle\n19301\n\n\n1\nAnimal Abuse\n10530\n\n\n20\nTraffic\n5196\n\n\n9\nHomeless Encampment\n4879\n\n\n22\nVending\n4185\n\n\n14\nNoise - Park\n4089\n\n\n7\nDrinking\n1404\n\n\n13\nNoise - House of Worship\n1068\n\n\n18\nPosting Advertisement\n679\n\n\n21\nUrinating in Public\n641\n\n\n3\nBike/Roller/Skate Chronic\n475\n\n\n17\nPanhandling\n325\n\n\n6\nDisorderly Youth\n315\n\n\n10\nIllegal Fireworks\n172\n\n\n8\nGraffiti\n157\n\n\n0\nAgency Issues\n8\n\n\n19\nSqueegee\n4\n\n\n2\nAnimal in a Park\n1\n\n\n\n\n\n\n\n\n# Plot the bar graph\nplt.bar(complaint_counts['Complaint Type'], complaint_counts['counts'])\nplt.xticks(rotation=90)\nplt.xlabel('Complaint Type')\nplt.ylabel('Counts')\nplt.title('Types of Complaints in the Total Dataset')\nplt.show()\n\n\n\n\n\n\n\n\nFrom our bar chart analysis, the top 10 major complaint types are the following:\n\nBlocked Driveway\nIllegal Parking\nNoisy Street/Sidewalk\nNoise - Commerical buildings\nDerelict Vehicle\nNoise - Vehicle\nAnimal Abuse\nTraffic\nHomeless Encampment\nVending\n\nLet’s explore the complaint data specifically for NYC …\nThis code filters the dataset to only include complaints from New York City, groups the remaining data by complaint type, counts the number of occurrences for each type, and then sorts the counts in descending order. The resulting output shows the frequency of each complaint type for New York City.\n\nnyc_data = df.loc[df['City'] == 'NEW YORK']\nnyc_data.head()\n\n\n\n\n\n\n\n\nUnique Key\nCreated Date\nClosed Date\nAgency\nAgency Name\nComplaint Type\nDescriptor\nLocation Type\nIncident Zip\nIncident Address\n...\nBridge Highway Direction\nRoad Ramp\nBridge Highway Segment\nGarage Lot Name\nFerry Direction\nFerry Terminal Name\nLatitude\nLongitude\nLocation\nrequest_closing_time_sec\n\n\n\n\n0\n32310363\n2015-12-31 23:59:45\n2016-01-01 00:55:15\nNYPD\nNew York City Police Department\nNoise - Street/Sidewalk\nLoud Music/Party\nStreet/Sidewalk\n10034.0\n71 VERMILYEA AVENUE\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n40.865682\n-73.923501\n(40.86568153633767, -73.92350095571744)\n3330.0\n\n\n6\n32306559\n2015-12-31 23:55:32\n2016-01-01 01:53:54\nNYPD\nNew York City Police Department\nIllegal Parking\nBlocked Hydrant\nStreet/Sidewalk\n10032.0\n524 WEST 169 STREET\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n40.840848\n-73.937375\n(40.840847591440415, -73.9373750864581)\n7102.0\n\n\n19\n32308195\n2015-12-31 23:40:55\n2016-01-01 00:28:31\nNYPD\nNew York City Police Department\nNoise - Street/Sidewalk\nLoud Music/Party\nStreet/Sidewalk\n10026.0\n264 WEST 118 STREET\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n40.805267\n-73.953353\n(40.80526715877265, -73.9533526205901)\n2856.0\n\n\n23\n32308765\n2015-12-31 23:32:46\n2016-01-01 00:25:21\nNYPD\nNew York City Police Department\nIllegal Parking\nDouble Parked Blocking Vehicle\nStreet/Sidewalk\n10030.0\n133 WEST 134 STREET\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n40.814002\n-73.942664\n(40.814001537165495, -73.94266395083876)\n3155.0\n\n\n26\n32305916\n2015-12-31 23:26:41\n2015-12-31 23:53:31\nNYPD\nNew York City Police Department\nNoise - House of Worship\nLoud Music/Party\nHouse of Worship\n10031.0\n452 WEST 147 STREET\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n40.826102\n-73.945663\n(40.826101709196, -73.94566339279595)\n1610.0\n\n\n\n\n5 rows × 54 columns\n\n\n\n\n# Extract and count the unique values in the \"Complaint Type\" column\nnyc_complaint_types = len(nyc_data['Complaint Type'].unique())\n\n# Print the complaint types\nprint(f\"there are {nyc_complaint_types} complaint types in New York City.\")\n\n# Group by complaint type and count the number of occurrences\nnyc_complaint_counts = nyc_data.groupby('Complaint Type').size().reset_index(name='counts')\n\n# Sort the counts in descending order\nnyc_complaint_counts = nyc_complaint_counts.sort_values('counts', ascending=False)\n\nnyc_data['Complaint Type'].value_counts()\n\nthere are 21 complaint types in New York City.\n\n\nComplaint Type\nNoise - Street/Sidewalk      22245\nNoise - Commercial           18686\nIllegal Parking              14549\nNoise - Vehicle               6294\nHomeless Encampment           3060\nBlocked Driveway              2705\nVending                       2638\nAnimal Abuse                  1941\nTraffic                       1769\nNoise - Park                  1243\nDerelict Vehicle               695\nDrinking                       321\nUrinating in Public            264\nBike/Roller/Skate Chronic      254\nNoise - House of Worship       222\nPanhandling                    206\nDisorderly Youth                81\nPosting Advertisement           49\nIllegal Fireworks               38\nGraffiti                        25\nSqueegee                         4\nName: count, dtype: int64\n\n\n\n# Plot the bar graph\nplt.bar(nyc_complaint_counts['Complaint Type'], nyc_complaint_counts['counts'], color='green')\nplt.xticks(rotation=90)\nplt.xlabel('Complaint Type')\nplt.ylabel('Counts')\nplt.title('Types of Complaints in New York City')\nplt.show()\n\n\n\n\n\n\n\n\nLet’s explore the complaint data specifically for Brooklyn …\nThis code filters the dataset to only include complaints from Brooklyn, groups the remaining data by complaint type, counts the number of occurrences for each type, and then sorts the counts in descending order. The resulting output shows the frequency of each complaint type for Brooklyn.\n\nbk_data = df.loc[df['City'] == 'BROOKLYN']\nbk_data.head()\n\n\n\n\n\n\n\n\nUnique Key\nCreated Date\nClosed Date\nAgency\nAgency Name\nComplaint Type\nDescriptor\nLocation Type\nIncident Zip\nIncident Address\n...\nBridge Highway Direction\nRoad Ramp\nBridge Highway Segment\nGarage Lot Name\nFerry Direction\nFerry Terminal Name\nLatitude\nLongitude\nLocation\nrequest_closing_time_sec\n\n\n\n\n5\n32306554\n2015-12-31 23:56:30\n2016-01-01 01:50:11\nNYPD\nNew York City Police Department\nIllegal Parking\nPosted Parking Sign Violation\nStreet/Sidewalk\n11215.0\n260 21 STREET\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n40.660823\n-73.992568\n(40.66082272389114, -73.99256786342693)\n6821.0\n\n\n9\n32308391\n2015-12-31 23:53:58\n2016-01-01 01:17:40\nNYPD\nNew York City Police Department\nBlocked Driveway\nNo Access\nStreet/Sidewalk\n11219.0\n1408 66 STREET\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n40.623793\n-73.999539\n(40.623793065806524, -73.99953890121567)\n5022.0\n\n\n13\n32305074\n2015-12-31 23:47:58\n2016-01-01 08:18:47\nNYPD\nNew York City Police Department\nIllegal Parking\nPosted Parking Sign Violation\nStreet/Sidewalk\n11208.0\n38 COX PLACE\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n40.687511\n-73.874505\n(40.68751060232221, -73.87450451131276)\n30649.0\n\n\n17\n32310273\n2015-12-31 23:44:52\n2016-01-01 00:36:10\nNYPD\nNew York City Police Department\nNoise - Commercial\nLoud Music/Party\nClub/Bar/Restaurant\n11217.0\n622 DEGRAW STREET\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n40.679154\n-73.983430\n(40.679154133157326, -73.98342992763081)\n3078.0\n\n\n18\n32306617\n2015-12-31 23:40:59\n2016-01-01 02:37:28\nNYPD\nNew York City Police Department\nNoise - Commercial\nLoud Music/Party\nClub/Bar/Restaurant\n11234.0\n2192 FLATBUSH AVENUE\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n40.616550\n-73.930202\n(40.61655032892211, -73.93020153359745)\n10589.0\n\n\n\n\n5 rows × 54 columns\n\n\n\n\n# Extract and count the unique values in the \"Complaint Type\" column\nbk_complaint_types = len(bk_data['Complaint Type'].unique())\n\n# Print the complaint types\nprint(f\"there are {bk_complaint_types} complaint types in Brooklyn.\")\n\n# Group by complaint type and count the number of occurrences\nbk_complaint_counts = bk_data.groupby('Complaint Type').size().reset_index(name='counts')\n\n# Sort the counts in descending order\nbk_complaint_counts = bk_complaint_counts.sort_values('counts', ascending=False)\n\nbk_data['Complaint Type'].value_counts()\n\nthere are 20 complaint types in Brooklyn.\n\n\nComplaint Type\nBlocked Driveway             36445\nIllegal Parking              33532\nNoise - Street/Sidewalk      13982\nNoise - Commercial           13855\nDerelict Vehicle              6257\nNoise - Vehicle               5965\nAnimal Abuse                  3191\nNoise - Park                  1575\nTraffic                       1258\nHomeless Encampment            948\nVending                        575\nNoise - House of Worship       389\nDrinking                       291\nUrinating in Public            155\nBike/Roller/Skate Chronic      124\nDisorderly Youth                79\nIllegal Fireworks               61\nGraffiti                        60\nPosting Advertisement           58\nPanhandling                     49\nName: count, dtype: int64\n\n\n\n# Plot the bar graph\nplt.bar(bk_complaint_counts['Complaint Type'], bk_complaint_counts['counts'], color='blue')\nplt.xticks(rotation=90)\nplt.xlabel('Complaint Type')\nplt.ylabel('Counts')\nplt.title('Types of Complaints in Brooklyn')\nplt.show()\n\n\n\n\n\n\n\n\n\n# create a scatter plot of the concentration of complaints across Brooklyn\nbk_data.plot.scatter(x='Longitude', y='Latitude', s=0.1, alpha=0.5, figsize=(10, 8))\nplt.xlabel('Longitude')\nplt.ylabel('Latitude')\nplt.title('Scatter Plot of Complaints Concentration in Brooklyn')\n\n# create a hexbin plot of the concentration of complaints across Brooklyn\nbk_data.plot.hexbin(x='Longitude', y='Latitude', gridsize=30, cmap='Blues', figsize=(10, 8))\nplt.xlabel('Longitude')\nplt.ylabel('Latitude')\nplt.title('Hexbin Plot of Complaints Concentration in Brooklyn')\n\n# show the plots\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis code groups the data by both city and complaint type, counts the number of occurrences for each combination, and then prints the resulting output, which shows the various types of complaints in each city.\n\n# Group by city and complaint type and count the number of occurrences\ncomplaints_by_city = df.groupby(['City', 'Complaint Type']).size().reset_index(name='counts')\n\n# Print the various types of complaints in each city\ncomplaints_by_city\n\n\n\n\n\n\n\n\nCity\nComplaint Type\ncounts\n\n\n\n\n0\nARVERNE\nAnimal Abuse\n46\n\n\n1\nARVERNE\nBlocked Driveway\n50\n\n\n2\nARVERNE\nDerelict Vehicle\n32\n\n\n3\nARVERNE\nDisorderly Youth\n2\n\n\n4\nARVERNE\nDrinking\n1\n\n\n...\n...\n...\n...\n\n\n787\nWoodside\nBlocked Driveway\n27\n\n\n788\nWoodside\nDerelict Vehicle\n8\n\n\n789\nWoodside\nIllegal Parking\n124\n\n\n790\nWoodside\nNoise - Commercial\n2\n\n\n791\nWoodside\nNoise - Street/Sidewalk\n5\n\n\n\n\n792 rows × 3 columns\n\n\n\nThis code uses the pd.pivot_table() function to pivot the data in the original DataFrame df. The resulting DataFrame, df_new, has complaint types as rows, cities as columns, and the count of occurrences as the values. The fill_value=0 parameter fills any missing values with zeros. The resulting output shows the new DataFrame with cities as columns and complaint types in rows.\n\n# Pivot the data to create a new DataFrame\ndf_new = pd.pivot_table(df, index='Complaint Type', columns='City', aggfunc=len, fill_value=0)\n\n# Print the new DataFrame\ndf_new.head()\n\n\n\n\n\n\n\n\nAddress Type\n...\nrequest_closing_time_sec\n\n\nCity\nARVERNE\nASTORIA\nAstoria\nBAYSIDE\nBELLEROSE\nBREEZY POINT\nBRONX\nBROOKLYN\nCAMBRIA HEIGHTS\nCENTRAL PARK\n...\nSOUTH OZONE PARK\nSOUTH RICHMOND HILL\nSPRINGFIELD GARDENS\nSTATEN ISLAND\nSUNNYSIDE\nUnknown City\nWHITESTONE\nWOODHAVEN\nWOODSIDE\nWoodside\n\n\nComplaint Type\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAgency Issues\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n0\n0\n0\n0\n0\n8\n0\n0\n0\n0\n\n\nAnimal Abuse\n46\n170\n0\n53\n15\n2\n1971\n3191\n15\n0\n...\n74\n40\n42\n786\n40\n1\n43\n57\n111\n0\n\n\nAnimal in a Park\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\nBike/Roller/Skate Chronic\n0\n16\n0\n0\n1\n0\n22\n124\n0\n0\n...\n1\n1\n0\n10\n2\n2\n4\n2\n5\n0\n\n\nBlocked Driveway\n50\n3436\n159\n514\n138\n3\n17062\n36445\n177\n0\n...\n1202\n1946\n330\n2845\n278\n86\n279\n1363\n2038\n27\n\n\n\n\n5 rows × 2808 columns\n\n\n\n\n# Pivot table to get counts of complaint types for each city\ncomplaints_by_city = pd.pivot_table(data=df, index='Complaint Type', columns='City', aggfunc='size', fill_value=0)\n\ncomplaints_by_city.head()\n\n\n\n\n\n\n\nCity\nARVERNE\nASTORIA\nAstoria\nBAYSIDE\nBELLEROSE\nBREEZY POINT\nBRONX\nBROOKLYN\nCAMBRIA HEIGHTS\nCENTRAL PARK\n...\nSOUTH OZONE PARK\nSOUTH RICHMOND HILL\nSPRINGFIELD GARDENS\nSTATEN ISLAND\nSUNNYSIDE\nUnknown City\nWHITESTONE\nWOODHAVEN\nWOODSIDE\nWoodside\n\n\nComplaint Type\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAgency Issues\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n0\n0\n0\n0\n0\n8\n0\n0\n0\n0\n\n\nAnimal Abuse\n46\n170\n0\n53\n15\n2\n1971\n3191\n15\n0\n...\n74\n40\n42\n786\n40\n1\n43\n57\n111\n0\n\n\nAnimal in a Park\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\nBike/Roller/Skate Chronic\n0\n16\n0\n0\n1\n0\n22\n124\n0\n0\n...\n1\n1\n0\n10\n2\n2\n4\n2\n5\n0\n\n\nBlocked Driveway\n50\n3436\n159\n514\n138\n3\n17062\n36445\n177\n0\n...\n1202\n1946\n330\n2845\n278\n86\n279\n1363\n2038\n27\n\n\n\n\n5 rows × 54 columns\n\n\n\n\n# Plot the pivot table as a bar chart\nsns.set_style(\"whitegrid\")\nplt.figure(figsize=(20,10))\nsns.barplot(data=complaints_by_city, palette='Set3')\nplt.xticks(rotation=90, fontsize=12)\nplt.yticks(fontsize=12)\nplt.xlabel('City', fontsize=16)\nplt.ylabel('Complaint Type Count', fontsize=16)\nplt.title('Complaint Types in Each City', fontsize=20)\nplt.legend(loc='upper right', fontsize=14)\nplt.show()"
  },
  {
    "objectID": "projects/customer-service-analysis/index.html#statistical-analysis-of-request_closing_time",
    "href": "projects/customer-service-analysis/index.html#statistical-analysis-of-request_closing_time",
    "title": "NYC 311 Customer Service Requests Analysis",
    "section": "Statistical Analysis of Request_Closing_Time",
    "text": "Statistical Analysis of Request_Closing_Time\n\n# Calculating the response time in hrs and min.\n\ndf['request_closing_time_hrs'] = df['Closed Date'].values - df['Created Date'].values\ndf['request_closing_time_min'] = df['request_closing_time_hrs']/np.timedelta64(1,'m')\n\ndf.head()\n\n\n\n\n\n\n\n\nUnique Key\nCreated Date\nClosed Date\nAgency\nAgency Name\nComplaint Type\nDescriptor\nLocation Type\nIncident Zip\nIncident Address\n...\nBridge Highway Segment\nGarage Lot Name\nFerry Direction\nFerry Terminal Name\nLatitude\nLongitude\nLocation\nrequest_closing_time_sec\nrequest_closing_time_hrs\nrequest_closing_time_min\n\n\n\n\n0\n32310363\n2015-12-31 23:59:45\n2016-01-01 00:55:15\nNYPD\nNew York City Police Department\nNoise - Street/Sidewalk\nLoud Music/Party\nStreet/Sidewalk\n10034.0\n71 VERMILYEA AVENUE\n...\nNaN\nNaN\nNaN\nNaN\n40.865682\n-73.923501\n(40.86568153633767, -73.92350095571744)\n3330.0\n0 days 00:55:30\n55.500000\n\n\n1\n32309934\n2015-12-31 23:59:44\n2016-01-01 01:26:57\nNYPD\nNew York City Police Department\nBlocked Driveway\nNo Access\nStreet/Sidewalk\n11105.0\n27-07 23 AVENUE\n...\nNaN\nNaN\nNaN\nNaN\n40.775945\n-73.915094\n(40.775945312321085, -73.91509393898605)\n5233.0\n0 days 01:27:13\n87.216667\n\n\n2\n32309159\n2015-12-31 23:59:29\n2016-01-01 04:51:03\nNYPD\nNew York City Police Department\nBlocked Driveway\nNo Access\nStreet/Sidewalk\n10458.0\n2897 VALENTINE AVENUE\n...\nNaN\nNaN\nNaN\nNaN\n40.870325\n-73.888525\n(40.870324522111424, -73.88852464418646)\n17494.0\n0 days 04:51:34\n291.566667\n\n\n3\n32305098\n2015-12-31 23:57:46\n2016-01-01 07:43:13\nNYPD\nNew York City Police Department\nIllegal Parking\nCommercial Overnight Parking\nStreet/Sidewalk\n10461.0\n2940 BAISLEY AVENUE\n...\nNaN\nNaN\nNaN\nNaN\n40.835994\n-73.828379\n(40.83599404683083, -73.82837939584206)\n27927.0\n0 days 07:45:27\n465.450000\n\n\n4\n32306529\n2015-12-31 23:56:58\n2016-01-01 03:24:42\nNYPD\nNew York City Police Department\nIllegal Parking\nBlocked Sidewalk\nStreet/Sidewalk\n11373.0\n87-14 57 ROAD\n...\nNaN\nNaN\nNaN\nNaN\n40.733060\n-73.874170\n(40.733059618956815, -73.87416975810375)\n12464.0\n0 days 03:27:44\n207.733333\n\n\n\n\n5 rows × 56 columns\n\n\n\n\nplt.figure(figsize=(10,5))\nsns.barplot(x='Borough',y='request_closing_time_min',data=df)\nplt.title(\"Cities with avg. complaint resolved time\", fontsize=20)\nplt.xlabel(\"Borough\")\nplt.ylabel(\"Avg. complaints resolved time(min)\", labelpad=30)\nplt.show()\n\n\n\n\n\n\n\n\n\n# Calculate the average closing time by city\navg_closing_time_per_city = df.groupby('City')['request_closing_time_min'].mean().sort_values()\n\navg_closing_time_per_city\n\nCity\nARVERNE                137.840605\nROCKAWAY PARK          139.602908\nLITTLE NECK            155.031437\nOAKLAND GARDENS        156.240167\nBAYSIDE                160.062978\nFAR ROCKAWAY           161.193068\nNEW YORK               175.343723\nFLUSHING               177.446478\nFOREST HILLS           184.097636\nWHITESTONE             187.976467\nCORONA                 188.984584\nCOLLEGE POINT          190.393782\nJACKSON HEIGHTS        190.885368\nELMHURST               194.108392\nFRESH MEADOWS          200.741045\nREGO PARK              202.462138\nBREEZY POINT           205.197849\nEAST ELMHURST          206.801481\nCENTRAL PARK           206.921364\nSTATEN ISLAND          228.038305\nBROOKLYN               236.607935\nHoward Beach           241.750000\nAstoria                242.452302\nLong Island City       245.388922\nASTORIA                265.236501\nRIDGEWOOD              268.285547\nSAINT ALBANS           271.040767\nEast Elmhurst          273.630556\nWoodside               281.455622\nKEW GARDENS            283.319775\nJAMAICA                305.346459\nSOUTH OZONE PARK       308.283046\nSOUTH RICHMOND HILL    318.020470\nWOODHAVEN              321.714469\nRICHMOND HILL          321.749064\nMIDDLE VILLAGE         323.290492\nOZONE PARK             328.309146\nMASPETH                328.997706\nHOLLIS                 332.061427\nHOWARD BEACH           346.959615\nBRONX                  353.116425\nLONG ISLAND CITY       367.326726\nSUNNYSIDE              380.744297\nWOODSIDE               389.758733\nNEW HYDE PARK          423.396512\nGLEN OAKS              501.653463\nSPRINGFIELD GARDENS    510.113239\nCAMBRIA HEIGHTS        542.883117\nUnknown City           556.662562\nROSEDALE               569.194745\nBELLEROSE              576.173614\nQUEENS VILLAGE         593.920472\nFLORAL PARK            609.812160\nQUEENS                 717.171171\nName: request_closing_time_min, dtype: float64\n\n\n\n# Create the horizontal bar chart\nfig, ax = plt.subplots(figsize=(10, 15))\nax.barh(avg_closing_time_per_city.index, avg_closing_time_per_city.values, color='teal')\n\n# Set the title and axis labels\nax.set_title('Average Request Closing Time by City')\n#ax.set_xlabel('Time Delta (seconds)')\nax.set_xlabel('Average Request Closing Time (minutes)')\nax.set_ylabel('City')\n\n# Invert the y-axis to show the cities with the highest closing times at the top\nax.invert_yaxis()\n\n# Display the plot\nplt.show()\n\n\n\n\n\n\n\n\nLet’s see the avg. response time across different types of complaints. We will also compare them across each borough.\n\n# Calculate the average closing time by complaint type\navg_closing_time_per_complaint = df.groupby('Complaint Type')['request_closing_time_min'].mean().sort_values()\n\navg_closing_time_per_complaint\n\nComplaint Type\nPosting Advertisement          121.437604\nIllegal Fireworks              168.558043\nNoise - Commercial             184.762676\nNoise - House of Worship       189.851451\nNoise - Park                   203.767592\nNoise - Street/Sidewalk        203.854924\nTraffic                        205.152002\nDisorderly Youth               206.062487\nNoise - Vehicle                209.363334\nUrinating in Public            215.988222\nBike/Roller/Skate Chronic      218.728140\nDrinking                       230.355009\nVending                        239.437973\nSqueegee                       242.670833\nHomeless Encampment            257.523075\nIllegal Parking                260.840595\nPanhandling                    264.225846\nBlocked Driveway               270.542025\nAnimal Abuse                   300.542601\nAgency Issues                  304.818750\nGraffiti                       387.939066\nDerelict Vehicle               422.660002\nAnimal in a Park             20210.566667\nName: request_closing_time_min, dtype: float64\n\n\n\n# Create the horizontal bar chart\nfig, ax = plt.subplots(figsize=(10, 15))\nax.barh(avg_closing_time_per_complaint.index, avg_closing_time_per_complaint.values, color='orange')\n\n# Set the title and axis labels\nax.set_title('Average Request Closing Time by Complaint')\n#ax.set_xlabel('Time Delta (seconds)')\nax.set_xlabel('Average Request Closing Time (minutes)')\nax.set_ylabel('Complaint Type')\n\n# Invert the y-axis to show the cities with the highest closing times at the top\nax.invert_yaxis()\n\n# Display the plot\nplt.show()\n\n\n\n\n\n\n\n\nHere you can see that the Animal in a Park takes almost approximately 2 weeks to resolve. Other complaint types are more frequent where Posting Advertisement took the fewest amount of time and Derelict Vehicle is responded slower than others.\n\n# Create a list of boroughs\nboroughs = ['BRONX', 'BROOKLYN', 'MANHATTAN', 'QUEENS', 'STATEN ISLAND', 'Unspecified']\n\n# Create a figure with 5 subplots\nfig, axs = plt.subplots(nrows=2, ncols=3, figsize=(16, 10))\n\n# Set the title of the figure\nfig.suptitle('Average Response Time for Complaint Types by Borough', fontsize=16)\n\n# Loop through each borough and create a subplot\nfor i, borough in enumerate(boroughs):\n    # Calculate the average response time for each complaint type in the current borough\n    borough_df = df[df['Borough'] == borough].groupby('Complaint Type')['request_closing_time_min'].mean().sort_values(ascending=False)\n\n    # Create a subplot for the current borough\n    ax = axs[i//3, i%3]\n\n    # Set the title and x/y axis labels for the subplot\n    ax.set_title(borough)\n    ax.set_xlabel('Average Response Time (in minutes)')\n    ax.set_ylabel('Complaint Type')\n\n    # Create a horizontal bar chart for the average response time for each complaint type in the current borough\n    ax.barh(borough_df.index, borough_df.values, color='cornflowerblue')\n\n    # Set the x-axis limits\n    ax.set_xlim(0, 3000)\n\n    # Set the y-axis tick labels to be left-aligned\n    ax.tick_params(axis='y', which='major', pad=10, left=True)\n\n# Adjust the spacing between the subplots\nplt.subplots_adjust(left=0.1, bottom=0.1, right=0.9, top=0.85, wspace=0.4, hspace=0.5)\n\n# Display the plot\nplt.show()\n\n\n\n\n\n\n\n\n\nHypothesis Testing\n\nplt.figure(figsize=(12,8)) # set the size of the plot\n\nbxp = sns.boxplot(x=\"Complaint Type\", y=\"request_closing_time_min\", data=df)\n\nplt.xticks(rotation=90) # rotate x-axis labels for readability\nplt.ylim((0,2000))\nplt.title('Request Closing Time vs. Complaint Type') # add title\nplt.xlabel('Complaint Type') # add x-axis label\nplt.ylabel('Request Closing Time (in min)') # add y-axis label\n\nplt.show() # show the plot\n\n\n\n\n\n\n\n\nLet’s identify the relationship between Complaint Type and Request_Closing_Time using p-values.\n\nimport scipy.stats as stats\n\n# Subset the data to only include relevant columns\ndf_subset = df[['Complaint Type', 'request_closing_time_min']]\n\n# Drop rows with missing values\ndf_subset.dropna(inplace=True)\n\n# Create a dictionary to store the p-values for each Complaint Type\np_values = {}\n\n# Loop through each Complaint Type and perform a t-test\nfor complaint_type in df_subset['Complaint Type'].unique():\n    subset_data = df_subset[df_subset['Complaint Type'] == complaint_type]\n    _, p_value = stats.ttest_ind(subset_data['request_closing_time_min'], df_subset['request_closing_time_min'], equal_var=False)\n    p_values[complaint_type] = p_value\n\n# Print the p-values for each Complaint Type\nfor complaint_type, p_value in p_values.items():\n    print(f\"{complaint_type}: {p_value}\")\n\nNoise - Street/Sidewalk: 1.0418660815085685e-213\nBlocked Driveway: 4.0197589683838275e-60\nIllegal Parking: 1.5138895255889238e-12\nDerelict Vehicle: 0.0\nNoise - Commercial: 0.0\nNoise - House of Worship: 1.936694912503301e-14\nPosting Advertisement: 5.705156559333243e-84\nNoise - Vehicle: 2.5199177802871664e-98\nAnimal Abuse: 5.499498875777252e-26\nVending: 0.004485741820533039\nTraffic: 9.456336836510554e-30\nDrinking: 0.008276021427926881\nBike/Roller/Skate Chronic: 0.0036117827071264017\nPanhandling: 0.6839990056391407\nNoise - Park: 3.112919243953218e-36\nHomeless Encampment: 0.21728278181990512\nUrinating in Public: 0.002482188862579256\nGraffiti: 0.00036920602249336374\nDisorderly Youth: 0.0002219206596024413\nIllegal Fireworks: 1.0221564314184692e-06\nAgency Issues: 0.521792708186724\nSqueegee: 0.9199000703670601\nAnimal in a Park: nan\n\n\nwe create a contingency table using pd.crosstab() to count the number of complaints for each complaint type and city. Then, we use chi2_contingency() from the scipy.stats library to perform the chi-square test on the contingency table. Finally, we print the results including the chi-square value, p-value, degrees of freedom, and expected values.\nThe null hypothesis for the chi-square test is that there is no association between the two variables (in this case, Complaint Type and City), while the alternative hypothesis is that there is some association. If the p-value is less than our chosen significance level (e.g., 0.05), we reject the null hypothesis and conclude that there is evidence of a significant association between the variables.\n\n# Import required libraries\nfrom scipy.stats import chi2_contingency\n\n# Create a contingency table\ncont_table = pd.crosstab(df['Complaint Type'], df['City'])\n\n# Perform the chi-square test\nchi2, pval, dof, expected = chi2_contingency(cont_table)\n\n# Set significance level\nalpha = 0.05\n\n# Print results\nprint(f\"Chi-square value: {chi2}\")\nprint(f\"P-value: {pval}\")\nprint(f\"Degrees of freedom: {dof}\")\nprint(\"Expected frequencies:\")\nprint(expected)\nprint(\"\\n\")\n\n# Check if p-value is less than alpha\nif p_value &lt; alpha:\n    print(\"There is a significant difference between the two groups.\")\nelse:\n    print(\"There is no significant difference between the two groups.\")\n\nChi-square value: 145971.80461890675\nP-value: 0.0\nDegrees of freedom: 1166\nExpected frequencies:\n[[5.72095964e-03 1.76510380e-01 1.99902258e-02 ... 6.85189838e-02\n  9.62402361e-02 3.66671545e-03]\n [7.53021313e+00 2.32331788e+02 2.63121347e+01 ... 9.01881124e+01\n  1.26676211e+02 4.82631421e+00]\n [7.15119955e-04 2.20637975e-02 2.49877822e-03 ... 8.56487298e-03\n  1.20300295e-02 4.58339431e-04]\n ...\n [3.71576329e+00 1.14643492e+02 1.29836516e+01 ... 4.45030800e+01\n  6.25080334e+01 2.38153168e+00]\n [4.58391891e-01 1.41428942e+01 1.60171684e+00 ... 5.49008358e+00\n  7.71124892e+00 2.93795575e-01]\n [2.99277701e+00 9.23369927e+01 1.04573869e+01 ... 3.58439934e+01\n  5.03456735e+01 1.91815052e+00]]\n\n\nThere is no significant difference between the two groups."
  },
  {
    "objectID": "projects/customer-service-analysis/index.html#kruskal-wallis-h-test---one-way-anova",
    "href": "projects/customer-service-analysis/index.html#kruskal-wallis-h-test---one-way-anova",
    "title": "NYC 311 Customer Service Requests Analysis",
    "section": "Kruskal-Wallis H Test - One-way ANOVA",
    "text": "Kruskal-Wallis H Test - One-way ANOVA\nThe Kruskal-Wallis H Test is a non-parametric test, meaning that it makes no assumptions about the distribution of the data. However, it does assume that the samples are independent and that the variances of the populations are equal.\n\\[\nH_0: \\text{There is no significant difference in the mean of Request\\_Closing\\_Time across Complaint types}\n\\]\n\\[\nH_1: \\text{There is a significant difference in the mean of Request\\_Closing\\_Time across Complaint types}\n\\]\n\nfrom scipy.stats import kruskal\n\nanova_df = df[['Complaint Type', 'request_closing_time_min']]\n\nanova_df = anova_df.dropna()\n\nanova_df.head()\n\n\n\n\n\n\n\n\nComplaint Type\nrequest_closing_time_min\n\n\n\n\n0\nNoise - Street/Sidewalk\n55.500000\n\n\n1\nBlocked Driveway\n87.216667\n\n\n2\nBlocked Driveway\n291.566667\n\n\n3\nIllegal Parking\n465.450000\n\n\n4\nIllegal Parking\n207.733333\n\n\n\n\n\n\n\n\n# Create a dictionary to store the data for each complaint type\ncomplaint_types = df['Complaint Type'].unique()\ndata = {complaint_type: df.loc[df['Complaint Type'] == complaint_type, 'request_closing_time_min'] for complaint_type in complaint_types}\n\n# Perform the Kruskal-Wallis H Test\nstat, p = kruskal(*data.values())\n\n# Print the results\nprint(f\"Kruskal-Wallis H Test Results:\")\nprint(f\"Statistic: {stat:.4f}\")\nprint(f\"P-value: {p:.4f}\")\n\nKruskal-Wallis H Test Results:\nStatistic: 11988.2694\nP-value: 0.0000\n\n\nSince the p value for the Complaint is less than 0.01, we accept alternate hypothesis testing (i.e. there’s a significant difference in the mean response time of different types of complaints)"
  },
  {
    "objectID": "projects/customer-service-analysis/index.html#observations-and-outcomes",
    "href": "projects/customer-service-analysis/index.html#observations-and-outcomes",
    "title": "NYC 311 Customer Service Requests Analysis",
    "section": "Observations and Outcomes",
    "text": "Observations and Outcomes\nHere are some of the major conclusions that can be drawn from the 311 Customer Service NYC dataset:\n\nThe most common complaint types across all boroughs are related to street parking conditions and noise.\nBrooklyn has the highest number of complaints compared to other boroughs, while Queens takes the longest to resolve complaints.\nThe average response time varies depending on the complaint type and borough, with some types and boroughs experiencing longer response times than others.\nThe scatter and hexbin plots for Brooklyn illustrate the relationships between different complaint types and how they are clustered together.\nThe box plot shows significant variation in response times across different complaint types.\nHypothesis testing using the Kruskal-Wallis H Test and one-way ANOVA suggests that there are statistically significant differences in response times among different complaint types.\nThe p-value and chi-squared test suggest that there is a significant association between certain complaint types and boroughs.\nOverall, the analysis of the 311 customer service dataset provides valuable insights into common complaints and response times across boroughs, which can help inform decisions on resource allocation and policy changes."
  },
  {
    "objectID": "projects/face-recognition/index.html#project-description",
    "href": "projects/face-recognition/index.html#project-description",
    "title": "Face Recognition using Convolutional Neural Networks",
    "section": "Project Description",
    "text": "Project Description\nFacial recognition technology has numerous applications in security, authentication, and personalization systems. This project implements a Convolutional Neural Network (CNN) to accurately identify individuals from facial images using the ORL database of faces."
  },
  {
    "objectID": "projects/face-recognition/index.html#import-the-relevant-packages-and-necessary-dependencies",
    "href": "projects/face-recognition/index.html#import-the-relevant-packages-and-necessary-dependencies",
    "title": "Face Recognition using Convolutional Neural Networks",
    "section": "Import the relevant packages and necessary dependencies",
    "text": "Import the relevant packages and necessary dependencies\n\n# Python built-in libraries\nfrom pathlib import Path\n\n# Data pre-processing and visualization\nimport cv2\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Sci-kit learn functions\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\n# For model training and compilation\nfrom keras import layers\nfrom keras.utils import to_categorical\nfrom keras.models import Sequential\nfrom keras.callbacks import EarlyStopping\n\n# suppress warnings output messages\nimport warnings\nwarnings.filterwarnings('ignore')\n\n2025-04-24 08:40:04.323420: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.\n2025-04-24 08:40:04.325411: I external/local_xla/xla/tsl/cuda/cudart_stub.cc:32] Could not find cuda drivers on your machine, GPU will not be used.\n2025-04-24 08:40:04.329396: I external/local_xla/xla/tsl/cuda/cudart_stub.cc:32] Could not find cuda drivers on your machine, GPU will not be used.\n2025-04-24 08:40:04.338178: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:467] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\nWARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nE0000 00:00:1745502004.352729   13156 cuda_dnn.cc:8579] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\nE0000 00:00:1745502004.357495   13156 cuda_blas.cc:1407] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\nW0000 00:00:1745502004.377104   13156 computation_placer.cc:177] computation placer already registered. Please check linkage and avoid linking the same target more than once.\nW0000 00:00:1745502004.377134   13156 computation_placer.cc:177] computation placer already registered. Please check linkage and avoid linking the same target more than once.\nW0000 00:00:1745502004.377136   13156 computation_placer.cc:177] computation placer already registered. Please check linkage and avoid linking the same target more than once.\nW0000 00:00:1745502004.377137   13156 computation_placer.cc:177] computation placer already registered. Please check linkage and avoid linking the same target more than once.\n2025-04-24 08:40:04.384672: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.\nTo enable the following instructions: AVX2 AVX_VNNI FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags."
  },
  {
    "objectID": "projects/face-recognition/index.html#upload-and-import-the-data",
    "href": "projects/face-recognition/index.html#upload-and-import-the-data",
    "title": "Face Recognition using Convolutional Neural Networks",
    "section": "Upload and import the data",
    "text": "Upload and import the data\nLet’s load and normalize the images\n\nimage_dir = Path('datasets/ORL_face_database')\n\nimage_dir\n\nPosixPath('datasets/ORL_face_database')\n\n\n\n# Create empty arrays to store the training and test images and labels:\nimages = []\nlabels = []\n\n\n# Iterate over the subdirectories of the dataset (representing different classes or labels)\nfor person_dir in image_dir.iterdir():\n    if person_dir.is_dir():\n        label = int(person_dir.name[1:])\n\n        for image_file in person_dir.iterdir():\n            image = cv2.imread(str(image_file))\n            grayscale_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n            numpy_image = np.array(grayscale_image)\n\n            # Append images and labels directly to the trainX and trainY lists\n            images.append(numpy_image)\n            labels.append(label)\n\n\n# Convert the image data and labels into NumPy arrays\nimages = np.array(images)\nimages = images.astype(\"float32\") / 255  # Normalize the images\nlabels = np.array(labels)\n\n\nprint(f'normalized image data: {images[:]}')\nprint('\\n')\n# Check the shapes after modifications\nprint(f\"numpy images shape: {images.shape}\")\nprint(f\"labels: {labels.shape}\")\n\nnormalized image data: [[[0.3372549  0.3529412  0.34117648 ... 0.32941177 0.33333334 0.34117648]\n  [0.3647059  0.3372549  0.34117648 ... 0.34509805 0.32941177 0.34509805]\n  [0.34901962 0.3372549  0.34509805 ... 0.34509805 0.32941177 0.34117648]\n  ...\n  [0.38039216 0.40392157 0.49411765 ... 0.42745098 0.36862746 0.31764707]\n  [0.69411767 0.7137255  0.7490196  ... 0.5294118  0.49803922 0.52156866]\n  [0.79607844 0.79607844 0.79607844 ... 0.6        0.5568628  0.54509807]]\n\n [[0.37254903 0.34901962 0.34901962 ... 0.40392157 0.4392157  0.35686275]\n  [0.37254903 0.37254903 0.3647059  ... 0.34901962 0.41960785 0.43529412]\n  [0.35686275 0.37254903 0.36862746 ... 0.3137255  0.3882353  0.39215687]\n  ...\n  [0.6784314  0.81960785 0.8156863  ... 0.22352941 0.21176471 0.21176471]\n  [0.7058824  0.81960785 0.81960785 ... 0.21176471 0.22745098 0.21176471]\n  [0.72156864 0.8117647  0.8156863  ... 0.16862746 0.21568628 0.21568628]]\n\n [[0.35686275 0.3254902  0.27450982 ... 0.63529414 0.6313726  0.6156863 ]\n  [0.32156864 0.31764707 0.28235295 ... 0.5803922  0.64705884 0.63529414]\n  [0.3372549  0.2901961  0.27450982 ... 0.5411765  0.6431373  0.65882355]\n  ...\n  [0.21176471 0.19607843 0.20392157 ... 0.6117647  0.70980394 0.75686276]\n  [0.20392157 0.2        0.2        ... 0.64705884 0.7294118  0.7647059 ]\n  [0.1882353  0.21960784 0.1764706  ... 0.67058825 0.7372549  0.74509805]]\n\n ...\n\n [[0.52156866 0.5058824  0.52156866 ... 0.49411765 0.49411765 0.4862745 ]\n  [0.5058824  0.5176471  0.5137255  ... 0.49019608 0.5019608  0.49411765]\n  [0.5176471  0.5058824  0.5137255  ... 0.49411765 0.49019608 0.49803922]\n  ...\n  [0.11764706 0.12156863 0.07843138 ... 0.08627451 0.12941177 0.1254902 ]\n  [0.11764706 0.10196079 0.09019608 ... 0.08235294 0.11372549 0.12156863]\n  [0.09019608 0.11764706 0.08235294 ... 0.05882353 0.11372549 0.10196079]]\n\n [[0.53333336 0.53333336 0.53333336 ... 0.5019608  0.52156866 0.52156866]\n  [0.5372549  0.5372549  0.5411765  ... 0.50980395 0.52156866 0.49803922]\n  [0.5254902  0.54901963 0.5372549  ... 0.5254902  0.52156866 0.5019608 ]\n  ...\n  [0.23137255 0.23529412 0.21568628 ... 0.0627451  0.08627451 0.08627451]\n  [0.25490198 0.23921569 0.1882353  ... 0.06666667 0.08627451 0.07450981]\n  [0.23529412 0.1882353  0.21960784 ... 0.07450981 0.07843138 0.08235294]]\n\n [[0.5254902  0.5411765  0.53333336 ... 0.5058824  0.5137255  0.49803922]\n  [0.5254902  0.5294118  0.5294118  ... 0.50980395 0.50980395 0.5058824 ]\n  [0.52156866 0.5254902  0.5294118  ... 0.49803922 0.5176471  0.52156866]\n  ...\n  [0.09803922 0.07450981 0.08235294 ... 0.10588235 0.22352941 0.31764707]\n  [0.10196079 0.08627451 0.07450981 ... 0.11764706 0.2784314  0.31764707]\n  [0.08235294 0.09803922 0.08627451 ... 0.21568628 0.30980393 0.31764707]]]\n\n\nnumpy images shape: (400, 112, 92)\nlabels: (400,)"
  },
  {
    "objectID": "projects/face-recognition/index.html#lets-visualize-the-images-and-train-and-test-dataset",
    "href": "projects/face-recognition/index.html#lets-visualize-the-images-and-train-and-test-dataset",
    "title": "Face Recognition using Convolutional Neural Networks",
    "section": "Let’s visualize the Images and Train and Test Dataset",
    "text": "Let’s visualize the Images and Train and Test Dataset\n\n# Define the number of images you want to plot\nnum_images_to_plot = 25  # Change this number as needed\n\n# Reshape the images to (112, 92)\n# Assuming x_train has shape (num_samples, 112, 92)\nreshaped_images = images[:num_images_to_plot].reshape(-1, 112, 92)\n\n# Plot the images\nplt.figure(figsize=(12, 12))\nfor i in range(num_images_to_plot):\n    plt.subplot(5, 5, i + 1)  # Change the subplot layout as per your preference\n    plt.imshow(reshaped_images[i], cmap='gray')\n    # Set the title as per the corresponding label\n    plt.title(f'Subject Person: {labels[i]}\\n ({reshaped_images[i].shape[1]}, {reshaped_images[i].shape[0]})')\n    #plt.axis('off')  # Hide axes\nplt.tight_layout()\nplt.show()"
  },
  {
    "objectID": "projects/face-recognition/index.html#split-the-data-into-train-test-and-validation-sets",
    "href": "projects/face-recognition/index.html#split-the-data-into-train-test-and-validation-sets",
    "title": "Face Recognition using Convolutional Neural Networks",
    "section": "Split the Data into Train, Test and Validation Sets",
    "text": "Split the Data into Train, Test and Validation Sets\n\nX_data = images # store images in X_data\nY_data = labels.reshape(-1,1) # store labels in Y_data\n\n# Find unique classes in the labels\nunique_labels = np.unique(Y_data)\n\nunique_labels\n\narray([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,\n       35, 36, 37, 38, 39, 40])\n\n\n\n# Reindex the labels to start from 0\nlabel_mapping = {label: index for index, label in enumerate(unique_labels)}\nY_data_reindexed = np.array([label_mapping[label[0]] for label in Y_data])\n\n# Verify the unique values in the reindexed labels\nprint(np.unique(Y_data_reindexed))\n\n[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\n 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39]\n\n\n\nInitial Training and Test Split:\n\nInitially, you’ve split the data into x_train (training data) and x_test (test data).\n\nCreate Validation Set:\n\nTo generate a validation set from the existing training data (x_train), you can perform another split. This split will create a subset designated for validation purposes.\n\n\n\n# take a random sample: 80% of the data for the test set\n\n# The resulting variables will represent:\n# x_train: Training data\n# y_train: Corresponding training labels\n# x_test: Test data\n# y_test: Corresponding test labels\n\nx_train, x_test, y_train, y_test = train_test_split(X_data, Y_data_reindexed, test_size=0.2, random_state=42)\n\nprint(f'x_train: {x_train.shape}')\nprint(f'x_test: {x_test.shape}')\nprint(f'y_train: {y_train.shape}')\nprint(f'y_test: {y_test.shape}')\n\nx_train: (320, 112, 92)\nx_test: (80, 112, 92)\ny_train: (320,)\ny_test: (80,)\n\n\n\n# Split the training data further into x_train, x_val, y_train, y_val\n\n# The resulting variables will represent:\n# x_val: Validation data\n# y_val: Corresponding validation labels\n\nx_train, x_val, y_train, y_val = train_test_split(x_train, y_train, test_size=0.05, random_state=42)\n\nprint(f'x_train: {x_train.shape}')\nprint(f'x_val: {x_val.shape}')\nprint(f'y_train: {y_train.shape}')\nprint(f'y_val: {y_val.shape}')\n\nx_train: (304, 112, 92)\nx_val: (16, 112, 92)\ny_train: (304,)\ny_val: (16,)\n\n\n\nx_train, y_train: These represent the primary training dataset and labels, comprising 60% of the original data (80% of 80%).\nx_test, y_test: These represent the test dataset and labels, comprising 20% of the original data.\nx_val, y_val: These represent the validation dataset and labels, comprising 5% of the original dataset.\n\n\nCheck the images are equal sizes to prepare the data for input to the CNN model\n\n# Assuming x_train and x_val contain the image data\n# Reshape the input data to match the expected input shape\nx_train = x_train.reshape(-1, 112, 92, 1)\nx_test = x_test.reshape(-1, 112, 92, 1)\nx_val = x_val.reshape(-1, 112, 92, 1)\ninput_shape = (x_train.shape[1], x_train.shape[2], 1)\n\nprint(f'Input Shape: {input_shape}')\nprint(f'x_train: {x_train.shape}')\nprint(f'x_test: {x_test.shape}')\nprint(f'x_val: {x_val.shape}')\n\nInput Shape: (112, 92, 1)\nx_train: (304, 112, 92, 1)\nx_test: (80, 112, 92, 1)\nx_val: (16, 112, 92, 1)\n\n\n\n# Convert labels to categorical format\nnum_classes = len(np.unique(Y_data_reindexed))\n\n# Convert integer labels to one-hot encoded labels\ny_train_categorical = to_categorical(y_train, num_classes)\ny_test_categorical = to_categorical(y_test, num_classes)\ny_val_categorical = to_categorical(y_val, num_classes)\n\nprint(f'The number of the classes: {num_classes}')\nprint(f'y_train categorical shape: {y_train_categorical.shape}')\nprint(f'y_test categorical shape: {y_test_categorical.shape}')\nprint(f'y_val categorical shape: {y_val_categorical.shape}')\n\nThe number of the classes: 40\ny_train categorical shape: (304, 40)\ny_test categorical shape: (80, 40)\ny_val categorical shape: (16, 40)"
  },
  {
    "objectID": "projects/face-recognition/index.html#build-the-cnn-model",
    "href": "projects/face-recognition/index.html#build-the-cnn-model",
    "title": "Face Recognition using Convolutional Neural Networks",
    "section": "Build the CNN Model",
    "text": "Build the CNN Model\n\nConvolotional layer\npooling layer\nfully connected layer\n\nLet’s build a new architecture of CNN by changing the number and position of layers.\n\n# Adding the hidden layers and the output layer to our model\ncnn_model = Sequential([\nlayers.Conv2D(32, (3, 3), activation='relu', input_shape= input_shape),\nlayers.BatchNormalization(),\nlayers.MaxPooling2D((2, 2)),\n#layers.BatchNormalization(),\nlayers.Conv2D(64, (3, 3), activation='relu', input_shape= input_shape), # Additional Conv2D layer\n#layers.BatchNormalization(),\nlayers.MaxPooling2D((2, 2)),\n\n# Fully Connected\nlayers.Flatten(),\n\nlayers.Dense(256, activation='relu'),\n# Dense layers with Dropout\nlayers.Dropout(0.5),\nlayers.Dense(128, activation='relu'),\n#layers.Dropout(0.5),\nlayers.Dense(num_classes, activation='softmax')\n])\n\n# Display the summary of the model architecture and the number of parameters\ncnn_model.summary()\n\n2025-04-24 08:40:08.129008: E external/local_xla/xla/stream_executor/cuda/cuda_platform.cc:51] failed call to cuInit: INTERNAL: CUDA error: Failed call to cuInit: UNKNOWN ERROR (303)\n\n\nModel: \"sequential\"\n\n\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃ Layer (type)                    ┃ Output Shape           ┃       Param # ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ conv2d (Conv2D)                 │ (None, 110, 90, 32)    │           320 │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ batch_normalization             │ (None, 110, 90, 32)    │           128 │\n│ (BatchNormalization)            │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ max_pooling2d (MaxPooling2D)    │ (None, 55, 45, 32)     │             0 │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_1 (Conv2D)               │ (None, 53, 43, 64)     │        18,496 │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ max_pooling2d_1 (MaxPooling2D)  │ (None, 26, 21, 64)     │             0 │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ flatten (Flatten)               │ (None, 34944)          │             0 │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense (Dense)                   │ (None, 256)            │     8,945,920 │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout (Dropout)               │ (None, 256)            │             0 │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_1 (Dense)                 │ (None, 128)            │        32,896 │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_2 (Dense)                 │ (None, 40)             │         5,160 │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n\n\n\n Total params: 9,002,920 (34.34 MB)\n\n\n\n Trainable params: 9,002,856 (34.34 MB)\n\n\n\n Non-trainable params: 64 (256.00 B)\n\n\n\n\n# Compile the model\ncnn_model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])"
  },
  {
    "objectID": "projects/face-recognition/index.html#train-the-model",
    "href": "projects/face-recognition/index.html#train-the-model",
    "title": "Face Recognition using Convolutional Neural Networks",
    "section": "Train the Model",
    "text": "Train the Model\nTrain the model with 100 epochs and we’ll plot training loss and accuracy against epochs. We want to monitor the validation loss at each epoch and after the validation loss has not improved after 10 epochs, training is interrupted.\n\n# Define the early stopping callback\nearly_stopping = EarlyStopping(monitor='val_loss',\n                               patience=10,\n                               restore_best_weights=True)\n\n\nhistory = cnn_model.fit(np.array(x_train), y_train_categorical,\n                        epochs=100,\n                        verbose=2,\n                        validation_data=(np.array(x_val), y_val_categorical),\n                        callbacks=[early_stopping])\n\nEpoch 1/100\n10/10 - 3s - 267ms/step - accuracy: 0.0230 - loss: 5.9299 - val_accuracy: 0.1250 - val_loss: 3.6867\nEpoch 2/100\n10/10 - 1s - 111ms/step - accuracy: 0.0987 - loss: 3.5003 - val_accuracy: 0.0000e+00 - val_loss: 3.6894\nEpoch 3/100\n10/10 - 1s - 111ms/step - accuracy: 0.1809 - loss: 3.1518 - val_accuracy: 0.0000e+00 - val_loss: 3.6889\nEpoch 4/100\n10/10 - 1s - 113ms/step - accuracy: 0.3520 - loss: 2.6107 - val_accuracy: 0.0000e+00 - val_loss: 3.6785\nEpoch 5/100\n10/10 - 4s - 417ms/step - accuracy: 0.4112 - loss: 2.1143 - val_accuracy: 0.0625 - val_loss: 3.6438\nEpoch 6/100\n10/10 - 1s - 113ms/step - accuracy: 0.5329 - loss: 1.6213 - val_accuracy: 0.0625 - val_loss: 3.6190\nEpoch 7/100\n10/10 - 1s - 111ms/step - accuracy: 0.7039 - loss: 1.0945 - val_accuracy: 0.0625 - val_loss: 3.6088\nEpoch 8/100\n10/10 - 1s - 115ms/step - accuracy: 0.6776 - loss: 1.0109 - val_accuracy: 0.0625 - val_loss: 3.5772\nEpoch 9/100\n10/10 - 1s - 114ms/step - accuracy: 0.7730 - loss: 0.7799 - val_accuracy: 0.0000e+00 - val_loss: 3.5266\nEpoch 10/100\n10/10 - 1s - 113ms/step - accuracy: 0.7434 - loss: 0.7901 - val_accuracy: 0.1875 - val_loss: 3.5233\nEpoch 11/100\n10/10 - 1s - 111ms/step - accuracy: 0.8783 - loss: 0.4624 - val_accuracy: 0.1250 - val_loss: 3.4865\nEpoch 12/100\n10/10 - 1s - 109ms/step - accuracy: 0.8586 - loss: 0.4446 - val_accuracy: 0.3125 - val_loss: 3.4084\nEpoch 13/100\n10/10 - 1s - 109ms/step - accuracy: 0.8520 - loss: 0.4221 - val_accuracy: 0.2500 - val_loss: 3.4584\nEpoch 14/100\n10/10 - 1s - 111ms/step - accuracy: 0.8783 - loss: 0.4136 - val_accuracy: 0.3750 - val_loss: 3.4547\nEpoch 15/100\n10/10 - 1s - 108ms/step - accuracy: 0.8914 - loss: 0.3152 - val_accuracy: 0.3125 - val_loss: 3.4135\nEpoch 16/100\n10/10 - 1s - 111ms/step - accuracy: 0.9079 - loss: 0.3323 - val_accuracy: 0.5000 - val_loss: 3.3642\nEpoch 17/100\n10/10 - 1s - 109ms/step - accuracy: 0.9243 - loss: 0.2643 - val_accuracy: 0.5000 - val_loss: 3.3989\nEpoch 18/100\n10/10 - 1s - 114ms/step - accuracy: 0.8980 - loss: 0.3166 - val_accuracy: 0.6250 - val_loss: 3.3122\nEpoch 19/100\n10/10 - 1s - 110ms/step - accuracy: 0.9145 - loss: 0.2861 - val_accuracy: 0.7500 - val_loss: 3.2894\nEpoch 20/100\n10/10 - 1s - 110ms/step - accuracy: 0.9342 - loss: 0.2391 - val_accuracy: 0.8125 - val_loss: 3.2451\nEpoch 21/100\n10/10 - 1s - 109ms/step - accuracy: 0.9276 - loss: 0.2563 - val_accuracy: 0.7500 - val_loss: 3.2335\nEpoch 22/100\n10/10 - 1s - 112ms/step - accuracy: 0.9243 - loss: 0.2438 - val_accuracy: 0.6875 - val_loss: 3.2463\nEpoch 23/100\n10/10 - 1s - 115ms/step - accuracy: 0.9441 - loss: 0.2171 - val_accuracy: 0.6875 - val_loss: 3.1442\nEpoch 24/100\n10/10 - 1s - 111ms/step - accuracy: 0.9276 - loss: 0.2010 - val_accuracy: 0.8125 - val_loss: 2.9902\nEpoch 25/100\n10/10 - 1s - 109ms/step - accuracy: 0.9605 - loss: 0.1603 - val_accuracy: 0.8750 - val_loss: 2.7800\nEpoch 26/100\n10/10 - 1s - 110ms/step - accuracy: 0.9572 - loss: 0.1312 - val_accuracy: 0.7500 - val_loss: 2.7827\nEpoch 27/100\n10/10 - 1s - 110ms/step - accuracy: 0.9638 - loss: 0.1356 - val_accuracy: 0.8125 - val_loss: 2.7697\nEpoch 28/100\n10/10 - 1s - 112ms/step - accuracy: 0.9474 - loss: 0.1750 - val_accuracy: 0.8125 - val_loss: 2.6994\nEpoch 29/100\n10/10 - 1s - 110ms/step - accuracy: 0.9474 - loss: 0.1363 - val_accuracy: 0.9375 - val_loss: 2.6153\nEpoch 30/100\n10/10 - 1s - 112ms/step - accuracy: 0.9276 - loss: 0.1971 - val_accuracy: 0.8125 - val_loss: 2.3204\nEpoch 31/100\n10/10 - 1s - 116ms/step - accuracy: 0.9375 - loss: 0.2138 - val_accuracy: 0.8125 - val_loss: 2.2279\nEpoch 32/100\n10/10 - 4s - 423ms/step - accuracy: 0.9408 - loss: 0.1866 - val_accuracy: 1.0000 - val_loss: 2.0679\nEpoch 33/100\n10/10 - 1s - 116ms/step - accuracy: 0.9474 - loss: 0.1778 - val_accuracy: 0.8750 - val_loss: 2.2333\nEpoch 34/100\n10/10 - 1s - 111ms/step - accuracy: 0.9539 - loss: 0.1598 - val_accuracy: 1.0000 - val_loss: 2.3613\nEpoch 35/100\n10/10 - 1s - 113ms/step - accuracy: 0.9605 - loss: 0.1347 - val_accuracy: 1.0000 - val_loss: 2.1150\nEpoch 36/100\n10/10 - 1s - 112ms/step - accuracy: 0.9375 - loss: 0.1855 - val_accuracy: 0.9375 - val_loss: 1.9878\nEpoch 37/100\n10/10 - 1s - 114ms/step - accuracy: 0.9342 - loss: 0.2047 - val_accuracy: 1.0000 - val_loss: 1.7495\nEpoch 38/100\n10/10 - 1s - 113ms/step - accuracy: 0.9441 - loss: 0.1502 - val_accuracy: 1.0000 - val_loss: 1.2873\nEpoch 39/100\n10/10 - 1s - 122ms/step - accuracy: 0.9309 - loss: 0.1838 - val_accuracy: 0.9375 - val_loss: 1.3934\nEpoch 40/100\n10/10 - 1s - 113ms/step - accuracy: 0.9704 - loss: 0.1375 - val_accuracy: 1.0000 - val_loss: 1.6130\nEpoch 41/100\n10/10 - 1s - 110ms/step - accuracy: 0.9572 - loss: 0.1405 - val_accuracy: 1.0000 - val_loss: 1.3061\nEpoch 42/100\n10/10 - 1s - 112ms/step - accuracy: 0.9638 - loss: 0.1327 - val_accuracy: 1.0000 - val_loss: 0.9775\nEpoch 43/100\n10/10 - 1s - 114ms/step - accuracy: 0.9507 - loss: 0.1585 - val_accuracy: 1.0000 - val_loss: 1.0045\nEpoch 44/100\n10/10 - 1s - 110ms/step - accuracy: 0.9441 - loss: 0.1936 - val_accuracy: 1.0000 - val_loss: 1.1656\nEpoch 45/100\n10/10 - 1s - 110ms/step - accuracy: 0.9671 - loss: 0.0900 - val_accuracy: 1.0000 - val_loss: 0.9886\nEpoch 46/100\n10/10 - 1s - 111ms/step - accuracy: 0.9605 - loss: 0.1151 - val_accuracy: 1.0000 - val_loss: 0.6414\nEpoch 47/100\n10/10 - 1s - 115ms/step - accuracy: 0.9836 - loss: 0.0554 - val_accuracy: 0.8750 - val_loss: 0.4818\nEpoch 48/100\n10/10 - 1s - 112ms/step - accuracy: 0.9737 - loss: 0.0706 - val_accuracy: 0.9375 - val_loss: 0.3388\nEpoch 49/100\n10/10 - 1s - 109ms/step - accuracy: 0.9770 - loss: 0.0982 - val_accuracy: 1.0000 - val_loss: 0.4002\nEpoch 50/100\n10/10 - 1s - 113ms/step - accuracy: 0.9803 - loss: 0.0433 - val_accuracy: 1.0000 - val_loss: 0.3426\nEpoch 51/100\n10/10 - 1s - 118ms/step - accuracy: 0.9803 - loss: 0.0521 - val_accuracy: 1.0000 - val_loss: 0.2244\nEpoch 52/100\n10/10 - 1s - 116ms/step - accuracy: 0.9737 - loss: 0.0746 - val_accuracy: 1.0000 - val_loss: 0.1702\nEpoch 53/100\n10/10 - 1s - 115ms/step - accuracy: 0.9901 - loss: 0.0494 - val_accuracy: 1.0000 - val_loss: 0.1517\nEpoch 54/100\n10/10 - 1s - 117ms/step - accuracy: 0.9901 - loss: 0.0494 - val_accuracy: 1.0000 - val_loss: 0.1012\nEpoch 55/100\n10/10 - 1s - 120ms/step - accuracy: 0.9803 - loss: 0.0634 - val_accuracy: 1.0000 - val_loss: 0.0553\nEpoch 56/100\n10/10 - 1s - 118ms/step - accuracy: 0.9704 - loss: 0.0828 - val_accuracy: 1.0000 - val_loss: 0.0694\nEpoch 57/100\n10/10 - 1s - 116ms/step - accuracy: 0.9770 - loss: 0.0874 - val_accuracy: 1.0000 - val_loss: 0.1051\nEpoch 58/100\n10/10 - 4s - 424ms/step - accuracy: 0.9671 - loss: 0.0928 - val_accuracy: 1.0000 - val_loss: 0.1174\nEpoch 59/100\n10/10 - 1s - 112ms/step - accuracy: 0.9704 - loss: 0.0693 - val_accuracy: 1.0000 - val_loss: 0.1299\nEpoch 60/100\n10/10 - 1s - 112ms/step - accuracy: 0.9836 - loss: 0.0804 - val_accuracy: 0.9375 - val_loss: 0.1798\nEpoch 61/100\n10/10 - 1s - 114ms/step - accuracy: 0.9474 - loss: 0.1542 - val_accuracy: 1.0000 - val_loss: 0.0511\nEpoch 62/100\n10/10 - 1s - 115ms/step - accuracy: 0.9572 - loss: 0.1051 - val_accuracy: 1.0000 - val_loss: 0.0241\nEpoch 63/100\n10/10 - 1s - 112ms/step - accuracy: 0.9507 - loss: 0.1264 - val_accuracy: 1.0000 - val_loss: 0.0265\nEpoch 64/100\n10/10 - 1s - 113ms/step - accuracy: 0.9507 - loss: 0.2049 - val_accuracy: 1.0000 - val_loss: 0.0351\nEpoch 65/100\n10/10 - 1s - 112ms/step - accuracy: 0.9638 - loss: 0.1301 - val_accuracy: 1.0000 - val_loss: 0.0739\nEpoch 66/100\n10/10 - 1s - 113ms/step - accuracy: 0.9868 - loss: 0.0624 - val_accuracy: 1.0000 - val_loss: 0.0344\nEpoch 67/100\n10/10 - 1s - 112ms/step - accuracy: 0.9737 - loss: 0.0675 - val_accuracy: 1.0000 - val_loss: 0.0054\nEpoch 68/100\n10/10 - 1s - 110ms/step - accuracy: 0.9671 - loss: 0.1009 - val_accuracy: 1.0000 - val_loss: 0.0057\nEpoch 69/100\n10/10 - 1s - 110ms/step - accuracy: 0.9704 - loss: 0.0923 - val_accuracy: 1.0000 - val_loss: 0.0132\nEpoch 70/100\n10/10 - 1s - 109ms/step - accuracy: 0.9770 - loss: 0.0810 - val_accuracy: 1.0000 - val_loss: 0.0541\nEpoch 71/100\n10/10 - 1s - 115ms/step - accuracy: 0.9474 - loss: 0.1472 - val_accuracy: 1.0000 - val_loss: 0.0385\nEpoch 72/100\n10/10 - 1s - 118ms/step - accuracy: 0.9770 - loss: 0.0923 - val_accuracy: 1.0000 - val_loss: 0.0138\nEpoch 73/100\n10/10 - 1s - 126ms/step - accuracy: 0.9704 - loss: 0.0910 - val_accuracy: 1.0000 - val_loss: 0.0211\nEpoch 74/100\n10/10 - 1s - 120ms/step - accuracy: 0.9704 - loss: 0.0801 - val_accuracy: 1.0000 - val_loss: 0.0029\nEpoch 75/100\n10/10 - 1s - 114ms/step - accuracy: 0.9901 - loss: 0.0472 - val_accuracy: 1.0000 - val_loss: 4.4790e-04\nEpoch 76/100\n10/10 - 1s - 109ms/step - accuracy: 0.9704 - loss: 0.0788 - val_accuracy: 1.0000 - val_loss: 0.0059\nEpoch 77/100\n10/10 - 1s - 107ms/step - accuracy: 0.9671 - loss: 0.0848 - val_accuracy: 1.0000 - val_loss: 0.0083\nEpoch 78/100\n10/10 - 1s - 109ms/step - accuracy: 0.9803 - loss: 0.0606 - val_accuracy: 1.0000 - val_loss: 6.5273e-04\nEpoch 79/100\n10/10 - 1s - 109ms/step - accuracy: 0.9671 - loss: 0.1323 - val_accuracy: 1.0000 - val_loss: 1.6888e-04\nEpoch 80/100\n10/10 - 1s - 113ms/step - accuracy: 0.9737 - loss: 0.0758 - val_accuracy: 1.0000 - val_loss: 0.0014\nEpoch 81/100\n10/10 - 1s - 109ms/step - accuracy: 0.9704 - loss: 0.1115 - val_accuracy: 1.0000 - val_loss: 0.0137\nEpoch 82/100\n10/10 - 1s - 109ms/step - accuracy: 0.9605 - loss: 0.1072 - val_accuracy: 1.0000 - val_loss: 0.0216\nEpoch 83/100\n10/10 - 1s - 110ms/step - accuracy: 0.9605 - loss: 0.1289 - val_accuracy: 1.0000 - val_loss: 0.0178\nEpoch 84/100\n10/10 - 4s - 413ms/step - accuracy: 0.9704 - loss: 0.0818 - val_accuracy: 1.0000 - val_loss: 0.0020\nEpoch 85/100\n10/10 - 1s - 111ms/step - accuracy: 0.9836 - loss: 0.0323 - val_accuracy: 1.0000 - val_loss: 0.0018\nEpoch 86/100\n10/10 - 1s - 111ms/step - accuracy: 0.9671 - loss: 0.1149 - val_accuracy: 1.0000 - val_loss: 3.7641e-04\nEpoch 87/100\n10/10 - 1s - 115ms/step - accuracy: 0.9901 - loss: 0.0515 - val_accuracy: 1.0000 - val_loss: 0.0047\nEpoch 88/100\n10/10 - 1s - 111ms/step - accuracy: 0.9737 - loss: 0.0804 - val_accuracy: 1.0000 - val_loss: 0.0039\nEpoch 89/100\n10/10 - 1s - 114ms/step - accuracy: 0.9934 - loss: 0.0373 - val_accuracy: 1.0000 - val_loss: 0.0024"
  },
  {
    "objectID": "projects/face-recognition/index.html#evaluate-the-score",
    "href": "projects/face-recognition/index.html#evaluate-the-score",
    "title": "Face Recognition using Convolutional Neural Networks",
    "section": "Evaluate the score",
    "text": "Evaluate the score\n\nscore = cnn_model.evaluate( np.array(x_test), np.array(y_test_categorical), verbose=0)\n\nprint(f'test loss: {score[0]*100:.4f}')\nprint(f'test accuracy: {score[1]*100:.2f} %')\n\ntest loss: 22.6138\ntest accuracy: 92.50 %\n\n\n\n# Plot accuracy and loss curves\nplt.figure(figsize=(12, 4))\nplt.subplot(1, 2, 1)\nplt.plot(history.history['accuracy'], label='Training Accuracy')\nplt.plot(history.history['val_accuracy'], label='Validation Accuracy')\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy')\nplt.legend()\n\nplt.subplot(1, 2, 2)\nplt.plot(history.history['loss'], label='Training Loss')\nplt.plot(history.history['val_loss'], label='Validation Loss')\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.legend()\nplt.show()"
  },
  {
    "objectID": "projects/face-recognition/index.html#summary",
    "href": "projects/face-recognition/index.html#summary",
    "title": "Face Recognition using Convolutional Neural Networks",
    "section": "Summary",
    "text": "Summary\nTo summarize all the steps implemented to build a CNN Model for the ORL database of faces are provided in order below.\n\nData Loading and Preprocessing:\n\nImages are loaded and normalized in the range [0, 1].\nThe initial visualization ensures the images and labels are loaded correctly.\n\nTraining, Test, and Validation data splitting:\n\nThe dataset is split into training and validation sets using train_test_split() from sklearn.model_selection.\nThe split is 80% for training and 20% for test. This splitting helps in evaluating model performance while training.\nAnother split of 5% of the data is made for validation purposes. This is because the number of images in the dataset overall is very low.\n\nData Shape Check:\n\nReshaping is performed to ensure all images have the same dimensions (112x92x1) suitable for input to the CNN model.\nLabels are converted into categorical format using to_categorical() from keras.utils.\n\nCNN Model Architecture:\n\nThe defined CNN model comprises two Conv2D layers followed by MaxPooling layers.\nDense layers with ReLU activations are included, along with dropout layers for regularization to prevent overfitting.\nBatch Normalization layers are also added for better convergence during training.\n\nModel Compilation and Training:\n\nThe model is compiled with ‘adam’ optimizer and ‘categorical_crossentropy’ loss.\nModel training (fit()) is performed using the training and validation data.\nTraining history is stored to analyze the model’s performance over epochs.\n\nModel Evaluation:\n\nThe trained model is evaluated on the validation set to calculate loss and accuracy.\nFinally, accuracy and loss curves are plotted to visualize the model’s training and validation performance."
  },
  {
    "objectID": "license/index.html",
    "href": "license/index.html",
    "title": "CC BY-NC-SA 4.0 license",
    "section": "",
    "text": "©  Chaance T. Graves\nMy content is released under the CC BY NC ND 4.0 license.\n   \nYou may share and adapt this content with appropriate credit and notation of any changes. You may not use this material for any commercial purposes.\n\n\n\n\n\n\nNote\n\n\n\nNote that my Opinions expressed are solely my own and do not express the views of my employer or any organizations I am associated with."
  }
]