[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "projects/project1/index.html",
    "href": "projects/project1/index.html",
    "title": "Household Energy Consumption Analysis",
    "section": "",
    "text": "This project simulates and analyzes household energy consumption across different seasons and appliance types.\n\n\n\n\nCode\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Set random seed for reproducibility\nnp.random.seed(42)\n\n# Generate synthetic energy consumption data\nseasons = ['Winter', 'Spring', 'Summer', 'Autumn']\nappliances = ['Heating', 'Cooling', 'Lighting', 'Appliances']\n\n# Create a dictionary to store our data\nenergy_data = {\n    'Season': [],\n    'Appliance': [],\n    'Energy_Consumption': []\n}\n\n# Simulate energy consumption with seasonal variations\nfor season in seasons:\n    for appliance in appliances:\n        # Different base consumption and variance for each appliance and season\n        if appliance == 'Heating':\n            base = 50 if season in ['Winter', 'Autumn'] else 20\n            variance = 15\n        elif appliance == 'Cooling':\n            base = 50 if season in ['Summer'] else 20\n            variance = 15\n        elif appliance == 'Lighting':\n            base = 30 if season in ['Winter'] else 20\n            variance = 10\n        else:  # General Appliances\n            base = 25\n            variance = 5\n        \n        # Generate 30 data points (representing days in a month)\n        consumption = np.random.normal(base, variance, 30)\n        \n        # Add to our data structure\n        energy_data['Season'].extend([season] * 30)\n        energy_data['Appliance'].extend([appliance] * 30)\n        energy_data['Energy_Consumption'].extend(consumption)\n\n# Convert to DataFrame\ndf = pd.DataFrame(energy_data)\n\n# Box plot of energy consumption by season and appliance\nplt.figure(figsize=(12, 6))\nsns.boxplot(x='Season', y='Energy_Consumption', hue='Appliance', data=df)\nplt.title('Energy Consumption by Season and Appliance')\nplt.xlabel('Season')\nplt.ylabel('Energy Consumption (kWh)')\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()\n\n# Calculate summary statistics\nsummary = df.groupby(['Season', 'Appliance'])['Energy_Consumption'].agg(['mean', 'std']).round(2)\nprint(\"Energy Consumption Summary:\")\nprint(summary)\n\n\n\n\n\n\n\n\n\nEnergy Consumption Summary:\n                    mean    std\nSeason Appliance               \nAutumn Appliances  25.23   5.52\n       Cooling     20.43  15.06\n       Heating     53.42  14.89\n       Lighting    19.43  11.89\nSpring Appliances  25.24   5.19\n       Cooling     24.18  14.21\n       Heating     18.58  15.36\n       Lighting    20.66  10.53\nSummer Appliances  23.97   3.36\n       Cooling     51.61  13.79\n       Heating     17.85  17.38\n       Lighting    22.82   7.77\nWinter Appliances  24.90   4.54\n       Cooling     18.18  13.97\n       Heating     47.18  13.50\n       Lighting    30.13   9.92\n\n\n\n\n\n\n\nCode\n# Pivot table for easier comparison\npivot_table = df.pivot_table(\n    values='Energy_Consumption', \n    index='Season', \n    columns='Appliance', \n    aggfunc='mean'\n).round(2)\n\nplt.figure(figsize=(10, 6))\npivot_table.plot(kind='bar', ax=plt.gca())\nplt.title('Average Energy Consumption by Season and Appliance')\nplt.xlabel('Season')\nplt.ylabel('Average Energy Consumption (kWh)')\nplt.legend(title='Appliance', bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.tight_layout()\nplt.show()\n\n# Print the pivot table\nprint(\"\\nAverage Energy Consumption by Season and Appliance:\")\nprint(pivot_table)\n\n\n\n\n\n\n\n\n\n\nAverage Energy Consumption by Season and Appliance:\nAppliance  Appliances  Cooling  Heating  Lighting\nSeason                                           \nAutumn          25.23    20.43    53.42     19.43\nSpring          25.24    24.18    18.58     20.66\nSummer          23.97    51.61    17.85     22.82\nWinter          24.90    18.18    47.18     30.13\n\n\n\n\n\n\nEnergy consumption varies significantly across seasons and appliances.\nHeating and cooling show the most pronounced seasonal variations.\nThe analysis provides insights into potential energy-saving strategies.\n\n\n\n\n\nFocus on heating efficiency during winter months\nImplement smart cooling strategies in summer\nConsider energy-efficient lighting solutions"
  },
  {
    "objectID": "projects/project1/index.html#data-generation-and-initial-analysis",
    "href": "projects/project1/index.html#data-generation-and-initial-analysis",
    "title": "Household Energy Consumption Analysis",
    "section": "",
    "text": "Code\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Set random seed for reproducibility\nnp.random.seed(42)\n\n# Generate synthetic energy consumption data\nseasons = ['Winter', 'Spring', 'Summer', 'Autumn']\nappliances = ['Heating', 'Cooling', 'Lighting', 'Appliances']\n\n# Create a dictionary to store our data\nenergy_data = {\n    'Season': [],\n    'Appliance': [],\n    'Energy_Consumption': []\n}\n\n# Simulate energy consumption with seasonal variations\nfor season in seasons:\n    for appliance in appliances:\n        # Different base consumption and variance for each appliance and season\n        if appliance == 'Heating':\n            base = 50 if season in ['Winter', 'Autumn'] else 20\n            variance = 15\n        elif appliance == 'Cooling':\n            base = 50 if season in ['Summer'] else 20\n            variance = 15\n        elif appliance == 'Lighting':\n            base = 30 if season in ['Winter'] else 20\n            variance = 10\n        else:  # General Appliances\n            base = 25\n            variance = 5\n        \n        # Generate 30 data points (representing days in a month)\n        consumption = np.random.normal(base, variance, 30)\n        \n        # Add to our data structure\n        energy_data['Season'].extend([season] * 30)\n        energy_data['Appliance'].extend([appliance] * 30)\n        energy_data['Energy_Consumption'].extend(consumption)\n\n# Convert to DataFrame\ndf = pd.DataFrame(energy_data)\n\n# Box plot of energy consumption by season and appliance\nplt.figure(figsize=(12, 6))\nsns.boxplot(x='Season', y='Energy_Consumption', hue='Appliance', data=df)\nplt.title('Energy Consumption by Season and Appliance')\nplt.xlabel('Season')\nplt.ylabel('Energy Consumption (kWh)')\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()\n\n# Calculate summary statistics\nsummary = df.groupby(['Season', 'Appliance'])['Energy_Consumption'].agg(['mean', 'std']).round(2)\nprint(\"Energy Consumption Summary:\")\nprint(summary)\n\n\n\n\n\n\n\n\n\nEnergy Consumption Summary:\n                    mean    std\nSeason Appliance               \nAutumn Appliances  25.23   5.52\n       Cooling     20.43  15.06\n       Heating     53.42  14.89\n       Lighting    19.43  11.89\nSpring Appliances  25.24   5.19\n       Cooling     24.18  14.21\n       Heating     18.58  15.36\n       Lighting    20.66  10.53\nSummer Appliances  23.97   3.36\n       Cooling     51.61  13.79\n       Heating     17.85  17.38\n       Lighting    22.82   7.77\nWinter Appliances  24.90   4.54\n       Cooling     18.18  13.97\n       Heating     47.18  13.50\n       Lighting    30.13   9.92"
  },
  {
    "objectID": "projects/project1/index.html#detailed-energy-consumption-analysis",
    "href": "projects/project1/index.html#detailed-energy-consumption-analysis",
    "title": "Household Energy Consumption Analysis",
    "section": "",
    "text": "Code\n# Pivot table for easier comparison\npivot_table = df.pivot_table(\n    values='Energy_Consumption', \n    index='Season', \n    columns='Appliance', \n    aggfunc='mean'\n).round(2)\n\nplt.figure(figsize=(10, 6))\npivot_table.plot(kind='bar', ax=plt.gca())\nplt.title('Average Energy Consumption by Season and Appliance')\nplt.xlabel('Season')\nplt.ylabel('Average Energy Consumption (kWh)')\nplt.legend(title='Appliance', bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.tight_layout()\nplt.show()\n\n# Print the pivot table\nprint(\"\\nAverage Energy Consumption by Season and Appliance:\")\nprint(pivot_table)\n\n\n\n\n\n\n\n\n\n\nAverage Energy Consumption by Season and Appliance:\nAppliance  Appliances  Cooling  Heating  Lighting\nSeason                                           \nAutumn          25.23    20.43    53.42     19.43\nSpring          25.24    24.18    18.58     20.66\nSummer          23.97    51.61    17.85     22.82\nWinter          24.90    18.18    47.18     30.13"
  },
  {
    "objectID": "projects/project1/index.html#key-insights",
    "href": "projects/project1/index.html#key-insights",
    "title": "Household Energy Consumption Analysis",
    "section": "",
    "text": "Energy consumption varies significantly across seasons and appliances.\nHeating and cooling show the most pronounced seasonal variations.\nThe analysis provides insights into potential energy-saving strategies."
  },
  {
    "objectID": "projects/project1/index.html#recommendations",
    "href": "projects/project1/index.html#recommendations",
    "title": "Household Energy Consumption Analysis",
    "section": "",
    "text": "Focus on heating efficiency during winter months\nImplement smart cooling strategies in summer\nConsider energy-efficient lighting solutions"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Chaance Graves",
    "section": "",
    "text": "Welcome to my website! üëãüèæ"
  },
  {
    "objectID": "resume.html",
    "href": "resume.html",
    "title": "My Resume",
    "section": "",
    "text": "Download PDF file."
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "My Projects",
    "section": "",
    "text": "Household Energy Consumption Analysis\n\n\n\n\n\n\nChaance Graves\n\n\nNov 26, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nSynthetic Data Generation and Analysis\n\n\n\n\n\n\nChaance Graves\n\n\nNov 20, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "projects/project2/index.html",
    "href": "projects/project2/index.html",
    "title": "Synthetic Data Generation and Analysis",
    "section": "",
    "text": "This project demonstrates basic synthetic data generation and analysis using Python.\n\n\n\n\nCode\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Set random seed for reproducibility\nnp.random.seed(42)\n\n# Generate synthetic student test score data\ndef generate_student_scores(num_students=100):\n    # Simulate scores for three different subjects\n    math_scores = np.random.normal(loc=75, scale=10, size=num_students)\n    science_scores = math_scores + np.random.normal(loc=5, scale=5, size=num_students)\n    english_scores = np.random.normal(loc=70, scale=12, size=num_students)\n    \n    # Create a DataFrame\n    student_data = pd.DataFrame({\n        'Student_ID': range(1, num_students + 1),\n        'Math_Score': np.round(math_scores, 2),\n        'Science_Score': np.round(science_scores, 2),\n        'English_Score': np.round(english_scores, 2)\n    })\n    \n    return student_data\n\n# Generate the synthetic dataset\nstudents_df = generate_student_scores()\n\n# Descriptive Statistics\nprint(\"Descriptive Statistics:\")\nprint(students_df.describe())\n\n# Visualization of Score Distributions\nplt.figure(figsize=(12, 4))\n\n# Subplot 1: Histogram of Scores\nplt.subplot(1, 2, 1)\nstudents_df[['Math_Score', 'Science_Score', 'English_Score']].hist(bins=15, ax=plt.gca())\nplt.title('Distribution of Test Scores')\nplt.tight_layout()\n\n# Subplot 2: Box Plot of Scores\nplt.subplot(1, 2, 2)\nsns.boxplot(data=students_df[['Math_Score', 'Science_Score', 'English_Score']])\nplt.title('Box Plot of Test Scores')\nplt.tight_layout()\n\nplt.show()\n\n# Correlation Analysis\ncorrelation_matrix = students_df[['Math_Score', 'Science_Score', 'English_Score']].corr()\nprint(\"\\nCorrelation Matrix:\")\nprint(correlation_matrix)\n\n# Correlation Heatmap\nplt.figure(figsize=(8, 6))\nsns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', center=0)\nplt.title('Correlation Heatmap of Test Scores')\nplt.tight_layout()\nplt.show()\n\n\nDescriptive Statistics:\n       Student_ID  Math_Score  Science_Score  English_Score\ncount  100.000000  100.000000     100.000000     100.000000\nmean    50.500000   73.961600      79.072900      70.780200\nstd     29.011492    9.082117       9.664472      13.011703\nmin      1.000000   48.800000      55.190000      31.100000\n25%     25.750000   68.987500      73.195000      62.135000\n50%     50.500000   73.730000      78.040000      71.170000\n75%     75.250000   79.062500      84.557500      78.457500\nmax    100.000000   93.520000     105.220000     116.230000\n\n\n/tmp/ipykernel_170946/3181019396.py:38: UserWarning:\n\nTo output multiple subplots, the figure containing the passed axes is being cleared.\n\n\n\n\n\n\n\n\n\n\n\nCorrelation Matrix:\n               Math_Score  Science_Score  English_Score\nMath_Score       1.000000       0.872429       0.190887\nScience_Score    0.872429       1.000000       0.161229\nEnglish_Score    0.190887       0.161229       1.000000\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Calculate additional insights\ndef analyze_student_scores(df):\n    # Calculate overall performance\n    df['Average_Score'] = df[['Math_Score', 'Science_Score', 'English_Score']].mean(axis=1)\n    \n    # Identify top and bottom performers\n    top_students = df.nlargest(5, 'Average_Score')\n    bottom_students = df.nsmallest(5, 'Average_Score')\n    \n    print(\"\\nTop 5 Students:\")\n    print(top_students)\n    \n    print(\"\\nBottom 5 Students:\")\n    print(bottom_students)\n    \n    return df\n\n# Perform analysis\nstudents_df = analyze_student_scores(students_df)\n\n\n\nTop 5 Students:\n    Student_ID  Math_Score  Science_Score  English_Score  Average_Score\n20          21       89.66          98.61          97.78      95.350000\n9           10       80.43          85.05         116.23      93.903333\n6            7       90.79         105.22          76.18      90.730000\n82          83       89.78          89.42          89.03      89.410000\n31          32       93.52          98.87          72.60      88.330000\n\nBottom 5 Students:\n    Student_ID  Math_Score  Science_Score  English_Score  Average_Score\n74          75       48.80          55.19          58.22      54.070000\n62          63       63.94          74.73          31.10      56.590000\n23          24       60.75          58.74          50.65      56.713333\n44          45       60.21          66.51          55.60      60.773333\n63          64       63.04          63.93          57.71      61.560000\n\n\n\n\n\n\nDemonstrates synthetic data generation techniques\nProvides statistical analysis of generated data\nCreates visualizations to explore data distributions\nShows correlation between different subject scores\n\n\n\n\n\nUses normal distribution to simulate realistic score variations\nIntroduces correlations between subject scores\nProvides multiple perspectives on the synthetic dataset"
  },
  {
    "objectID": "projects/project2/index.html#random-data-generation-and-visualization",
    "href": "projects/project2/index.html#random-data-generation-and-visualization",
    "title": "Synthetic Data Generation and Analysis",
    "section": "",
    "text": "Code\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Set random seed for reproducibility\nnp.random.seed(42)\n\n# Generate synthetic student test score data\ndef generate_student_scores(num_students=100):\n    # Simulate scores for three different subjects\n    math_scores = np.random.normal(loc=75, scale=10, size=num_students)\n    science_scores = math_scores + np.random.normal(loc=5, scale=5, size=num_students)\n    english_scores = np.random.normal(loc=70, scale=12, size=num_students)\n    \n    # Create a DataFrame\n    student_data = pd.DataFrame({\n        'Student_ID': range(1, num_students + 1),\n        'Math_Score': np.round(math_scores, 2),\n        'Science_Score': np.round(science_scores, 2),\n        'English_Score': np.round(english_scores, 2)\n    })\n    \n    return student_data\n\n# Generate the synthetic dataset\nstudents_df = generate_student_scores()\n\n# Descriptive Statistics\nprint(\"Descriptive Statistics:\")\nprint(students_df.describe())\n\n# Visualization of Score Distributions\nplt.figure(figsize=(12, 4))\n\n# Subplot 1: Histogram of Scores\nplt.subplot(1, 2, 1)\nstudents_df[['Math_Score', 'Science_Score', 'English_Score']].hist(bins=15, ax=plt.gca())\nplt.title('Distribution of Test Scores')\nplt.tight_layout()\n\n# Subplot 2: Box Plot of Scores\nplt.subplot(1, 2, 2)\nsns.boxplot(data=students_df[['Math_Score', 'Science_Score', 'English_Score']])\nplt.title('Box Plot of Test Scores')\nplt.tight_layout()\n\nplt.show()\n\n# Correlation Analysis\ncorrelation_matrix = students_df[['Math_Score', 'Science_Score', 'English_Score']].corr()\nprint(\"\\nCorrelation Matrix:\")\nprint(correlation_matrix)\n\n# Correlation Heatmap\nplt.figure(figsize=(8, 6))\nsns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', center=0)\nplt.title('Correlation Heatmap of Test Scores')\nplt.tight_layout()\nplt.show()\n\n\nDescriptive Statistics:\n       Student_ID  Math_Score  Science_Score  English_Score\ncount  100.000000  100.000000     100.000000     100.000000\nmean    50.500000   73.961600      79.072900      70.780200\nstd     29.011492    9.082117       9.664472      13.011703\nmin      1.000000   48.800000      55.190000      31.100000\n25%     25.750000   68.987500      73.195000      62.135000\n50%     50.500000   73.730000      78.040000      71.170000\n75%     75.250000   79.062500      84.557500      78.457500\nmax    100.000000   93.520000     105.220000     116.230000\n\n\n/tmp/ipykernel_170946/3181019396.py:38: UserWarning:\n\nTo output multiple subplots, the figure containing the passed axes is being cleared.\n\n\n\n\n\n\n\n\n\n\n\nCorrelation Matrix:\n               Math_Score  Science_Score  English_Score\nMath_Score       1.000000       0.872429       0.190887\nScience_Score    0.872429       1.000000       0.161229\nEnglish_Score    0.190887       0.161229       1.000000"
  },
  {
    "objectID": "projects/project2/index.html#score-analysis-and-insights",
    "href": "projects/project2/index.html#score-analysis-and-insights",
    "title": "Synthetic Data Generation and Analysis",
    "section": "",
    "text": "Code\n# Calculate additional insights\ndef analyze_student_scores(df):\n    # Calculate overall performance\n    df['Average_Score'] = df[['Math_Score', 'Science_Score', 'English_Score']].mean(axis=1)\n    \n    # Identify top and bottom performers\n    top_students = df.nlargest(5, 'Average_Score')\n    bottom_students = df.nsmallest(5, 'Average_Score')\n    \n    print(\"\\nTop 5 Students:\")\n    print(top_students)\n    \n    print(\"\\nBottom 5 Students:\")\n    print(bottom_students)\n    \n    return df\n\n# Perform analysis\nstudents_df = analyze_student_scores(students_df)\n\n\n\nTop 5 Students:\n    Student_ID  Math_Score  Science_Score  English_Score  Average_Score\n20          21       89.66          98.61          97.78      95.350000\n9           10       80.43          85.05         116.23      93.903333\n6            7       90.79         105.22          76.18      90.730000\n82          83       89.78          89.42          89.03      89.410000\n31          32       93.52          98.87          72.60      88.330000\n\nBottom 5 Students:\n    Student_ID  Math_Score  Science_Score  English_Score  Average_Score\n74          75       48.80          55.19          58.22      54.070000\n62          63       63.94          74.73          31.10      56.590000\n23          24       60.75          58.74          50.65      56.713333\n44          45       60.21          66.51          55.60      60.773333\n63          64       63.04          63.93          57.71      61.560000"
  },
  {
    "objectID": "projects/project2/index.html#key-insights",
    "href": "projects/project2/index.html#key-insights",
    "title": "Synthetic Data Generation and Analysis",
    "section": "",
    "text": "Demonstrates synthetic data generation techniques\nProvides statistical analysis of generated data\nCreates visualizations to explore data distributions\nShows correlation between different subject scores"
  },
  {
    "objectID": "projects/project2/index.html#methodology-notes",
    "href": "projects/project2/index.html#methodology-notes",
    "title": "Synthetic Data Generation and Analysis",
    "section": "",
    "text": "Uses normal distribution to simulate realistic score variations\nIntroduces correlations between subject scores\nProvides multiple perspectives on the synthetic dataset"
  }
]