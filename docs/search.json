[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "projects/project2/index.html",
    "href": "projects/project2/index.html",
    "title": "Synthetic Data Generation and Analysis",
    "section": "",
    "text": "This project demonstrates basic synthetic data generation and analysis using Python.\n\n\n\n\nCode\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Set random seed for reproducibility\nnp.random.seed(42)\n\n# Generate synthetic student test score data\ndef generate_student_scores(num_students=100):\n    # Simulate scores for three different subjects\n    math_scores = np.random.normal(loc=75, scale=10, size=num_students)\n    science_scores = math_scores + np.random.normal(loc=5, scale=5, size=num_students)\n    english_scores = np.random.normal(loc=70, scale=12, size=num_students)\n    \n    # Create a DataFrame\n    student_data = pd.DataFrame({\n        'Student_ID': range(1, num_students + 1),\n        'Math_Score': np.round(math_scores, 2),\n        'Science_Score': np.round(science_scores, 2),\n        'English_Score': np.round(english_scores, 2)\n    })\n    \n    return student_data\n\n# Generate the synthetic dataset\nstudents_df = generate_student_scores()\n\n# Descriptive Statistics\nprint(\"Descriptive Statistics:\")\nprint(students_df.describe())\n\n# Visualization of Score Distributions\nplt.figure(figsize=(12, 4))\n\n# Subplot 1: Histogram of Scores\nplt.subplot(1, 2, 1)\nstudents_df[['Math_Score', 'Science_Score', 'English_Score']].hist(bins=15, ax=plt.gca())\nplt.title('Distribution of Test Scores')\nplt.tight_layout()\n\n# Subplot 2: Box Plot of Scores\nplt.subplot(1, 2, 2)\nsns.boxplot(data=students_df[['Math_Score', 'Science_Score', 'English_Score']])\nplt.title('Box Plot of Test Scores')\nplt.tight_layout()\n\nplt.show()\n\n# Correlation Analysis\ncorrelation_matrix = students_df[['Math_Score', 'Science_Score', 'English_Score']].corr()\nprint(\"\\nCorrelation Matrix:\")\nprint(correlation_matrix)\n\n# Correlation Heatmap\nplt.figure(figsize=(8, 6))\nsns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', center=0)\nplt.title('Correlation Heatmap of Test Scores')\nplt.tight_layout()\nplt.show()\n\n\nDescriptive Statistics:\n       Student_ID  Math_Score  Science_Score  English_Score\ncount  100.000000  100.000000     100.000000     100.000000\nmean    50.500000   73.961600      79.072900      70.780200\nstd     29.011492    9.082117       9.664472      13.011703\nmin      1.000000   48.800000      55.190000      31.100000\n25%     25.750000   68.987500      73.195000      62.135000\n50%     50.500000   73.730000      78.040000      71.170000\n75%     75.250000   79.062500      84.557500      78.457500\nmax    100.000000   93.520000     105.220000     116.230000\n\n\n/tmp/ipykernel_170946/3181019396.py:38: UserWarning:\n\nTo output multiple subplots, the figure containing the passed axes is being cleared.\n\n\n\n\n\n\n\n\n\n\n\nCorrelation Matrix:\n               Math_Score  Science_Score  English_Score\nMath_Score       1.000000       0.872429       0.190887\nScience_Score    0.872429       1.000000       0.161229\nEnglish_Score    0.190887       0.161229       1.000000\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Calculate additional insights\ndef analyze_student_scores(df):\n    # Calculate overall performance\n    df['Average_Score'] = df[['Math_Score', 'Science_Score', 'English_Score']].mean(axis=1)\n    \n    # Identify top and bottom performers\n    top_students = df.nlargest(5, 'Average_Score')\n    bottom_students = df.nsmallest(5, 'Average_Score')\n    \n    print(\"\\nTop 5 Students:\")\n    print(top_students)\n    \n    print(\"\\nBottom 5 Students:\")\n    print(bottom_students)\n    \n    return df\n\n# Perform analysis\nstudents_df = analyze_student_scores(students_df)\n\n\n\nTop 5 Students:\n    Student_ID  Math_Score  Science_Score  English_Score  Average_Score\n20          21       89.66          98.61          97.78      95.350000\n9           10       80.43          85.05         116.23      93.903333\n6            7       90.79         105.22          76.18      90.730000\n82          83       89.78          89.42          89.03      89.410000\n31          32       93.52          98.87          72.60      88.330000\n\nBottom 5 Students:\n    Student_ID  Math_Score  Science_Score  English_Score  Average_Score\n74          75       48.80          55.19          58.22      54.070000\n62          63       63.94          74.73          31.10      56.590000\n23          24       60.75          58.74          50.65      56.713333\n44          45       60.21          66.51          55.60      60.773333\n63          64       63.04          63.93          57.71      61.560000\n\n\n\n\n\n\nDemonstrates synthetic data generation techniques\nProvides statistical analysis of generated data\nCreates visualizations to explore data distributions\nShows correlation between different subject scores\n\n\n\n\n\nUses normal distribution to simulate realistic score variations\nIntroduces correlations between subject scores\nProvides multiple perspectives on the synthetic dataset"
  },
  {
    "objectID": "projects/project2/index.html#random-data-generation-and-visualization",
    "href": "projects/project2/index.html#random-data-generation-and-visualization",
    "title": "Synthetic Data Generation and Analysis",
    "section": "",
    "text": "Code\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Set random seed for reproducibility\nnp.random.seed(42)\n\n# Generate synthetic student test score data\ndef generate_student_scores(num_students=100):\n    # Simulate scores for three different subjects\n    math_scores = np.random.normal(loc=75, scale=10, size=num_students)\n    science_scores = math_scores + np.random.normal(loc=5, scale=5, size=num_students)\n    english_scores = np.random.normal(loc=70, scale=12, size=num_students)\n    \n    # Create a DataFrame\n    student_data = pd.DataFrame({\n        'Student_ID': range(1, num_students + 1),\n        'Math_Score': np.round(math_scores, 2),\n        'Science_Score': np.round(science_scores, 2),\n        'English_Score': np.round(english_scores, 2)\n    })\n    \n    return student_data\n\n# Generate the synthetic dataset\nstudents_df = generate_student_scores()\n\n# Descriptive Statistics\nprint(\"Descriptive Statistics:\")\nprint(students_df.describe())\n\n# Visualization of Score Distributions\nplt.figure(figsize=(12, 4))\n\n# Subplot 1: Histogram of Scores\nplt.subplot(1, 2, 1)\nstudents_df[['Math_Score', 'Science_Score', 'English_Score']].hist(bins=15, ax=plt.gca())\nplt.title('Distribution of Test Scores')\nplt.tight_layout()\n\n# Subplot 2: Box Plot of Scores\nplt.subplot(1, 2, 2)\nsns.boxplot(data=students_df[['Math_Score', 'Science_Score', 'English_Score']])\nplt.title('Box Plot of Test Scores')\nplt.tight_layout()\n\nplt.show()\n\n# Correlation Analysis\ncorrelation_matrix = students_df[['Math_Score', 'Science_Score', 'English_Score']].corr()\nprint(\"\\nCorrelation Matrix:\")\nprint(correlation_matrix)\n\n# Correlation Heatmap\nplt.figure(figsize=(8, 6))\nsns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', center=0)\nplt.title('Correlation Heatmap of Test Scores')\nplt.tight_layout()\nplt.show()\n\n\nDescriptive Statistics:\n       Student_ID  Math_Score  Science_Score  English_Score\ncount  100.000000  100.000000     100.000000     100.000000\nmean    50.500000   73.961600      79.072900      70.780200\nstd     29.011492    9.082117       9.664472      13.011703\nmin      1.000000   48.800000      55.190000      31.100000\n25%     25.750000   68.987500      73.195000      62.135000\n50%     50.500000   73.730000      78.040000      71.170000\n75%     75.250000   79.062500      84.557500      78.457500\nmax    100.000000   93.520000     105.220000     116.230000\n\n\n/tmp/ipykernel_170946/3181019396.py:38: UserWarning:\n\nTo output multiple subplots, the figure containing the passed axes is being cleared.\n\n\n\n\n\n\n\n\n\n\n\nCorrelation Matrix:\n               Math_Score  Science_Score  English_Score\nMath_Score       1.000000       0.872429       0.190887\nScience_Score    0.872429       1.000000       0.161229\nEnglish_Score    0.190887       0.161229       1.000000"
  },
  {
    "objectID": "projects/project2/index.html#score-analysis-and-insights",
    "href": "projects/project2/index.html#score-analysis-and-insights",
    "title": "Synthetic Data Generation and Analysis",
    "section": "",
    "text": "Code\n# Calculate additional insights\ndef analyze_student_scores(df):\n    # Calculate overall performance\n    df['Average_Score'] = df[['Math_Score', 'Science_Score', 'English_Score']].mean(axis=1)\n    \n    # Identify top and bottom performers\n    top_students = df.nlargest(5, 'Average_Score')\n    bottom_students = df.nsmallest(5, 'Average_Score')\n    \n    print(\"\\nTop 5 Students:\")\n    print(top_students)\n    \n    print(\"\\nBottom 5 Students:\")\n    print(bottom_students)\n    \n    return df\n\n# Perform analysis\nstudents_df = analyze_student_scores(students_df)\n\n\n\nTop 5 Students:\n    Student_ID  Math_Score  Science_Score  English_Score  Average_Score\n20          21       89.66          98.61          97.78      95.350000\n9           10       80.43          85.05         116.23      93.903333\n6            7       90.79         105.22          76.18      90.730000\n82          83       89.78          89.42          89.03      89.410000\n31          32       93.52          98.87          72.60      88.330000\n\nBottom 5 Students:\n    Student_ID  Math_Score  Science_Score  English_Score  Average_Score\n74          75       48.80          55.19          58.22      54.070000\n62          63       63.94          74.73          31.10      56.590000\n23          24       60.75          58.74          50.65      56.713333\n44          45       60.21          66.51          55.60      60.773333\n63          64       63.04          63.93          57.71      61.560000"
  },
  {
    "objectID": "projects/project2/index.html#key-insights",
    "href": "projects/project2/index.html#key-insights",
    "title": "Synthetic Data Generation and Analysis",
    "section": "",
    "text": "Demonstrates synthetic data generation techniques\nProvides statistical analysis of generated data\nCreates visualizations to explore data distributions\nShows correlation between different subject scores"
  },
  {
    "objectID": "projects/project2/index.html#methodology-notes",
    "href": "projects/project2/index.html#methodology-notes",
    "title": "Synthetic Data Generation and Analysis",
    "section": "",
    "text": "Uses normal distribution to simulate realistic score variations\nIntroduces correlations between subject scores\nProvides multiple perspectives on the synthetic dataset"
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "My Blog",
    "section": "",
    "text": "Welcome to my blog! We’ll embark on an a journey of learning together. I’ll be using this space to write about what I’m learning, working on, and am curious about.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nProgramming Syntax Comparisons and Examples\n\n\n\n\n\n\nresources\n\n\ncode\n\n\npython\n\n\n\nPost description\n\n\n\n\n\nNov 23, 2024\n\n\n5 min\n\n\n\n\n\n\n\n\n\n\n\n\nAwesome Sites! 😎\n\n\n\n\n\n\nresources\n\n\n\nEssential Resource Collections for Developers\n\n\n\n\n\nNov 5, 2024\n\n\n3 min\n\n\n\n\n\n\n\n\n\n\n\n\nAre you getting started learning Python? 🐍\n\n\n\n\n\n\nresources\n\n\ncode\n\n\npython\n\n\n\n\n\n\n\n\n\nJan 20, 2021\n\n\n2 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "blog/awesome/index.html",
    "href": "blog/awesome/index.html",
    "title": "Awesome Sites! 😎",
    "section": "",
    "text": "As developers, we’re constantly searching for high-quality resources to enhance our skills and discover new tools. The “awesome” lists on GitHub have become a cornerstone of community-curated knowledge sharing. These collections are meticulously maintained by passionate developers worldwide, offering carefully selected resources across various technological domains.\nThe concept started with Sindre Sorhus’s original awesome list, which has since spawned thousands of specialized collections. These lists follow strict guidelines to ensure quality and relevance, making them invaluable for both beginners and experienced developers.\n\n\n\n\n\nAwesome Machine Learning\n\nA comprehensive collection of ML frameworks, libraries, and software\nCovers multiple programming languages including Python, R, Java, and more\nIncludes sections on computer vision, natural language processing, and deep learning\n\n\n\n\n\n\nAwesome Python\n\nEssential Python frameworks, libraries, and resources\nOrganized by application domain (web development, data science, testing, etc.)\nPerfect for both Python beginners and advanced developers\n\nAwesome Rust\n\nCurated resources for Rust programming language\nApplications, development tools, and learning materials\nGreat for those interested in systems programming and performance\n\n\n\n\n\n\nAwesome Embedded\n\nResources for embedded systems development\nHardware platforms, tools, and frameworks\nEssential for IoT and hardware developers\n\nAwesome Self Hosted\n\nSoftware solutions you can host on your own servers\nAlternatives to popular cloud services\nPerfect for privacy-conscious developers and organizations\n\n\n\n\n\n\nAwesome Static Site Generators\n\nTools for building modern static websites\nFrameworks across multiple programming languages\nIncludes JAMstack resources and deployment options\n\n\n\n\n\n\nAwesome Prompts\n\nCollection of effective prompts for AI models\nBest practices for prompt engineering\nExamples for various use cases and applications\n\n\n\n\n\n\nTo keep track of changes and new additions to these collections, I recommend using Track Awesome List. This tool helps you monitor updates to your favorite awesome lists and discover new resources regularly.\n\n\n\nThese curated collections represent countless hours of community effort to organize and validate the best resources in each field. Whether you’re exploring a new technology or deepening your expertise in a familiar domain, these awesome lists are invaluable starting points for your journey.\nRemember to contribute back to these collections if you discover valuable resources that aren’t already included. The strength of these lists comes from active community participation and sharing.\n– Last updated: November 2024-"
  },
  {
    "objectID": "blog/awesome/index.html#must-bookmark-collections",
    "href": "blog/awesome/index.html#must-bookmark-collections",
    "title": "Awesome Sites! 😎",
    "section": "",
    "text": "Awesome Machine Learning\n\nA comprehensive collection of ML frameworks, libraries, and software\nCovers multiple programming languages including Python, R, Java, and more\nIncludes sections on computer vision, natural language processing, and deep learning\n\n\n\n\n\n\nAwesome Python\n\nEssential Python frameworks, libraries, and resources\nOrganized by application domain (web development, data science, testing, etc.)\nPerfect for both Python beginners and advanced developers\n\nAwesome Rust\n\nCurated resources for Rust programming language\nApplications, development tools, and learning materials\nGreat for those interested in systems programming and performance\n\n\n\n\n\n\nAwesome Embedded\n\nResources for embedded systems development\nHardware platforms, tools, and frameworks\nEssential for IoT and hardware developers\n\nAwesome Self Hosted\n\nSoftware solutions you can host on your own servers\nAlternatives to popular cloud services\nPerfect for privacy-conscious developers and organizations\n\n\n\n\n\n\nAwesome Static Site Generators\n\nTools for building modern static websites\nFrameworks across multiple programming languages\nIncludes JAMstack resources and deployment options\n\n\n\n\n\n\nAwesome Prompts\n\nCollection of effective prompts for AI models\nBest practices for prompt engineering\nExamples for various use cases and applications"
  },
  {
    "objectID": "blog/awesome/index.html#staying-updated",
    "href": "blog/awesome/index.html#staying-updated",
    "title": "Awesome Sites! 😎",
    "section": "",
    "text": "To keep track of changes and new additions to these collections, I recommend using Track Awesome List. This tool helps you monitor updates to your favorite awesome lists and discover new resources regularly."
  },
  {
    "objectID": "blog/awesome/index.html#final-thoughts",
    "href": "blog/awesome/index.html#final-thoughts",
    "title": "Awesome Sites! 😎",
    "section": "",
    "text": "These curated collections represent countless hours of community effort to organize and validate the best resources in each field. Whether you’re exploring a new technology or deepening your expertise in a familiar domain, these awesome lists are invaluable starting points for your journey.\nRemember to contribute back to these collections if you discover valuable resources that aren’t already included. The strength of these lists comes from active community participation and sharing.\n– Last updated: November 2024-"
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "My Projects",
    "section": "",
    "text": "Household Energy Consumption Analysis\n\n\n\n\n\n\nChaance Graves\n\n\nNov 26, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nSynthetic Data Generation and Analysis\n\n\n\n\n\n\nChaance Graves\n\n\nNov 20, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "resume.html",
    "href": "resume.html",
    "title": "My Resume",
    "section": "",
    "text": "Download PDF file."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Chaance T. Graves",
    "section": "",
    "text": "GitHub\n  \n  \n    \n     LinkedIn\n  \n  \n    \n     Discord\n  \n  \n    \n     Email Me\n  \n\n\n\n\nWelcome to my website! 👋🏾\n\nMy name is Chaance Graves. Welcome to my website, where I share my blog on topics and projects that I’ve worked on or still tinkering with. I’m a creative problem solver eager to implement solutions to many issues foreseen in our modern society. In addition to that, I am also a big advocate for giving back to others who aspire to follow a path like mine."
  },
  {
    "objectID": "blog/post-with-code/index.html",
    "href": "blog/post-with-code/index.html",
    "title": "Are you getting started learning Python? 🐍",
    "section": "",
    "text": "Are you new to programming? Have questions about which language would be a good one to start?\nChoosing which programming language to learn is more a personal preference depending on what project and solution you’re looking to achieve. However, for a beginner, you have lots of flexibility to experiment with which one is right for you. One programming language I enjoy working with and others have found helpful is Python. I recommend installing Python 3 to have more community support to be developed and used for years to come.\nThere are likely millions of developers worldwide using Python to build projects, tools and using it to teach others the fundamentals of programming. You can do all kinds of other fantastic work in a multitude of domains.\n\nExample applications:\n\nWeb applications\nMachine Learning / Deep learning\nAutomating weekly emails\nSetting up jobs to update a spreadsheet\netc.\n\n\n\nHelpful online resources & books\nYou can find plentiful resources to teach yourself Python or pair with a small group to work on projects!\nCodeacademy: Codeacademy offers free code tutorials that are very popular for a good reason. The tutorials should give you a good idea of what it’s like to code Python with hands-on lessons to write code.\nLearn Python the Hard Way by Zed Shaw: This book is well received and aims to teach beginners how to read and write basic Python to understand other books on Python. It is high quality which I recommend regardless of where your current skill is. You can try the free sample to see if it would work for you.\nReal Python: This website offers in-depth tutorials to learn any aspect of Python you may be curious to explore. Check it out and keep a list of articles for future reference!\nAutomate the boring stuff with Python by Al Sweigart: This is an enjoyable read and practical for anyone who is currently working a tedious, routine job! He also offers a video course provided through Udemy.\nUdemy: You can find all sorts of courses and projects offered on this online education website. They range from beginner to advanced and have instructors teaching financial topics such as predicting stock prices, data science, full-stack web development, and more.\nI’m confident your programming journey will be well on its way towards success. Feel free to discuss any other valuable resources or projects you’ve discovered learning Python. 👌🏾"
  },
  {
    "objectID": "blog/code-example-post/index.html",
    "href": "blog/code-example-post/index.html",
    "title": "Programming Syntax Comparisons and Examples",
    "section": "",
    "text": "A comparative guide for my Second Brain - Quick reference for common programming patterns across languages"
  },
  {
    "objectID": "blog/code-example-post/index.html#hello-world-examples",
    "href": "blog/code-example-post/index.html#hello-world-examples",
    "title": "Programming Syntax Comparisons and Examples",
    "section": "1. Hello World Examples",
    "text": "1. Hello World Examples\nLet’s start with the classic hello world program in each language:\n\nPython\ndef say_hello(name: str) -&gt; str:\n    return f\"Hello, {name}!\"\n\nprint(say_hello(\"World\"))\n\n\nRust\nfn say_hello(name: &str) -&gt; String {\n    format!(\"Hello, {}!\", name)\n}\n\nfn main() {\n    println!(\"{}\", say_hello(\"World\"));\n}\n\n\nJavaScript\nconst sayHello = (name) =&gt; {\n    return `Hello, ${name}!`;\n};\n\nconsole.log(sayHello(\"World\"));"
  },
  {
    "objectID": "blog/code-example-post/index.html#working-with-arrayslists",
    "href": "blog/code-example-post/index.html#working-with-arrayslists",
    "title": "Programming Syntax Comparisons and Examples",
    "section": "2. Working with Arrays/Lists",
    "text": "2. Working with Arrays/Lists\nHere’s how to perform common operations on collections:\n\nPython\n# List comprehension and filtering\nnumbers = [1, 2, 3, 4, 5]\nsquares = [x**2 for x in numbers if x % 2 == 0]\nprint(squares)  # [4, 16]\n\n# Reduce operation\nfrom functools import reduce\nsum_all = reduce(lambda x, y: x + y, numbers)\nprint(sum_all)  # 15\n\n\nRust\nfn main() {\n    let numbers = vec![1, 2, 3, 4, 5];\n    \n    // Iterator and filter\n    let squares: Vec&lt;i32&gt; = numbers\n        .iter()\n        .filter(|&x| x % 2 == 0)\n        .map(|x| x * x)\n        .collect();\n    println!(\"{:?}\", squares);  // [4, 16]\n    \n    // Sum reduction\n    let sum: i32 = numbers.iter().sum();\n    println!(\"{}\", sum);  // 15\n}\n\n\nJavaScript\nconst numbers = [1, 2, 3, 4, 5];\n\n// Array methods and arrow functions\nconst squares = numbers\n    .filter(x =&gt; x % 2 === 0)\n    .map(x =&gt; x ** 2);\nconsole.log(squares);  // [4, 16]\n\n// Reduce method\nconst sum = numbers.reduce((acc, curr) =&gt; acc + curr, 0);\nconsole.log(sum);  // 15"
  },
  {
    "objectID": "blog/code-example-post/index.html#error-handling",
    "href": "blog/code-example-post/index.html#error-handling",
    "title": "Programming Syntax Comparisons and Examples",
    "section": "3. Error Handling",
    "text": "3. Error Handling\nDifferent approaches to handling errors across languages:\n\nPython\ndef divide(a: float, b: float) -&gt; float:\n    try:\n        return a / b\n    except ZeroDivisionError:\n        raise ValueError(\"Cannot divide by zero!\")\n    except TypeError:\n        raise TypeError(\"Arguments must be numbers!\")\n\n\nRust\nfn divide(a: f64, b: f64) -&gt; Result&lt;f64, String&gt; {\n    if b == 0.0 {\n        Err(String::from(\"Cannot divide by zero!\"))\n    } else {\n        Ok(a / b)\n    }\n}\n\n\nJavaScript\nfunction divide(a, b) {\n    if (typeof a !== 'number' || typeof b !== 'number') {\n        throw new TypeError('Arguments must be numbers!');\n    }\n    if (b === 0) {\n        throw new Error('Cannot divide by zero!');\n    }\n    return a / b;\n}"
  },
  {
    "objectID": "blog/code-example-post/index.html#working-with-objectsstructs",
    "href": "blog/code-example-post/index.html#working-with-objectsstructs",
    "title": "Programming Syntax Comparisons and Examples",
    "section": "4. Working with Objects/Structs",
    "text": "4. Working with Objects/Structs\nDefining and working with custom data structures:\n\nPython\nfrom dataclasses import dataclass\nfrom typing import List\n\n@dataclass\nclass Person:\n    name: str\n    age: int\n    hobbies: List[str]\n\n    def add_hobby(self, hobby: str):\n        self.hobbies.append(hobby)\n\nperson = Person(\"Alice\", 30, [\"reading\", \"hiking\"])\nperson.add_hobby(\"painting\")\n\n\nRust\nstruct Person {\n    name: String,\n    age: u32,\n    hobbies: Vec&lt;String&gt;,\n}\n\nimpl Person {\n    fn add_hobby(&mut self, hobby: String) {\n        self.hobbies.push(hobby);\n    }\n}\n\nfn main() {\n    let mut person = Person {\n        name: String::from(\"Alice\"),\n        age: 30,\n        hobbies: vec![\n            String::from(\"reading\"),\n            String::from(\"hiking\")\n        ],\n    };\n    person.add_hobby(String::from(\"painting\"));\n}\n\n\nJavaScript\nclass Person {\n    constructor(name, age, hobbies) {\n        this.name = name;\n        this.age = age;\n        this.hobbies = hobbies;\n    }\n\n    addHobby(hobby) {\n        this.hobbies.push(hobby);\n    }\n}\n\nconst person = new Person(\"Alice\", 30, [\"reading\", \"hiking\"]);\nperson.addHobby(\"painting\");"
  },
  {
    "objectID": "blog/code-example-post/index.html#key-takeaways",
    "href": "blog/code-example-post/index.html#key-takeaways",
    "title": "Programming Syntax Comparisons and Examples",
    "section": "Key Takeaways",
    "text": "Key Takeaways\n\nPython excels in readability and has powerful list comprehensions\nRust provides strong safety guarantees and explicit error handling\nJavaScript offers flexible object handling and functional programming features"
  },
  {
    "objectID": "blog/code-example-post/index.html#notes-for-future-reference",
    "href": "blog/code-example-post/index.html#notes-for-future-reference",
    "title": "Programming Syntax Comparisons and Examples",
    "section": "Notes for Future Reference",
    "text": "Notes for Future Reference\n\nPython’s type hints are optional but helpful for documentation\nRust’s ownership system requires explicit handling of references\nJavaScript’s flexibility can be both a blessing and a curse\n\nRemember to check the official documentation for each language for best practices and more detailed explanations: - Python Docs - Rust Book - MDN JavaScript"
  },
  {
    "objectID": "projects/project1/index.html",
    "href": "projects/project1/index.html",
    "title": "Household Energy Consumption Analysis",
    "section": "",
    "text": "This project simulates and analyzes household energy consumption across different seasons and appliance types.\n\n\n\n\nCode\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Set random seed for reproducibility\nnp.random.seed(42)\n\n# Generate synthetic energy consumption data\nseasons = ['Winter', 'Spring', 'Summer', 'Autumn']\nappliances = ['Heating', 'Cooling', 'Lighting', 'Appliances']\n\n# Create a dictionary to store our data\nenergy_data = {\n    'Season': [],\n    'Appliance': [],\n    'Energy_Consumption': []\n}\n\n# Simulate energy consumption with seasonal variations\nfor season in seasons:\n    for appliance in appliances:\n        # Different base consumption and variance for each appliance and season\n        if appliance == 'Heating':\n            base = 50 if season in ['Winter', 'Autumn'] else 20\n            variance = 15\n        elif appliance == 'Cooling':\n            base = 50 if season in ['Summer'] else 20\n            variance = 15\n        elif appliance == 'Lighting':\n            base = 30 if season in ['Winter'] else 20\n            variance = 10\n        else:  # General Appliances\n            base = 25\n            variance = 5\n        \n        # Generate 30 data points (representing days in a month)\n        consumption = np.random.normal(base, variance, 30)\n        \n        # Add to our data structure\n        energy_data['Season'].extend([season] * 30)\n        energy_data['Appliance'].extend([appliance] * 30)\n        energy_data['Energy_Consumption'].extend(consumption)\n\n# Convert to DataFrame\ndf = pd.DataFrame(energy_data)\n\n# Box plot of energy consumption by season and appliance\nplt.figure(figsize=(12, 6))\nsns.boxplot(x='Season', y='Energy_Consumption', hue='Appliance', data=df)\nplt.title('Energy Consumption by Season and Appliance')\nplt.xlabel('Season')\nplt.ylabel('Energy Consumption (kWh)')\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()\n\n# Calculate summary statistics\nsummary = df.groupby(['Season', 'Appliance'])['Energy_Consumption'].agg(['mean', 'std']).round(2)\nprint(\"Energy Consumption Summary:\")\nprint(summary)\n\n\n\n\n\n\n\n\n\nEnergy Consumption Summary:\n                    mean    std\nSeason Appliance               \nAutumn Appliances  25.23   5.52\n       Cooling     20.43  15.06\n       Heating     53.42  14.89\n       Lighting    19.43  11.89\nSpring Appliances  25.24   5.19\n       Cooling     24.18  14.21\n       Heating     18.58  15.36\n       Lighting    20.66  10.53\nSummer Appliances  23.97   3.36\n       Cooling     51.61  13.79\n       Heating     17.85  17.38\n       Lighting    22.82   7.77\nWinter Appliances  24.90   4.54\n       Cooling     18.18  13.97\n       Heating     47.18  13.50\n       Lighting    30.13   9.92\n\n\n\n\n\n\n\nCode\n# Pivot table for easier comparison\npivot_table = df.pivot_table(\n    values='Energy_Consumption', \n    index='Season', \n    columns='Appliance', \n    aggfunc='mean'\n).round(2)\n\nplt.figure(figsize=(10, 6))\npivot_table.plot(kind='bar', ax=plt.gca())\nplt.title('Average Energy Consumption by Season and Appliance')\nplt.xlabel('Season')\nplt.ylabel('Average Energy Consumption (kWh)')\nplt.legend(title='Appliance', bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.tight_layout()\nplt.show()\n\n# Print the pivot table\nprint(\"\\nAverage Energy Consumption by Season and Appliance:\")\nprint(pivot_table)\n\n\n\n\n\n\n\n\n\n\nAverage Energy Consumption by Season and Appliance:\nAppliance  Appliances  Cooling  Heating  Lighting\nSeason                                           \nAutumn          25.23    20.43    53.42     19.43\nSpring          25.24    24.18    18.58     20.66\nSummer          23.97    51.61    17.85     22.82\nWinter          24.90    18.18    47.18     30.13\n\n\n\n\n\n\nEnergy consumption varies significantly across seasons and appliances.\nHeating and cooling show the most pronounced seasonal variations.\nThe analysis provides insights into potential energy-saving strategies.\n\n\n\n\n\nFocus on heating efficiency during winter months\nImplement smart cooling strategies in summer\nConsider energy-efficient lighting solutions"
  },
  {
    "objectID": "projects/project1/index.html#data-generation-and-initial-analysis",
    "href": "projects/project1/index.html#data-generation-and-initial-analysis",
    "title": "Household Energy Consumption Analysis",
    "section": "",
    "text": "Code\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Set random seed for reproducibility\nnp.random.seed(42)\n\n# Generate synthetic energy consumption data\nseasons = ['Winter', 'Spring', 'Summer', 'Autumn']\nappliances = ['Heating', 'Cooling', 'Lighting', 'Appliances']\n\n# Create a dictionary to store our data\nenergy_data = {\n    'Season': [],\n    'Appliance': [],\n    'Energy_Consumption': []\n}\n\n# Simulate energy consumption with seasonal variations\nfor season in seasons:\n    for appliance in appliances:\n        # Different base consumption and variance for each appliance and season\n        if appliance == 'Heating':\n            base = 50 if season in ['Winter', 'Autumn'] else 20\n            variance = 15\n        elif appliance == 'Cooling':\n            base = 50 if season in ['Summer'] else 20\n            variance = 15\n        elif appliance == 'Lighting':\n            base = 30 if season in ['Winter'] else 20\n            variance = 10\n        else:  # General Appliances\n            base = 25\n            variance = 5\n        \n        # Generate 30 data points (representing days in a month)\n        consumption = np.random.normal(base, variance, 30)\n        \n        # Add to our data structure\n        energy_data['Season'].extend([season] * 30)\n        energy_data['Appliance'].extend([appliance] * 30)\n        energy_data['Energy_Consumption'].extend(consumption)\n\n# Convert to DataFrame\ndf = pd.DataFrame(energy_data)\n\n# Box plot of energy consumption by season and appliance\nplt.figure(figsize=(12, 6))\nsns.boxplot(x='Season', y='Energy_Consumption', hue='Appliance', data=df)\nplt.title('Energy Consumption by Season and Appliance')\nplt.xlabel('Season')\nplt.ylabel('Energy Consumption (kWh)')\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()\n\n# Calculate summary statistics\nsummary = df.groupby(['Season', 'Appliance'])['Energy_Consumption'].agg(['mean', 'std']).round(2)\nprint(\"Energy Consumption Summary:\")\nprint(summary)\n\n\n\n\n\n\n\n\n\nEnergy Consumption Summary:\n                    mean    std\nSeason Appliance               \nAutumn Appliances  25.23   5.52\n       Cooling     20.43  15.06\n       Heating     53.42  14.89\n       Lighting    19.43  11.89\nSpring Appliances  25.24   5.19\n       Cooling     24.18  14.21\n       Heating     18.58  15.36\n       Lighting    20.66  10.53\nSummer Appliances  23.97   3.36\n       Cooling     51.61  13.79\n       Heating     17.85  17.38\n       Lighting    22.82   7.77\nWinter Appliances  24.90   4.54\n       Cooling     18.18  13.97\n       Heating     47.18  13.50\n       Lighting    30.13   9.92"
  },
  {
    "objectID": "projects/project1/index.html#detailed-energy-consumption-analysis",
    "href": "projects/project1/index.html#detailed-energy-consumption-analysis",
    "title": "Household Energy Consumption Analysis",
    "section": "",
    "text": "Code\n# Pivot table for easier comparison\npivot_table = df.pivot_table(\n    values='Energy_Consumption', \n    index='Season', \n    columns='Appliance', \n    aggfunc='mean'\n).round(2)\n\nplt.figure(figsize=(10, 6))\npivot_table.plot(kind='bar', ax=plt.gca())\nplt.title('Average Energy Consumption by Season and Appliance')\nplt.xlabel('Season')\nplt.ylabel('Average Energy Consumption (kWh)')\nplt.legend(title='Appliance', bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.tight_layout()\nplt.show()\n\n# Print the pivot table\nprint(\"\\nAverage Energy Consumption by Season and Appliance:\")\nprint(pivot_table)\n\n\n\n\n\n\n\n\n\n\nAverage Energy Consumption by Season and Appliance:\nAppliance  Appliances  Cooling  Heating  Lighting\nSeason                                           \nAutumn          25.23    20.43    53.42     19.43\nSpring          25.24    24.18    18.58     20.66\nSummer          23.97    51.61    17.85     22.82\nWinter          24.90    18.18    47.18     30.13"
  },
  {
    "objectID": "projects/project1/index.html#key-insights",
    "href": "projects/project1/index.html#key-insights",
    "title": "Household Energy Consumption Analysis",
    "section": "",
    "text": "Energy consumption varies significantly across seasons and appliances.\nHeating and cooling show the most pronounced seasonal variations.\nThe analysis provides insights into potential energy-saving strategies."
  },
  {
    "objectID": "projects/project1/index.html#recommendations",
    "href": "projects/project1/index.html#recommendations",
    "title": "Household Energy Consumption Analysis",
    "section": "",
    "text": "Focus on heating efficiency during winter months\nImplement smart cooling strategies in summer\nConsider energy-efficient lighting solutions"
  },
  {
    "objectID": "license.html",
    "href": "license.html",
    "title": "CC BY-NC-SA 4.0 license",
    "section": "",
    "text": "© 2024 Chaance T. Graves.\nMy content is released under the CC BY NC ND 4.0 license.\n   \nYou may share and adapt this content with appropriate credit and notation of any changes. You may not use this material for any commercial purposes.\n\n\n\n\n\n\nNote\n\n\n\nNote that my Opinions expressed are solely my own and do not express the views of my employer or any organizations I am associated with."
  }
]