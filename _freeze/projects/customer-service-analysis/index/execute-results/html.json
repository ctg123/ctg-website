{
  "hash": "eb23fdf1343554a3636b5ccad4f513a4",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: NYC 311 Customer Service Requests Analysis\ndescription: Data analysis of service request calls from public dataset.\nauthor: Chaance Graves\ndate: \"2023-05-09\" #  May 9, 2023\ncategories: [applied data science, visualization]\n#image: \"boat_thumbnail.jpg\"\njupyter: python3\n\nformat: \n  html:\n    toc: true\n    toc-title: Contents\n    toc-location: right\n    code-fold: false\n---\n\n\n<a href=\"https://colab.research.google.com/github/ctg123/ml-projects/blob/main/customer-service-analysis/customer_service_analysis.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>\n\n# Customer Service Requests Analysis\n\n## Problem Statement\n\nAnalyze the data on service request (311) call from New York City. Utilize Data Wrangling techniques to understand the patterns in the data and visualize the major type of complaints.\n\n## Import the libraries for analysis\n\n::: {#67ac4092 .cell tags='[]' execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom ydata_profiling import ProfileReport\n\nimport warnings\nwarnings.filterwarnings('ignore')\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n\n            <div>\n                <ins><a href=\"https://ydata.ai/register\">Upgrade to ydata-sdk</a></ins>\n                <p>\n                    Improve your data and profiling with ydata-sdk, featuring data quality scoring, redundancy detection, outlier identification, text validation, and synthetic data generation.\n                </p>\n            </div>\n            \n```\n:::\n:::\n\n\n## Understanding the dataset\n\n::: {#b73d4e0c .cell tags='[]' execution_count=2}\n``` {.python .cell-code}\n# checking the info about the installed pandas package version\nprint(pd.show_versions())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nINSTALLED VERSIONS\n------------------\ncommit                : 0691c5cf90477d3503834d983f69350f250a6ff7\npython                : 3.12.2\npython-bits           : 64\nOS                    : Linux\nOS-release            : 5.15.167.4-microsoft-standard-WSL2\nVersion               : #1 SMP Tue Nov 5 00:21:55 UTC 2024\nmachine               : x86_64\nprocessor             : x86_64\nbyteorder             : little\nLC_ALL                : None\nLANG                  : C.UTF-8\nLOCALE                : C.UTF-8\n\npandas                : 2.2.3\nnumpy                 : 2.1.3\npytz                  : 2024.2\ndateutil              : 2.9.0.post0\npip                   : 25.0.1\nCython                : None\nsphinx                : None\nIPython               : 8.29.0\nadbc-driver-postgresql: None\nadbc-driver-sqlite    : None\nbs4                   : 4.12.3\nblosc                 : None\nbottleneck            : None\ndataframe-api-compat  : None\nfastparquet           : None\nfsspec                : None\nhtml5lib              : None\nhypothesis            : None\ngcsfs                 : None\njinja2                : 3.1.4\nlxml.etree            : None\nmatplotlib            : 3.9.2\nnumba                 : 0.61.0\nnumexpr               : None\nodfpy                 : None\nopenpyxl              : None\npandas_gbq            : None\npsycopg2              : None\npymysql               : None\npyarrow               : None\npyreadstat            : None\npytest                : None\npython-calamine       : None\npyxlsb                : None\ns3fs                  : None\nscipy                 : 1.15.2\nsqlalchemy            : None\ntables                : None\ntabulate              : None\nxarray                : None\nxlrd                  : None\nxlsxwriter            : None\nzstandard             : None\ntzdata                : 2024.2\nqtpy                  : None\npyqt5                 : None\nNone\n```\n:::\n:::\n\n\n::: {#84f66270 .cell tags='[]' execution_count=3}\n``` {.python .cell-code}\n# Setting the constants to use throughout the notebook\nDATA_PATH = \"data/\"\nDATASETS_PATH = \"datasets/\"\n```\n:::\n\n\n::: {#5478cf88 .cell tags='[]' execution_count=4}\n``` {.python .cell-code}\ndf = pd.read_csv(DATASETS_PATH + \"311_Service_Requests_from_2010_to_Present.csv\")\n```\n:::\n\n\n::: {#3579b949 .cell tags='[]' execution_count=5}\n``` {.python .cell-code}\ndf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Unique Key</th>\n      <th>Created Date</th>\n      <th>Closed Date</th>\n      <th>Agency</th>\n      <th>Agency Name</th>\n      <th>Complaint Type</th>\n      <th>Descriptor</th>\n      <th>Location Type</th>\n      <th>Incident Zip</th>\n      <th>Incident Address</th>\n      <th>...</th>\n      <th>Bridge Highway Name</th>\n      <th>Bridge Highway Direction</th>\n      <th>Road Ramp</th>\n      <th>Bridge Highway Segment</th>\n      <th>Garage Lot Name</th>\n      <th>Ferry Direction</th>\n      <th>Ferry Terminal Name</th>\n      <th>Latitude</th>\n      <th>Longitude</th>\n      <th>Location</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>32310363</td>\n      <td>12/31/2015 11:59:45 PM</td>\n      <td>01/01/2016 12:55:15 AM</td>\n      <td>NYPD</td>\n      <td>New York City Police Department</td>\n      <td>Noise - Street/Sidewalk</td>\n      <td>Loud Music/Party</td>\n      <td>Street/Sidewalk</td>\n      <td>10034.0</td>\n      <td>71 VERMILYEA AVENUE</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>40.865682</td>\n      <td>-73.923501</td>\n      <td>(40.86568153633767, -73.92350095571744)</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>32309934</td>\n      <td>12/31/2015 11:59:44 PM</td>\n      <td>01/01/2016 01:26:57 AM</td>\n      <td>NYPD</td>\n      <td>New York City Police Department</td>\n      <td>Blocked Driveway</td>\n      <td>No Access</td>\n      <td>Street/Sidewalk</td>\n      <td>11105.0</td>\n      <td>27-07 23 AVENUE</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>40.775945</td>\n      <td>-73.915094</td>\n      <td>(40.775945312321085, -73.91509393898605)</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>32309159</td>\n      <td>12/31/2015 11:59:29 PM</td>\n      <td>01/01/2016 04:51:03 AM</td>\n      <td>NYPD</td>\n      <td>New York City Police Department</td>\n      <td>Blocked Driveway</td>\n      <td>No Access</td>\n      <td>Street/Sidewalk</td>\n      <td>10458.0</td>\n      <td>2897 VALENTINE AVENUE</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>40.870325</td>\n      <td>-73.888525</td>\n      <td>(40.870324522111424, -73.88852464418646)</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>32305098</td>\n      <td>12/31/2015 11:57:46 PM</td>\n      <td>01/01/2016 07:43:13 AM</td>\n      <td>NYPD</td>\n      <td>New York City Police Department</td>\n      <td>Illegal Parking</td>\n      <td>Commercial Overnight Parking</td>\n      <td>Street/Sidewalk</td>\n      <td>10461.0</td>\n      <td>2940 BAISLEY AVENUE</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>40.835994</td>\n      <td>-73.828379</td>\n      <td>(40.83599404683083, -73.82837939584206)</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>32306529</td>\n      <td>12/31/2015 11:56:58 PM</td>\n      <td>01/01/2016 03:24:42 AM</td>\n      <td>NYPD</td>\n      <td>New York City Police Department</td>\n      <td>Illegal Parking</td>\n      <td>Blocked Sidewalk</td>\n      <td>Street/Sidewalk</td>\n      <td>11373.0</td>\n      <td>87-14 57 ROAD</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>40.733060</td>\n      <td>-73.874170</td>\n      <td>(40.733059618956815, -73.87416975810375)</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 53 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {#d750b777 .cell tags='[]' execution_count=6}\n``` {.python .cell-code}\n# Let's get the info about the dataset, shape of the dimensions\ndf.info()\nprint(\"\\n\")\nprint( f\"The shape of the dataset is {df.shape}\")\nprint(\"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 364558 entries, 0 to 364557\nData columns (total 53 columns):\n #   Column                          Non-Null Count   Dtype  \n---  ------                          --------------   -----  \n 0   Unique Key                      364558 non-null  int64  \n 1   Created Date                    364558 non-null  object \n 2   Closed Date                     362177 non-null  object \n 3   Agency                          364558 non-null  object \n 4   Agency Name                     364558 non-null  object \n 5   Complaint Type                  364558 non-null  object \n 6   Descriptor                      358057 non-null  object \n 7   Location Type                   364425 non-null  object \n 8   Incident Zip                    361560 non-null  float64\n 9   Incident Address                312859 non-null  object \n 10  Street Name                     312859 non-null  object \n 11  Cross Street 1                  307370 non-null  object \n 12  Cross Street 2                  306753 non-null  object \n 13  Intersection Street 1           51120 non-null   object \n 14  Intersection Street 2           50512 non-null   object \n 15  Address Type                    361306 non-null  object \n 16  City                            361561 non-null  object \n 17  Landmark                        375 non-null     object \n 18  Facility Type                   362169 non-null  object \n 19  Status                          364558 non-null  object \n 20  Due Date                        364555 non-null  object \n 21  Resolution Description          364558 non-null  object \n 22  Resolution Action Updated Date  362156 non-null  object \n 23  Community Board                 364558 non-null  object \n 24  Borough                         364558 non-null  object \n 25  X Coordinate (State Plane)      360528 non-null  float64\n 26  Y Coordinate (State Plane)      360528 non-null  float64\n 27  Park Facility Name              364558 non-null  object \n 28  Park Borough                    364558 non-null  object \n 29  School Name                     364558 non-null  object \n 30  School Number                   364558 non-null  object \n 31  School Region                   364557 non-null  object \n 32  School Code                     364557 non-null  object \n 33  School Phone Number             364558 non-null  object \n 34  School Address                  364558 non-null  object \n 35  School City                     364558 non-null  object \n 36  School State                    364558 non-null  object \n 37  School Zip                      364557 non-null  object \n 38  School Not Found                364558 non-null  object \n 39  School or Citywide Complaint    0 non-null       float64\n 40  Vehicle Type                    0 non-null       float64\n 41  Taxi Company Borough            0 non-null       float64\n 42  Taxi Pick Up Location           0 non-null       float64\n 43  Bridge Highway Name             297 non-null     object \n 44  Bridge Highway Direction        297 non-null     object \n 45  Road Ramp                       262 non-null     object \n 46  Bridge Highway Segment          262 non-null     object \n 47  Garage Lot Name                 0 non-null       float64\n 48  Ferry Direction                 1 non-null       object \n 49  Ferry Terminal Name             2 non-null       object \n 50  Latitude                        360528 non-null  float64\n 51  Longitude                       360528 non-null  float64\n 52  Location                        360528 non-null  object \ndtypes: float64(10), int64(1), object(42)\nmemory usage: 147.4+ MB\n\n\nThe shape of the dataset is (364558, 53)\n\n\n```\n:::\n:::\n\n\n::: {#29403522 .cell tags='[]' execution_count=7}\n``` {.python .cell-code}\n# Let's check if any null values exists\nnull_counts = df.isnull().sum()\nprint(null_counts)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUnique Key                             0\nCreated Date                           0\nClosed Date                         2381\nAgency                                 0\nAgency Name                            0\nComplaint Type                         0\nDescriptor                          6501\nLocation Type                        133\nIncident Zip                        2998\nIncident Address                   51699\nStreet Name                        51699\nCross Street 1                     57188\nCross Street 2                     57805\nIntersection Street 1             313438\nIntersection Street 2             314046\nAddress Type                        3252\nCity                                2997\nLandmark                          364183\nFacility Type                       2389\nStatus                                 0\nDue Date                               3\nResolution Description                 0\nResolution Action Updated Date      2402\nCommunity Board                        0\nBorough                                0\nX Coordinate (State Plane)          4030\nY Coordinate (State Plane)          4030\nPark Facility Name                     0\nPark Borough                           0\nSchool Name                            0\nSchool Number                          0\nSchool Region                          1\nSchool Code                            1\nSchool Phone Number                    0\nSchool Address                         0\nSchool City                            0\nSchool State                           0\nSchool Zip                             1\nSchool Not Found                       0\nSchool or Citywide Complaint      364558\nVehicle Type                      364558\nTaxi Company Borough              364558\nTaxi Pick Up Location             364558\nBridge Highway Name               364261\nBridge Highway Direction          364261\nRoad Ramp                         364296\nBridge Highway Segment            364296\nGarage Lot Name                   364558\nFerry Direction                   364557\nFerry Terminal Name               364556\nLatitude                            4030\nLongitude                           4030\nLocation                            4030\ndtype: int64\n```\n:::\n:::\n\n\n**Observations:**\n\nThere are null values present in the `df` dataframe for the following variables:\n\n1. Closed Date\n2. Descriptor\n3. Location Type\netc...\n\n## Exploratory Data Analysis (EDA)\n\nwe use `plt.style.use('ggplot')` to set the ggplot style for Matplotlib. We then use the same code as before to count the null values and create the bar chart, and set the chart title and axis labels using `plt.title()`, `plt.xlabel()`, and `plt.ylabel()`.\n\n::: {#fba8f7ee .cell execution_count=8}\n``` {.python .cell-code}\nplt.style.use('ggplot')\n\n# Create bar chart of null value counts\nnull_counts.plot.barh(figsize=(15,10), stacked=True)\n\n# Set chart title and axis labels\nplt.title('Null Value Counts')\nplt.xlabel('Columns', labelpad=10)\nplt.ylabel('Count')\n\n# Show chart\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-9-output-1.png){width=1378 height=832}\n:::\n:::\n\n\n::: {#91b84ba0 .cell tags='[]' execution_count=9}\n``` {.python .cell-code}\n# Remove null values from \"Closed Date\" column\ndf.dropna(subset=[\"Closed Date\"], inplace=True)\n\n# Show sample of dataset with null values removed\ndf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Unique Key</th>\n      <th>Created Date</th>\n      <th>Closed Date</th>\n      <th>Agency</th>\n      <th>Agency Name</th>\n      <th>Complaint Type</th>\n      <th>Descriptor</th>\n      <th>Location Type</th>\n      <th>Incident Zip</th>\n      <th>Incident Address</th>\n      <th>...</th>\n      <th>Bridge Highway Name</th>\n      <th>Bridge Highway Direction</th>\n      <th>Road Ramp</th>\n      <th>Bridge Highway Segment</th>\n      <th>Garage Lot Name</th>\n      <th>Ferry Direction</th>\n      <th>Ferry Terminal Name</th>\n      <th>Latitude</th>\n      <th>Longitude</th>\n      <th>Location</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>32310363</td>\n      <td>12/31/2015 11:59:45 PM</td>\n      <td>01/01/2016 12:55:15 AM</td>\n      <td>NYPD</td>\n      <td>New York City Police Department</td>\n      <td>Noise - Street/Sidewalk</td>\n      <td>Loud Music/Party</td>\n      <td>Street/Sidewalk</td>\n      <td>10034.0</td>\n      <td>71 VERMILYEA AVENUE</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>40.865682</td>\n      <td>-73.923501</td>\n      <td>(40.86568153633767, -73.92350095571744)</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>32309934</td>\n      <td>12/31/2015 11:59:44 PM</td>\n      <td>01/01/2016 01:26:57 AM</td>\n      <td>NYPD</td>\n      <td>New York City Police Department</td>\n      <td>Blocked Driveway</td>\n      <td>No Access</td>\n      <td>Street/Sidewalk</td>\n      <td>11105.0</td>\n      <td>27-07 23 AVENUE</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>40.775945</td>\n      <td>-73.915094</td>\n      <td>(40.775945312321085, -73.91509393898605)</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>32309159</td>\n      <td>12/31/2015 11:59:29 PM</td>\n      <td>01/01/2016 04:51:03 AM</td>\n      <td>NYPD</td>\n      <td>New York City Police Department</td>\n      <td>Blocked Driveway</td>\n      <td>No Access</td>\n      <td>Street/Sidewalk</td>\n      <td>10458.0</td>\n      <td>2897 VALENTINE AVENUE</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>40.870325</td>\n      <td>-73.888525</td>\n      <td>(40.870324522111424, -73.88852464418646)</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>32305098</td>\n      <td>12/31/2015 11:57:46 PM</td>\n      <td>01/01/2016 07:43:13 AM</td>\n      <td>NYPD</td>\n      <td>New York City Police Department</td>\n      <td>Illegal Parking</td>\n      <td>Commercial Overnight Parking</td>\n      <td>Street/Sidewalk</td>\n      <td>10461.0</td>\n      <td>2940 BAISLEY AVENUE</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>40.835994</td>\n      <td>-73.828379</td>\n      <td>(40.83599404683083, -73.82837939584206)</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>32306529</td>\n      <td>12/31/2015 11:56:58 PM</td>\n      <td>01/01/2016 03:24:42 AM</td>\n      <td>NYPD</td>\n      <td>New York City Police Department</td>\n      <td>Illegal Parking</td>\n      <td>Blocked Sidewalk</td>\n      <td>Street/Sidewalk</td>\n      <td>11373.0</td>\n      <td>87-14 57 ROAD</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>40.733060</td>\n      <td>-73.874170</td>\n      <td>(40.733059618956815, -73.87416975810375)</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 53 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {#50234314 .cell tags='[]' execution_count=10}\n``` {.python .cell-code}\n# Check if null values are still present in \"Closed Date\" column\nif df['Closed Date'].isnull().any():\n    print('Null values still present in \"Closed Date\" column.')\nelse:\n    print('No null values present in \"Closed Date\" column.')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNo null values present in \"Closed Date\" column.\n```\n:::\n:::\n\n\n::: {#eafdf6ef .cell tags='[]' execution_count=11}\n``` {.python .cell-code}\n# Convert the \"Closed Date\" and \"Created Date\" columns to datetime format\ndf[\"Created Date\"] = pd.to_datetime(df[\"Created Date\"], format=\"%m/%d/%Y %I:%M:%S %p\")\ndf[\"Closed Date\"] = pd.to_datetime(df[\"Closed Date\"], format=\"%m/%d/%Y %I:%M:%S %p\")\ndf.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nIndex: 362177 entries, 0 to 364557\nData columns (total 53 columns):\n #   Column                          Non-Null Count   Dtype         \n---  ------                          --------------   -----         \n 0   Unique Key                      362177 non-null  int64         \n 1   Created Date                    362177 non-null  datetime64[ns]\n 2   Closed Date                     362177 non-null  datetime64[ns]\n 3   Agency                          362177 non-null  object        \n 4   Agency Name                     362177 non-null  object        \n 5   Complaint Type                  362177 non-null  object        \n 6   Descriptor                      355681 non-null  object        \n 7   Location Type                   362047 non-null  object        \n 8   Incident Zip                    361502 non-null  float64       \n 9   Incident Address                310491 non-null  object        \n 10  Street Name                     310491 non-null  object        \n 11  Cross Street 1                  306846 non-null  object        \n 12  Cross Street 2                  306713 non-null  object        \n 13  Intersection Street 1           50628 non-null   object        \n 14  Intersection Street 2           50504 non-null   object        \n 15  Address Type                    361248 non-null  object        \n 16  City                            361503 non-null  object        \n 17  Landmark                        375 non-null     object        \n 18  Facility Type                   362159 non-null  object        \n 19  Status                          362177 non-null  object        \n 20  Due Date                        362176 non-null  object        \n 21  Resolution Description          362177 non-null  object        \n 22  Resolution Action Updated Date  362138 non-null  object        \n 23  Community Board                 362177 non-null  object        \n 24  Borough                         362177 non-null  object        \n 25  X Coordinate (State Plane)      360470 non-null  float64       \n 26  Y Coordinate (State Plane)      360470 non-null  float64       \n 27  Park Facility Name              362177 non-null  object        \n 28  Park Borough                    362177 non-null  object        \n 29  School Name                     362177 non-null  object        \n 30  School Number                   362177 non-null  object        \n 31  School Region                   362176 non-null  object        \n 32  School Code                     362176 non-null  object        \n 33  School Phone Number             362177 non-null  object        \n 34  School Address                  362177 non-null  object        \n 35  School City                     362177 non-null  object        \n 36  School State                    362177 non-null  object        \n 37  School Zip                      362176 non-null  object        \n 38  School Not Found                362177 non-null  object        \n 39  School or Citywide Complaint    0 non-null       float64       \n 40  Vehicle Type                    0 non-null       float64       \n 41  Taxi Company Borough            0 non-null       float64       \n 42  Taxi Pick Up Location           0 non-null       float64       \n 43  Bridge Highway Name             297 non-null     object        \n 44  Bridge Highway Direction        297 non-null     object        \n 45  Road Ramp                       262 non-null     object        \n 46  Bridge Highway Segment          262 non-null     object        \n 47  Garage Lot Name                 0 non-null       float64       \n 48  Ferry Direction                 0 non-null       object        \n 49  Ferry Terminal Name             0 non-null       object        \n 50  Latitude                        360470 non-null  float64       \n 51  Longitude                       360470 non-null  float64       \n 52  Location                        360470 non-null  object        \ndtypes: datetime64[ns](2), float64(10), int64(1), object(40)\nmemory usage: 149.2+ MB\n```\n:::\n:::\n\n\n::: {#14627b60 .cell tags='[]' execution_count=12}\n``` {.python .cell-code}\n# Create a new column called \"Time Delta\" and calculate the time delta between \"Closed Date\" and \"Created Date\"\ndf[\"request_closing_time_sec\"] = (df[\"Closed Date\"] - df[\"Created Date\"]).dt.total_seconds()\n\n# View descriptive statistics of the \"Time Delta\" column\ndf[\"request_closing_time_sec\"].describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\ncount    3.621770e+05\nmean     1.511330e+04\nstd      2.110255e+04\nmin      6.100000e+01\n25%      4.533000e+03\n50%      9.616000e+03\n75%      1.887800e+04\nmax      2.134342e+06\nName: request_closing_time_sec, dtype: float64\n```\n:::\n:::\n\n\n## Finding the major type of complaints\n\n::: {#2427a650 .cell tags='[]' execution_count=13}\n``` {.python .cell-code}\n# Check the number of null values in the \"Complaint_Type\" and \"City\" columns using f-strings\nprint(f'Number of null values in \"Complaint_Type\" column: {df[\"Complaint Type\"].isnull().sum()}')\nprint(f'Number of null values in \"City\" column: {df[\"City\"].isnull().sum()}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNumber of null values in \"Complaint_Type\" column: 0\nNumber of null values in \"City\" column: 674\n```\n:::\n:::\n\n\n::: {#e17725d5 .cell tags='[]' execution_count=14}\n``` {.python .cell-code}\n# fill in missing values (nan) in the 'City' column with 'Unknown City'\ndf['City'].fillna('Unknown City', inplace=True)\n\n# Get Unique Count using Series.unique()\ncity_count = df.City.unique().size\n\n# Let's check what all unique values are in the 'City' column\ncity_col = df['City'].unique()\n\nprint(f\"There are {city_count} values in the dataset that contain the following info: \\n {city_col}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThere are 54 values in the dataset that contain the following info: \n ['NEW YORK' 'ASTORIA' 'BRONX' 'ELMHURST' 'BROOKLYN' 'KEW GARDENS'\n 'JACKSON HEIGHTS' 'MIDDLE VILLAGE' 'REGO PARK' 'SAINT ALBANS' 'JAMAICA'\n 'SOUTH RICHMOND HILL' 'Unknown City' 'RIDGEWOOD' 'HOWARD BEACH'\n 'FOREST HILLS' 'STATEN ISLAND' 'OZONE PARK' 'RICHMOND HILL' 'WOODHAVEN'\n 'FLUSHING' 'CORONA' 'QUEENS VILLAGE' 'OAKLAND GARDENS' 'HOLLIS' 'MASPETH'\n 'EAST ELMHURST' 'SOUTH OZONE PARK' 'WOODSIDE' 'FRESH MEADOWS'\n 'LONG ISLAND CITY' 'ROCKAWAY PARK' 'SPRINGFIELD GARDENS' 'COLLEGE POINT'\n 'BAYSIDE' 'GLEN OAKS' 'FAR ROCKAWAY' 'BELLEROSE' 'LITTLE NECK'\n 'CAMBRIA HEIGHTS' 'ROSEDALE' 'SUNNYSIDE' 'WHITESTONE' 'ARVERNE'\n 'FLORAL PARK' 'NEW HYDE PARK' 'CENTRAL PARK' 'BREEZY POINT' 'QUEENS'\n 'Astoria' 'Long Island City' 'Woodside' 'East Elmhurst' 'Howard Beach']\n```\n:::\n:::\n\n\n::: {#c61e9ab1 .cell tags='[]' execution_count=15}\n``` {.python .cell-code}\ntotal_city_complaints = df.groupby(['City','Complaint Type']).size().unstack().fillna(0)\n\ntotal_city_complaints.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>Complaint Type</th>\n      <th>Agency Issues</th>\n      <th>Animal Abuse</th>\n      <th>Animal in a Park</th>\n      <th>Bike/Roller/Skate Chronic</th>\n      <th>Blocked Driveway</th>\n      <th>Derelict Vehicle</th>\n      <th>Disorderly Youth</th>\n      <th>Drinking</th>\n      <th>Graffiti</th>\n      <th>Homeless Encampment</th>\n      <th>...</th>\n      <th>Noise - House of Worship</th>\n      <th>Noise - Park</th>\n      <th>Noise - Street/Sidewalk</th>\n      <th>Noise - Vehicle</th>\n      <th>Panhandling</th>\n      <th>Posting Advertisement</th>\n      <th>Squeegee</th>\n      <th>Traffic</th>\n      <th>Urinating in Public</th>\n      <th>Vending</th>\n    </tr>\n    <tr>\n      <th>City</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>ARVERNE</th>\n      <td>0.0</td>\n      <td>46.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>50.0</td>\n      <td>32.0</td>\n      <td>2.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>4.0</td>\n      <td>...</td>\n      <td>14.0</td>\n      <td>2.0</td>\n      <td>29.0</td>\n      <td>10.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>ASTORIA</th>\n      <td>0.0</td>\n      <td>170.0</td>\n      <td>0.0</td>\n      <td>16.0</td>\n      <td>3436.0</td>\n      <td>426.0</td>\n      <td>5.0</td>\n      <td>43.0</td>\n      <td>4.0</td>\n      <td>32.0</td>\n      <td>...</td>\n      <td>21.0</td>\n      <td>64.0</td>\n      <td>409.0</td>\n      <td>236.0</td>\n      <td>2.0</td>\n      <td>3.0</td>\n      <td>0.0</td>\n      <td>60.0</td>\n      <td>10.0</td>\n      <td>57.0</td>\n    </tr>\n    <tr>\n      <th>Astoria</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>159.0</td>\n      <td>14.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>145.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>BAYSIDE</th>\n      <td>0.0</td>\n      <td>53.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>514.0</td>\n      <td>231.0</td>\n      <td>2.0</td>\n      <td>1.0</td>\n      <td>3.0</td>\n      <td>2.0</td>\n      <td>...</td>\n      <td>3.0</td>\n      <td>4.0</td>\n      <td>17.0</td>\n      <td>24.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>9.0</td>\n      <td>0.0</td>\n      <td>2.0</td>\n    </tr>\n    <tr>\n      <th>BELLEROSE</th>\n      <td>0.0</td>\n      <td>15.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>138.0</td>\n      <td>120.0</td>\n      <td>2.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>...</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>13.0</td>\n      <td>11.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>9.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 23 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {#6c1363b7 .cell tags='[]' execution_count=16}\n``` {.python .cell-code}\ntotal_city_complaints.plot.bar(figsize=(15,10), stacked=True)\n\n# set the axis labels and title\nplt.xlabel('Number of Complaints')\nplt.ylabel('City')\nplt.title('Frequency of Complaints by City')\n\n# show the plot\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-17-output-1.png){width=1216 height=969}\n:::\n:::\n\n\n## Data Visualization of the major type of complaints\n\nIn order to find the major type of complaints in the dataset, the following code groups the dataset by complaint type, counts the number of occurrences for each type, and then sorts the counts in descending order. The resulting bar graph shows the counts for each complaint type.\n\n::: {#c926c8e2 .cell execution_count=17}\n``` {.python .cell-code}\n# Group by complaint type and count the number of occurrences\ncomplaint_counts = df.groupby('Complaint Type').size().reset_index(name='counts')\n\n# Sort the counts in descending order\ncomplaint_counts = complaint_counts.sort_values('counts', ascending=False)\n\ncomplaint_counts\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Complaint Type</th>\n      <th>counts</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>4</th>\n      <td>Blocked Driveway</td>\n      <td>100624</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>Illegal Parking</td>\n      <td>91716</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>Noise - Street/Sidewalk</td>\n      <td>51139</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>Noise - Commercial</td>\n      <td>43751</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Derelict Vehicle</td>\n      <td>21518</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>Noise - Vehicle</td>\n      <td>19301</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Animal Abuse</td>\n      <td>10530</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>Traffic</td>\n      <td>5196</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>Homeless Encampment</td>\n      <td>4879</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>Vending</td>\n      <td>4185</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>Noise - Park</td>\n      <td>4089</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>Drinking</td>\n      <td>1404</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>Noise - House of Worship</td>\n      <td>1068</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>Posting Advertisement</td>\n      <td>679</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>Urinating in Public</td>\n      <td>641</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Bike/Roller/Skate Chronic</td>\n      <td>475</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>Panhandling</td>\n      <td>325</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>Disorderly Youth</td>\n      <td>315</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>Illegal Fireworks</td>\n      <td>172</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>Graffiti</td>\n      <td>157</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>Agency Issues</td>\n      <td>8</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>Squeegee</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Animal in a Park</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#c55983d1 .cell tags='[]' execution_count=18}\n``` {.python .cell-code}\n# Plot the bar graph\nplt.bar(complaint_counts['Complaint Type'], complaint_counts['counts'])\nplt.xticks(rotation=90)\nplt.xlabel('Complaint Type')\nplt.ylabel('Counts')\nplt.title('Types of Complaints in the Total Dataset')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-19-output-1.png){width=621 height=608}\n:::\n:::\n\n\nFrom our bar chart analysis, the top 10 major complaint types are the following:\n\n1. `Blocked Driveway`\n2. `Illegal Parking`\n3. `Noisy Street/Sidewalk`\n4. `Noise - Commerical buildings`\n5. `Derelict Vehicle`\n6. `Noise - Vehicle`\n7. `Animal Abuse`\n8. `Traffic`\n9. `Homeless Encampment`\n10. `Vending`\n\nLet's explore the complaint data specifically for NYC ...\n\nThis code filters the dataset to only include complaints from New York City, groups the remaining data by complaint type, counts the number of occurrences for each type, and then sorts the counts in descending order. The resulting output shows the frequency of each complaint type for New York City.\n\n::: {#870ac54f .cell tags='[]' execution_count=19}\n``` {.python .cell-code}\nnyc_data = df.loc[df['City'] == 'NEW YORK']\nnyc_data.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Unique Key</th>\n      <th>Created Date</th>\n      <th>Closed Date</th>\n      <th>Agency</th>\n      <th>Agency Name</th>\n      <th>Complaint Type</th>\n      <th>Descriptor</th>\n      <th>Location Type</th>\n      <th>Incident Zip</th>\n      <th>Incident Address</th>\n      <th>...</th>\n      <th>Bridge Highway Direction</th>\n      <th>Road Ramp</th>\n      <th>Bridge Highway Segment</th>\n      <th>Garage Lot Name</th>\n      <th>Ferry Direction</th>\n      <th>Ferry Terminal Name</th>\n      <th>Latitude</th>\n      <th>Longitude</th>\n      <th>Location</th>\n      <th>request_closing_time_sec</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>32310363</td>\n      <td>2015-12-31 23:59:45</td>\n      <td>2016-01-01 00:55:15</td>\n      <td>NYPD</td>\n      <td>New York City Police Department</td>\n      <td>Noise - Street/Sidewalk</td>\n      <td>Loud Music/Party</td>\n      <td>Street/Sidewalk</td>\n      <td>10034.0</td>\n      <td>71 VERMILYEA AVENUE</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>40.865682</td>\n      <td>-73.923501</td>\n      <td>(40.86568153633767, -73.92350095571744)</td>\n      <td>3330.0</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>32306559</td>\n      <td>2015-12-31 23:55:32</td>\n      <td>2016-01-01 01:53:54</td>\n      <td>NYPD</td>\n      <td>New York City Police Department</td>\n      <td>Illegal Parking</td>\n      <td>Blocked Hydrant</td>\n      <td>Street/Sidewalk</td>\n      <td>10032.0</td>\n      <td>524 WEST 169 STREET</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>40.840848</td>\n      <td>-73.937375</td>\n      <td>(40.840847591440415, -73.9373750864581)</td>\n      <td>7102.0</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>32308195</td>\n      <td>2015-12-31 23:40:55</td>\n      <td>2016-01-01 00:28:31</td>\n      <td>NYPD</td>\n      <td>New York City Police Department</td>\n      <td>Noise - Street/Sidewalk</td>\n      <td>Loud Music/Party</td>\n      <td>Street/Sidewalk</td>\n      <td>10026.0</td>\n      <td>264 WEST 118 STREET</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>40.805267</td>\n      <td>-73.953353</td>\n      <td>(40.80526715877265, -73.9533526205901)</td>\n      <td>2856.0</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>32308765</td>\n      <td>2015-12-31 23:32:46</td>\n      <td>2016-01-01 00:25:21</td>\n      <td>NYPD</td>\n      <td>New York City Police Department</td>\n      <td>Illegal Parking</td>\n      <td>Double Parked Blocking Vehicle</td>\n      <td>Street/Sidewalk</td>\n      <td>10030.0</td>\n      <td>133 WEST 134 STREET</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>40.814002</td>\n      <td>-73.942664</td>\n      <td>(40.814001537165495, -73.94266395083876)</td>\n      <td>3155.0</td>\n    </tr>\n    <tr>\n      <th>26</th>\n      <td>32305916</td>\n      <td>2015-12-31 23:26:41</td>\n      <td>2015-12-31 23:53:31</td>\n      <td>NYPD</td>\n      <td>New York City Police Department</td>\n      <td>Noise - House of Worship</td>\n      <td>Loud Music/Party</td>\n      <td>House of Worship</td>\n      <td>10031.0</td>\n      <td>452 WEST 147 STREET</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>40.826102</td>\n      <td>-73.945663</td>\n      <td>(40.826101709196, -73.94566339279595)</td>\n      <td>1610.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 54 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {#27c66fa6 .cell tags='[]' execution_count=20}\n``` {.python .cell-code}\n# Extract and count the unique values in the \"Complaint Type\" column\nnyc_complaint_types = len(nyc_data['Complaint Type'].unique())\n\n# Print the complaint types\nprint(f\"there are {nyc_complaint_types} complaint types in New York City.\")\n\n# Group by complaint type and count the number of occurrences\nnyc_complaint_counts = nyc_data.groupby('Complaint Type').size().reset_index(name='counts')\n\n# Sort the counts in descending order\nnyc_complaint_counts = nyc_complaint_counts.sort_values('counts', ascending=False)\n\nnyc_data['Complaint Type'].value_counts()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nthere are 21 complaint types in New York City.\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\nComplaint Type\nNoise - Street/Sidewalk      22245\nNoise - Commercial           18686\nIllegal Parking              14549\nNoise - Vehicle               6294\nHomeless Encampment           3060\nBlocked Driveway              2705\nVending                       2638\nAnimal Abuse                  1941\nTraffic                       1769\nNoise - Park                  1243\nDerelict Vehicle               695\nDrinking                       321\nUrinating in Public            264\nBike/Roller/Skate Chronic      254\nNoise - House of Worship       222\nPanhandling                    206\nDisorderly Youth                81\nPosting Advertisement           49\nIllegal Fireworks               38\nGraffiti                        25\nSqueegee                         4\nName: count, dtype: int64\n```\n:::\n:::\n\n\n::: {#4a87581e .cell tags='[]' execution_count=21}\n``` {.python .cell-code}\n# Plot the bar graph\nplt.bar(nyc_complaint_counts['Complaint Type'], nyc_complaint_counts['counts'], color='green')\nplt.xticks(rotation=90)\nplt.xlabel('Complaint Type')\nplt.ylabel('Counts')\nplt.title('Types of Complaints in New York City')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-22-output-1.png){width=612 height=608}\n:::\n:::\n\n\nLet's explore the complaint data specifically for Brooklyn ...\n\nThis code filters the dataset to only include complaints from Brooklyn, groups the remaining data by complaint type, counts the number of occurrences for each type, and then sorts the counts in descending order. The resulting output shows the frequency of each complaint type for Brooklyn.\n\n::: {#c8d8fbbb .cell tags='[]' execution_count=22}\n``` {.python .cell-code}\nbk_data = df.loc[df['City'] == 'BROOKLYN']\nbk_data.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Unique Key</th>\n      <th>Created Date</th>\n      <th>Closed Date</th>\n      <th>Agency</th>\n      <th>Agency Name</th>\n      <th>Complaint Type</th>\n      <th>Descriptor</th>\n      <th>Location Type</th>\n      <th>Incident Zip</th>\n      <th>Incident Address</th>\n      <th>...</th>\n      <th>Bridge Highway Direction</th>\n      <th>Road Ramp</th>\n      <th>Bridge Highway Segment</th>\n      <th>Garage Lot Name</th>\n      <th>Ferry Direction</th>\n      <th>Ferry Terminal Name</th>\n      <th>Latitude</th>\n      <th>Longitude</th>\n      <th>Location</th>\n      <th>request_closing_time_sec</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>5</th>\n      <td>32306554</td>\n      <td>2015-12-31 23:56:30</td>\n      <td>2016-01-01 01:50:11</td>\n      <td>NYPD</td>\n      <td>New York City Police Department</td>\n      <td>Illegal Parking</td>\n      <td>Posted Parking Sign Violation</td>\n      <td>Street/Sidewalk</td>\n      <td>11215.0</td>\n      <td>260 21 STREET</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>40.660823</td>\n      <td>-73.992568</td>\n      <td>(40.66082272389114, -73.99256786342693)</td>\n      <td>6821.0</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>32308391</td>\n      <td>2015-12-31 23:53:58</td>\n      <td>2016-01-01 01:17:40</td>\n      <td>NYPD</td>\n      <td>New York City Police Department</td>\n      <td>Blocked Driveway</td>\n      <td>No Access</td>\n      <td>Street/Sidewalk</td>\n      <td>11219.0</td>\n      <td>1408 66 STREET</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>40.623793</td>\n      <td>-73.999539</td>\n      <td>(40.623793065806524, -73.99953890121567)</td>\n      <td>5022.0</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>32305074</td>\n      <td>2015-12-31 23:47:58</td>\n      <td>2016-01-01 08:18:47</td>\n      <td>NYPD</td>\n      <td>New York City Police Department</td>\n      <td>Illegal Parking</td>\n      <td>Posted Parking Sign Violation</td>\n      <td>Street/Sidewalk</td>\n      <td>11208.0</td>\n      <td>38 COX PLACE</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>40.687511</td>\n      <td>-73.874505</td>\n      <td>(40.68751060232221, -73.87450451131276)</td>\n      <td>30649.0</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>32310273</td>\n      <td>2015-12-31 23:44:52</td>\n      <td>2016-01-01 00:36:10</td>\n      <td>NYPD</td>\n      <td>New York City Police Department</td>\n      <td>Noise - Commercial</td>\n      <td>Loud Music/Party</td>\n      <td>Club/Bar/Restaurant</td>\n      <td>11217.0</td>\n      <td>622 DEGRAW STREET</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>40.679154</td>\n      <td>-73.983430</td>\n      <td>(40.679154133157326, -73.98342992763081)</td>\n      <td>3078.0</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>32306617</td>\n      <td>2015-12-31 23:40:59</td>\n      <td>2016-01-01 02:37:28</td>\n      <td>NYPD</td>\n      <td>New York City Police Department</td>\n      <td>Noise - Commercial</td>\n      <td>Loud Music/Party</td>\n      <td>Club/Bar/Restaurant</td>\n      <td>11234.0</td>\n      <td>2192 FLATBUSH AVENUE</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>40.616550</td>\n      <td>-73.930202</td>\n      <td>(40.61655032892211, -73.93020153359745)</td>\n      <td>10589.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 54 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {#76296158 .cell tags='[]' execution_count=23}\n``` {.python .cell-code}\n# Extract and count the unique values in the \"Complaint Type\" column\nbk_complaint_types = len(bk_data['Complaint Type'].unique())\n\n# Print the complaint types\nprint(f\"there are {bk_complaint_types} complaint types in Brooklyn.\")\n\n# Group by complaint type and count the number of occurrences\nbk_complaint_counts = bk_data.groupby('Complaint Type').size().reset_index(name='counts')\n\n# Sort the counts in descending order\nbk_complaint_counts = bk_complaint_counts.sort_values('counts', ascending=False)\n\nbk_data['Complaint Type'].value_counts()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nthere are 20 complaint types in Brooklyn.\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=23}\n```\nComplaint Type\nBlocked Driveway             36445\nIllegal Parking              33532\nNoise - Street/Sidewalk      13982\nNoise - Commercial           13855\nDerelict Vehicle              6257\nNoise - Vehicle               5965\nAnimal Abuse                  3191\nNoise - Park                  1575\nTraffic                       1258\nHomeless Encampment            948\nVending                        575\nNoise - House of Worship       389\nDrinking                       291\nUrinating in Public            155\nBike/Roller/Skate Chronic      124\nDisorderly Youth                79\nIllegal Fireworks               61\nGraffiti                        60\nPosting Advertisement           58\nPanhandling                     49\nName: count, dtype: int64\n```\n:::\n:::\n\n\n::: {#73de9607 .cell tags='[]' execution_count=24}\n``` {.python .cell-code}\n# Plot the bar graph\nplt.bar(bk_complaint_counts['Complaint Type'], bk_complaint_counts['counts'], color='blue')\nplt.xticks(rotation=90)\nplt.xlabel('Complaint Type')\nplt.ylabel('Counts')\nplt.title('Types of Complaints in Brooklyn')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-25-output-1.png){width=612 height=608}\n:::\n:::\n\n\n::: {#f5c1adde .cell tags='[]' execution_count=25}\n``` {.python .cell-code}\n# create a scatter plot of the concentration of complaints across Brooklyn\nbk_data.plot.scatter(x='Longitude', y='Latitude', s=0.1, alpha=0.5, figsize=(10, 8))\nplt.xlabel('Longitude')\nplt.ylabel('Latitude')\nplt.title('Scatter Plot of Complaints Concentration in Brooklyn')\n\n# create a hexbin plot of the concentration of complaints across Brooklyn\nbk_data.plot.hexbin(x='Longitude', y='Latitude', gridsize=30, cmap='Blues', figsize=(10, 8))\nplt.xlabel('Longitude')\nplt.ylabel('Latitude')\nplt.title('Hexbin Plot of Complaints Concentration in Brooklyn')\n\n# show the plots\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-26-output-1.png){width=847 height=676}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-26-output-2.png){width=792 height=676}\n:::\n:::\n\n\nThis code groups the data by both city and complaint type, counts the number of occurrences for each combination, and then prints the resulting output, which shows the various types of complaints in each city.\n\n::: {#5228076c .cell tags='[]' execution_count=26}\n``` {.python .cell-code}\n# Group by city and complaint type and count the number of occurrences\ncomplaints_by_city = df.groupby(['City', 'Complaint Type']).size().reset_index(name='counts')\n\n# Print the various types of complaints in each city\ncomplaints_by_city\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>City</th>\n      <th>Complaint Type</th>\n      <th>counts</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>ARVERNE</td>\n      <td>Animal Abuse</td>\n      <td>46</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>ARVERNE</td>\n      <td>Blocked Driveway</td>\n      <td>50</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>ARVERNE</td>\n      <td>Derelict Vehicle</td>\n      <td>32</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>ARVERNE</td>\n      <td>Disorderly Youth</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>ARVERNE</td>\n      <td>Drinking</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>787</th>\n      <td>Woodside</td>\n      <td>Blocked Driveway</td>\n      <td>27</td>\n    </tr>\n    <tr>\n      <th>788</th>\n      <td>Woodside</td>\n      <td>Derelict Vehicle</td>\n      <td>8</td>\n    </tr>\n    <tr>\n      <th>789</th>\n      <td>Woodside</td>\n      <td>Illegal Parking</td>\n      <td>124</td>\n    </tr>\n    <tr>\n      <th>790</th>\n      <td>Woodside</td>\n      <td>Noise - Commercial</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>791</th>\n      <td>Woodside</td>\n      <td>Noise - Street/Sidewalk</td>\n      <td>5</td>\n    </tr>\n  </tbody>\n</table>\n<p>792 rows Ã— 3 columns</p>\n</div>\n```\n:::\n:::\n\n\nThis code uses the `pd.pivot_table()` function to pivot the data in the original DataFrame df. The resulting DataFrame, `df_new`, has complaint types as rows, cities as columns, and the count of occurrences as the values. The fill_value=0 parameter fills any missing values with zeros. The resulting output shows the new DataFrame with cities as columns and complaint types in rows.\n\n::: {#92fd93ce .cell tags='[]' execution_count=27}\n``` {.python .cell-code}\n# Pivot the data to create a new DataFrame\ndf_new = pd.pivot_table(df, index='Complaint Type', columns='City', aggfunc=len, fill_value=0)\n\n# Print the new DataFrame\ndf_new.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead tr th {\n        text-align: left;\n    }\n\n    .dataframe thead tr:last-of-type th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr>\n      <th></th>\n      <th colspan=\"10\" halign=\"left\">Address Type</th>\n      <th>...</th>\n      <th colspan=\"10\" halign=\"left\">request_closing_time_sec</th>\n    </tr>\n    <tr>\n      <th>City</th>\n      <th>ARVERNE</th>\n      <th>ASTORIA</th>\n      <th>Astoria</th>\n      <th>BAYSIDE</th>\n      <th>BELLEROSE</th>\n      <th>BREEZY POINT</th>\n      <th>BRONX</th>\n      <th>BROOKLYN</th>\n      <th>CAMBRIA HEIGHTS</th>\n      <th>CENTRAL PARK</th>\n      <th>...</th>\n      <th>SOUTH OZONE PARK</th>\n      <th>SOUTH RICHMOND HILL</th>\n      <th>SPRINGFIELD GARDENS</th>\n      <th>STATEN ISLAND</th>\n      <th>SUNNYSIDE</th>\n      <th>Unknown City</th>\n      <th>WHITESTONE</th>\n      <th>WOODHAVEN</th>\n      <th>WOODSIDE</th>\n      <th>Woodside</th>\n    </tr>\n    <tr>\n      <th>Complaint Type</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Agency Issues</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>Animal Abuse</th>\n      <td>46</td>\n      <td>170</td>\n      <td>0</td>\n      <td>53</td>\n      <td>15</td>\n      <td>2</td>\n      <td>1971</td>\n      <td>3191</td>\n      <td>15</td>\n      <td>0</td>\n      <td>...</td>\n      <td>74</td>\n      <td>40</td>\n      <td>42</td>\n      <td>786</td>\n      <td>40</td>\n      <td>1</td>\n      <td>43</td>\n      <td>57</td>\n      <td>111</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>Animal in a Park</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>Bike/Roller/Skate Chronic</th>\n      <td>0</td>\n      <td>16</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>22</td>\n      <td>124</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>10</td>\n      <td>2</td>\n      <td>2</td>\n      <td>4</td>\n      <td>2</td>\n      <td>5</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>Blocked Driveway</th>\n      <td>50</td>\n      <td>3436</td>\n      <td>159</td>\n      <td>514</td>\n      <td>138</td>\n      <td>3</td>\n      <td>17062</td>\n      <td>36445</td>\n      <td>177</td>\n      <td>0</td>\n      <td>...</td>\n      <td>1202</td>\n      <td>1946</td>\n      <td>330</td>\n      <td>2845</td>\n      <td>278</td>\n      <td>86</td>\n      <td>279</td>\n      <td>1363</td>\n      <td>2038</td>\n      <td>27</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 2808 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {#611b9e08 .cell tags='[]' execution_count=28}\n``` {.python .cell-code}\n# Pivot table to get counts of complaint types for each city\ncomplaints_by_city = pd.pivot_table(data=df, index='Complaint Type', columns='City', aggfunc='size', fill_value=0)\n\ncomplaints_by_city.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>City</th>\n      <th>ARVERNE</th>\n      <th>ASTORIA</th>\n      <th>Astoria</th>\n      <th>BAYSIDE</th>\n      <th>BELLEROSE</th>\n      <th>BREEZY POINT</th>\n      <th>BRONX</th>\n      <th>BROOKLYN</th>\n      <th>CAMBRIA HEIGHTS</th>\n      <th>CENTRAL PARK</th>\n      <th>...</th>\n      <th>SOUTH OZONE PARK</th>\n      <th>SOUTH RICHMOND HILL</th>\n      <th>SPRINGFIELD GARDENS</th>\n      <th>STATEN ISLAND</th>\n      <th>SUNNYSIDE</th>\n      <th>Unknown City</th>\n      <th>WHITESTONE</th>\n      <th>WOODHAVEN</th>\n      <th>WOODSIDE</th>\n      <th>Woodside</th>\n    </tr>\n    <tr>\n      <th>Complaint Type</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Agency Issues</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>Animal Abuse</th>\n      <td>46</td>\n      <td>170</td>\n      <td>0</td>\n      <td>53</td>\n      <td>15</td>\n      <td>2</td>\n      <td>1971</td>\n      <td>3191</td>\n      <td>15</td>\n      <td>0</td>\n      <td>...</td>\n      <td>74</td>\n      <td>40</td>\n      <td>42</td>\n      <td>786</td>\n      <td>40</td>\n      <td>1</td>\n      <td>43</td>\n      <td>57</td>\n      <td>111</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>Animal in a Park</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>Bike/Roller/Skate Chronic</th>\n      <td>0</td>\n      <td>16</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>22</td>\n      <td>124</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>10</td>\n      <td>2</td>\n      <td>2</td>\n      <td>4</td>\n      <td>2</td>\n      <td>5</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>Blocked Driveway</th>\n      <td>50</td>\n      <td>3436</td>\n      <td>159</td>\n      <td>514</td>\n      <td>138</td>\n      <td>3</td>\n      <td>17062</td>\n      <td>36445</td>\n      <td>177</td>\n      <td>0</td>\n      <td>...</td>\n      <td>1202</td>\n      <td>1946</td>\n      <td>330</td>\n      <td>2845</td>\n      <td>278</td>\n      <td>86</td>\n      <td>279</td>\n      <td>1363</td>\n      <td>2038</td>\n      <td>27</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 54 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {#c5f0acba .cell jupyter='{\"source_hidden\":true}' tags='[]' execution_count=29}\n``` {.python .cell-code}\n# Plot the pivot table as a bar chart\nsns.set_style(\"whitegrid\")\nplt.figure(figsize=(20,10))\nsns.barplot(data=complaints_by_city, palette='Set3')\nplt.xticks(rotation=90, fontsize=12)\nplt.yticks(fontsize=12)\nplt.xlabel('City', fontsize=16)\nplt.ylabel('Complaint Type Count', fontsize=16)\nplt.title('Complaint Types in Each City', fontsize=20)\nplt.legend(loc='upper right', fontsize=14)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-30-output-1.png){width=1584 height=1013}\n:::\n:::\n\n\n## Statistical Analysis of `Request_Closing_Time`\n\n::: {#ae6cadbe .cell tags='[]' execution_count=30}\n``` {.python .cell-code}\n# Calculating the response time in hrs and min.\n\ndf['request_closing_time_hrs'] = df['Closed Date'].values - df['Created Date'].values\ndf['request_closing_time_min'] = df['request_closing_time_hrs']/np.timedelta64(1,'m')\n\ndf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Unique Key</th>\n      <th>Created Date</th>\n      <th>Closed Date</th>\n      <th>Agency</th>\n      <th>Agency Name</th>\n      <th>Complaint Type</th>\n      <th>Descriptor</th>\n      <th>Location Type</th>\n      <th>Incident Zip</th>\n      <th>Incident Address</th>\n      <th>...</th>\n      <th>Bridge Highway Segment</th>\n      <th>Garage Lot Name</th>\n      <th>Ferry Direction</th>\n      <th>Ferry Terminal Name</th>\n      <th>Latitude</th>\n      <th>Longitude</th>\n      <th>Location</th>\n      <th>request_closing_time_sec</th>\n      <th>request_closing_time_hrs</th>\n      <th>request_closing_time_min</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>32310363</td>\n      <td>2015-12-31 23:59:45</td>\n      <td>2016-01-01 00:55:15</td>\n      <td>NYPD</td>\n      <td>New York City Police Department</td>\n      <td>Noise - Street/Sidewalk</td>\n      <td>Loud Music/Party</td>\n      <td>Street/Sidewalk</td>\n      <td>10034.0</td>\n      <td>71 VERMILYEA AVENUE</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>40.865682</td>\n      <td>-73.923501</td>\n      <td>(40.86568153633767, -73.92350095571744)</td>\n      <td>3330.0</td>\n      <td>0 days 00:55:30</td>\n      <td>55.500000</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>32309934</td>\n      <td>2015-12-31 23:59:44</td>\n      <td>2016-01-01 01:26:57</td>\n      <td>NYPD</td>\n      <td>New York City Police Department</td>\n      <td>Blocked Driveway</td>\n      <td>No Access</td>\n      <td>Street/Sidewalk</td>\n      <td>11105.0</td>\n      <td>27-07 23 AVENUE</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>40.775945</td>\n      <td>-73.915094</td>\n      <td>(40.775945312321085, -73.91509393898605)</td>\n      <td>5233.0</td>\n      <td>0 days 01:27:13</td>\n      <td>87.216667</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>32309159</td>\n      <td>2015-12-31 23:59:29</td>\n      <td>2016-01-01 04:51:03</td>\n      <td>NYPD</td>\n      <td>New York City Police Department</td>\n      <td>Blocked Driveway</td>\n      <td>No Access</td>\n      <td>Street/Sidewalk</td>\n      <td>10458.0</td>\n      <td>2897 VALENTINE AVENUE</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>40.870325</td>\n      <td>-73.888525</td>\n      <td>(40.870324522111424, -73.88852464418646)</td>\n      <td>17494.0</td>\n      <td>0 days 04:51:34</td>\n      <td>291.566667</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>32305098</td>\n      <td>2015-12-31 23:57:46</td>\n      <td>2016-01-01 07:43:13</td>\n      <td>NYPD</td>\n      <td>New York City Police Department</td>\n      <td>Illegal Parking</td>\n      <td>Commercial Overnight Parking</td>\n      <td>Street/Sidewalk</td>\n      <td>10461.0</td>\n      <td>2940 BAISLEY AVENUE</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>40.835994</td>\n      <td>-73.828379</td>\n      <td>(40.83599404683083, -73.82837939584206)</td>\n      <td>27927.0</td>\n      <td>0 days 07:45:27</td>\n      <td>465.450000</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>32306529</td>\n      <td>2015-12-31 23:56:58</td>\n      <td>2016-01-01 03:24:42</td>\n      <td>NYPD</td>\n      <td>New York City Police Department</td>\n      <td>Illegal Parking</td>\n      <td>Blocked Sidewalk</td>\n      <td>Street/Sidewalk</td>\n      <td>11373.0</td>\n      <td>87-14 57 ROAD</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>40.733060</td>\n      <td>-73.874170</td>\n      <td>(40.733059618956815, -73.87416975810375)</td>\n      <td>12464.0</td>\n      <td>0 days 03:27:44</td>\n      <td>207.733333</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 56 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {#cca7e10a .cell tags='[]' execution_count=31}\n``` {.python .cell-code}\nplt.figure(figsize=(10,5))\nsns.barplot(x='Borough',y='request_closing_time_min',data=df)\nplt.title(\"Cities with avg. complaint resolved time\", fontsize=20)\nplt.xlabel(\"Borough\")\nplt.ylabel(\"Avg. complaints resolved time(min)\", labelpad=30)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-32-output-1.png){width=853 height=460}\n:::\n:::\n\n\n::: {#bb23e86d .cell execution_count=32}\n``` {.python .cell-code}\n# Calculate the average closing time by city\navg_closing_time_per_city = df.groupby('City')['request_closing_time_min'].mean().sort_values()\n\navg_closing_time_per_city\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n```\nCity\nARVERNE                137.840605\nROCKAWAY PARK          139.602908\nLITTLE NECK            155.031437\nOAKLAND GARDENS        156.240167\nBAYSIDE                160.062978\nFAR ROCKAWAY           161.193068\nNEW YORK               175.343723\nFLUSHING               177.446478\nFOREST HILLS           184.097636\nWHITESTONE             187.976467\nCORONA                 188.984584\nCOLLEGE POINT          190.393782\nJACKSON HEIGHTS        190.885368\nELMHURST               194.108392\nFRESH MEADOWS          200.741045\nREGO PARK              202.462138\nBREEZY POINT           205.197849\nEAST ELMHURST          206.801481\nCENTRAL PARK           206.921364\nSTATEN ISLAND          228.038305\nBROOKLYN               236.607935\nHoward Beach           241.750000\nAstoria                242.452302\nLong Island City       245.388922\nASTORIA                265.236501\nRIDGEWOOD              268.285547\nSAINT ALBANS           271.040767\nEast Elmhurst          273.630556\nWoodside               281.455622\nKEW GARDENS            283.319775\nJAMAICA                305.346459\nSOUTH OZONE PARK       308.283046\nSOUTH RICHMOND HILL    318.020470\nWOODHAVEN              321.714469\nRICHMOND HILL          321.749064\nMIDDLE VILLAGE         323.290492\nOZONE PARK             328.309146\nMASPETH                328.997706\nHOLLIS                 332.061427\nHOWARD BEACH           346.959615\nBRONX                  353.116425\nLONG ISLAND CITY       367.326726\nSUNNYSIDE              380.744297\nWOODSIDE               389.758733\nNEW HYDE PARK          423.396512\nGLEN OAKS              501.653463\nSPRINGFIELD GARDENS    510.113239\nCAMBRIA HEIGHTS        542.883117\nUnknown City           556.662562\nROSEDALE               569.194745\nBELLEROSE              576.173614\nQUEENS VILLAGE         593.920472\nFLORAL PARK            609.812160\nQUEENS                 717.171171\nName: request_closing_time_min, dtype: float64\n```\n:::\n:::\n\n\n::: {#2e402024 .cell tags='[]' execution_count=33}\n``` {.python .cell-code}\n# Create the horizontal bar chart\nfig, ax = plt.subplots(figsize=(10, 15))\nax.barh(avg_closing_time_per_city.index, avg_closing_time_per_city.values, color='teal')\n\n# Set the title and axis labels\nax.set_title('Average Request Closing Time by City')\n#ax.set_xlabel('Time Delta (seconds)')\nax.set_xlabel('Average Request Closing Time (minutes)')\nax.set_ylabel('City')\n\n# Invert the y-axis to show the cities with the highest closing times at the top\nax.invert_yaxis()\n\n# Display the plot\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-34-output-1.png){width=952 height=1193}\n:::\n:::\n\n\nLet's see the avg. response time across different types of complaints. We will also compare them across each borough.\n\n::: {#3d50f9ba .cell tags='[]' execution_count=34}\n``` {.python .cell-code}\n# Calculate the average closing time by complaint type\navg_closing_time_per_complaint = df.groupby('Complaint Type')['request_closing_time_min'].mean().sort_values()\n\navg_closing_time_per_complaint\n```\n\n::: {.cell-output .cell-output-display execution_count=34}\n```\nComplaint Type\nPosting Advertisement          121.437604\nIllegal Fireworks              168.558043\nNoise - Commercial             184.762676\nNoise - House of Worship       189.851451\nNoise - Park                   203.767592\nNoise - Street/Sidewalk        203.854924\nTraffic                        205.152002\nDisorderly Youth               206.062487\nNoise - Vehicle                209.363334\nUrinating in Public            215.988222\nBike/Roller/Skate Chronic      218.728140\nDrinking                       230.355009\nVending                        239.437973\nSqueegee                       242.670833\nHomeless Encampment            257.523075\nIllegal Parking                260.840595\nPanhandling                    264.225846\nBlocked Driveway               270.542025\nAnimal Abuse                   300.542601\nAgency Issues                  304.818750\nGraffiti                       387.939066\nDerelict Vehicle               422.660002\nAnimal in a Park             20210.566667\nName: request_closing_time_min, dtype: float64\n```\n:::\n:::\n\n\n::: {#36946708 .cell tags='[]' execution_count=35}\n``` {.python .cell-code}\n# Create the horizontal bar chart\nfig, ax = plt.subplots(figsize=(10, 15))\nax.barh(avg_closing_time_per_complaint.index, avg_closing_time_per_complaint.values, color='orange')\n\n# Set the title and axis labels\nax.set_title('Average Request Closing Time by Complaint')\n#ax.set_xlabel('Time Delta (seconds)')\nax.set_xlabel('Average Request Closing Time (minutes)')\nax.set_ylabel('Complaint Type')\n\n# Invert the y-axis to show the cities with the highest closing times at the top\nax.invert_yaxis()\n\n# Display the plot\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-36-output-1.png){width=961 height=1193}\n:::\n:::\n\n\nHere you can see that the `Animal in a Park` takes almost approximately 2 weeks to resolve. Other complaint types are more frequent where `Posting Advertisement` took the fewest amount of time and `Derelict Vehicle` is responded slower than others.\n\n::: {#4f9c1efc .cell tags='[]' execution_count=36}\n``` {.python .cell-code}\n# Create a list of boroughs\nboroughs = ['BRONX', 'BROOKLYN', 'MANHATTAN', 'QUEENS', 'STATEN ISLAND', 'Unspecified']\n\n# Create a figure with 5 subplots\nfig, axs = plt.subplots(nrows=2, ncols=3, figsize=(16, 10))\n\n# Set the title of the figure\nfig.suptitle('Average Response Time for Complaint Types by Borough', fontsize=16)\n\n# Loop through each borough and create a subplot\nfor i, borough in enumerate(boroughs):\n    # Calculate the average response time for each complaint type in the current borough\n    borough_df = df[df['Borough'] == borough].groupby('Complaint Type')['request_closing_time_min'].mean().sort_values(ascending=False)\n\n    # Create a subplot for the current borough\n    ax = axs[i//3, i%3]\n\n    # Set the title and x/y axis labels for the subplot\n    ax.set_title(borough)\n    ax.set_xlabel('Average Response Time (in minutes)')\n    ax.set_ylabel('Complaint Type')\n\n    # Create a horizontal bar chart for the average response time for each complaint type in the current borough\n    ax.barh(borough_df.index, borough_df.values, color='cornflowerblue')\n\n    # Set the x-axis limits\n    ax.set_xlim(0, 3000)\n\n    # Set the y-axis tick labels to be left-aligned\n    ax.tick_params(axis='y', which='major', pad=10, left=True)\n\n# Adjust the spacing between the subplots\nplt.subplots_adjust(left=0.1, bottom=0.1, right=0.9, top=0.85, wspace=0.4, hspace=0.5)\n\n# Display the plot\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-37-output-1.png){width=1471 height=907}\n:::\n:::\n\n\n### Hypothesis Testing\n\n::: {#11625208 .cell tags='[]' execution_count=37}\n``` {.python .cell-code}\nplt.figure(figsize=(12,8)) # set the size of the plot\n\nbxp = sns.boxplot(x=\"Complaint Type\", y=\"request_closing_time_min\", data=df)\n\nplt.xticks(rotation=90) # rotate x-axis labels for readability\nplt.ylim((0,2000))\nplt.title('Request Closing Time vs. Complaint Type') # add title\nplt.xlabel('Complaint Type') # add x-axis label\nplt.ylabel('Request Closing Time (in min)') # add y-axis label\n\nplt.show() # show the plot\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-38-output-1.png){width=976 height=830}\n:::\n:::\n\n\nLet's identify the relationship between Complaint Type and Request_Closing_Time using p-values.\n\n::: {#70747a27 .cell tags='[]' execution_count=38}\n``` {.python .cell-code}\nimport scipy.stats as stats\n\n# Subset the data to only include relevant columns\ndf_subset = df[['Complaint Type', 'request_closing_time_min']]\n\n# Drop rows with missing values\ndf_subset.dropna(inplace=True)\n\n# Create a dictionary to store the p-values for each Complaint Type\np_values = {}\n\n# Loop through each Complaint Type and perform a t-test\nfor complaint_type in df_subset['Complaint Type'].unique():\n    subset_data = df_subset[df_subset['Complaint Type'] == complaint_type]\n    _, p_value = stats.ttest_ind(subset_data['request_closing_time_min'], df_subset['request_closing_time_min'], equal_var=False)\n    p_values[complaint_type] = p_value\n\n# Print the p-values for each Complaint Type\nfor complaint_type, p_value in p_values.items():\n    print(f\"{complaint_type}: {p_value}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNoise - Street/Sidewalk: 1.0418660815085685e-213\nBlocked Driveway: 4.0197589683838275e-60\nIllegal Parking: 1.5138895255889238e-12\nDerelict Vehicle: 0.0\nNoise - Commercial: 0.0\nNoise - House of Worship: 1.936694912503301e-14\nPosting Advertisement: 5.705156559333243e-84\nNoise - Vehicle: 2.5199177802871664e-98\nAnimal Abuse: 5.499498875777252e-26\nVending: 0.004485741820533039\nTraffic: 9.456336836510554e-30\nDrinking: 0.008276021427926881\nBike/Roller/Skate Chronic: 0.0036117827071264017\nPanhandling: 0.6839990056391407\nNoise - Park: 3.112919243953218e-36\nHomeless Encampment: 0.21728278181990512\nUrinating in Public: 0.002482188862579256\nGraffiti: 0.00036920602249336374\nDisorderly Youth: 0.0002219206596024413\nIllegal Fireworks: 1.0221564314184692e-06\nAgency Issues: 0.521792708186724\nSqueegee: 0.9199000703670601\nAnimal in a Park: nan\n```\n:::\n:::\n\n\nwe create a contingency table using `pd.crosstab()` to count the number of complaints for each complaint type and city. Then, we use `chi2_contingency()` from the `scipy.stats` library to perform the chi-square test on the contingency table. Finally, we print the results including the chi-square value, p-value, degrees of freedom, and expected values.\n\nThe null hypothesis for the chi-square test is that there is no association between the two variables (in this case, Complaint Type and City), while the alternative hypothesis is that there is some association. If the p-value is less than our chosen significance level (e.g., 0.05), we reject the null hypothesis and conclude that there is evidence of a significant association between the variables.\n\n::: {#b6890a68 .cell tags='[]' execution_count=39}\n``` {.python .cell-code}\n# Import required libraries\nfrom scipy.stats import chi2_contingency\n\n# Create a contingency table\ncont_table = pd.crosstab(df['Complaint Type'], df['City'])\n\n# Perform the chi-square test\nchi2, pval, dof, expected = chi2_contingency(cont_table)\n\n# Set significance level\nalpha = 0.05\n\n# Print results\nprint(f\"Chi-square value: {chi2}\")\nprint(f\"P-value: {pval}\")\nprint(f\"Degrees of freedom: {dof}\")\nprint(\"Expected frequencies:\")\nprint(expected)\nprint(\"\\n\")\n\n# Check if p-value is less than alpha\nif p_value < alpha:\n    print(\"There is a significant difference between the two groups.\")\nelse:\n    print(\"There is no significant difference between the two groups.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nChi-square value: 145971.80461890675\nP-value: 0.0\nDegrees of freedom: 1166\nExpected frequencies:\n[[5.72095964e-03 1.76510380e-01 1.99902258e-02 ... 6.85189838e-02\n  9.62402361e-02 3.66671545e-03]\n [7.53021313e+00 2.32331788e+02 2.63121347e+01 ... 9.01881124e+01\n  1.26676211e+02 4.82631421e+00]\n [7.15119955e-04 2.20637975e-02 2.49877822e-03 ... 8.56487298e-03\n  1.20300295e-02 4.58339431e-04]\n ...\n [3.71576329e+00 1.14643492e+02 1.29836516e+01 ... 4.45030800e+01\n  6.25080334e+01 2.38153168e+00]\n [4.58391891e-01 1.41428942e+01 1.60171684e+00 ... 5.49008358e+00\n  7.71124892e+00 2.93795575e-01]\n [2.99277701e+00 9.23369927e+01 1.04573869e+01 ... 3.58439934e+01\n  5.03456735e+01 1.91815052e+00]]\n\n\nThere is no significant difference between the two groups.\n```\n:::\n:::\n\n\n## Kruskal-Wallis H Test - One-way ANOVA\n\nThe Kruskal-Wallis H Test is a non-parametric test, meaning that it makes no assumptions about the distribution of the data. However, it does assume that the samples are independent and that the variances of the populations are equal.\n\n$$\nH_0: \\text{There is no significant difference in the mean of Request\\_Closing\\_Time across Complaint types}\n$$\n\n$$\nH_1: \\text{There is a significant difference in the mean of Request\\_Closing\\_Time across Complaint types}\n$$\n\n::: {#f65be8f6 .cell tags='[]' execution_count=40}\n``` {.python .cell-code}\nfrom scipy.stats import kruskal\n\nanova_df = df[['Complaint Type', 'request_closing_time_min']]\n\nanova_df = anova_df.dropna()\n\nanova_df.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=40}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Complaint Type</th>\n      <th>request_closing_time_min</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Noise - Street/Sidewalk</td>\n      <td>55.500000</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Blocked Driveway</td>\n      <td>87.216667</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Blocked Driveway</td>\n      <td>291.566667</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Illegal Parking</td>\n      <td>465.450000</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Illegal Parking</td>\n      <td>207.733333</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#3ee6ba9d .cell tags='[]' execution_count=41}\n``` {.python .cell-code}\n# Create a dictionary to store the data for each complaint type\ncomplaint_types = df['Complaint Type'].unique()\ndata = {complaint_type: df.loc[df['Complaint Type'] == complaint_type, 'request_closing_time_min'] for complaint_type in complaint_types}\n\n# Perform the Kruskal-Wallis H Test\nstat, p = kruskal(*data.values())\n\n# Print the results\nprint(f\"Kruskal-Wallis H Test Results:\")\nprint(f\"Statistic: {stat:.4f}\")\nprint(f\"P-value: {p:.4f}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nKruskal-Wallis H Test Results:\nStatistic: 11988.2694\nP-value: 0.0000\n```\n:::\n:::\n\n\nSince the p value for the Complaint is less than 0.01, we accept alternate hypothesis testing (i.e. there's a significant difference in the mean response time of different types of complaints)\n\n## Observations and Outcomes\n\nHere are some of the major conclusions that can be drawn from the 311 Customer Service NYC dataset:\n\n1. **The most common complaint types** across all boroughs are related to street parking conditions and noise.\n\n2. **Brooklyn has the highest number of complaints** compared to other boroughs, while **Queens takes the longest to resolve complaints**.\n\n3. **The average response time varies** depending on the complaint type and borough, with some types and boroughs experiencing longer response times than others.\n\n4. **The scatter and hexbin plots for Brooklyn** illustrate the relationships between different complaint types and how they are clustered together.\n\n5. **The box plot shows significant variation** in response times across different complaint types.\n\n6. **Hypothesis testing** using the Kruskal-Wallis H Test and one-way ANOVA suggests that there are **statistically significant differences in response times** among different complaint types.\n\n7. **The p-value and chi-squared test** suggest that there is a **significant association between certain complaint types and boroughs**.\n\n8. Overall, the **analysis of the 311 customer service dataset provides valuable insights** into common complaints and response times across boroughs, which can help inform decisions on **resource allocation and policy changes**.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}