{
  "hash": "7eca13f2f3b220d80def6183132bf167",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Synthetic Data Generation and Analysis\"\nauthor: Chaance Graves\ndate: \"2024-11-20\"\ndate-modified: \"2024-11-23\"\nformat:\n  html:\n    toc: true\n    toc-title: Contents\n    toc-location: right\n    code-fold: true\n---\n\n\n# Exploring Synthetic Data Generation Techniques\n\nThis project demonstrates basic synthetic data generation and analysis using Python.\n\n## Random Data Generation and Visualization\n\n::: {#b21f2787 .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Set random seed for reproducibility\nnp.random.seed(42)\n\n# Generate synthetic student test score data\ndef generate_student_scores(num_students=100):\n    # Simulate scores for three different subjects\n    math_scores = np.random.normal(loc=75, scale=10, size=num_students)\n    science_scores = math_scores + np.random.normal(loc=5, scale=5, size=num_students)\n    english_scores = np.random.normal(loc=70, scale=12, size=num_students)\n    \n    # Create a DataFrame\n    student_data = pd.DataFrame({\n        'Student_ID': range(1, num_students + 1),\n        'Math_Score': np.round(math_scores, 2),\n        'Science_Score': np.round(science_scores, 2),\n        'English_Score': np.round(english_scores, 2)\n    })\n    \n    return student_data\n\n# Generate the synthetic dataset\nstudents_df = generate_student_scores()\n\n# Descriptive Statistics\nprint(\"Descriptive Statistics:\")\nprint(students_df.describe())\n\n# Visualization of Score Distributions\nplt.figure(figsize=(12, 4))\n\n# Subplot 1: Histogram of Scores\nplt.subplot(1, 2, 1)\nstudents_df[['Math_Score', 'Science_Score', 'English_Score']].hist(bins=15, ax=plt.gca())\nplt.title('Distribution of Test Scores')\nplt.tight_layout()\n\n# Subplot 2: Box Plot of Scores\nplt.subplot(1, 2, 2)\nsns.boxplot(data=students_df[['Math_Score', 'Science_Score', 'English_Score']])\nplt.title('Box Plot of Test Scores')\nplt.tight_layout()\n\nplt.show()\n\n# Correlation Analysis\ncorrelation_matrix = students_df[['Math_Score', 'Science_Score', 'English_Score']].corr()\nprint(\"\\nCorrelation Matrix:\")\nprint(correlation_matrix)\n\n# Correlation Heatmap\nplt.figure(figsize=(8, 6))\nsns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', center=0)\nplt.title('Correlation Heatmap of Test Scores')\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDescriptive Statistics:\n       Student_ID  Math_Score  Science_Score  English_Score\ncount  100.000000  100.000000     100.000000     100.000000\nmean    50.500000   73.961600      79.072900      70.780200\nstd     29.011492    9.082117       9.664472      13.011703\nmin      1.000000   48.800000      55.190000      31.100000\n25%     25.750000   68.987500      73.195000      62.135000\n50%     50.500000   73.730000      78.040000      71.170000\n75%     75.250000   79.062500      84.557500      78.457500\nmax    100.000000   93.520000     105.220000     116.230000\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n/tmp/ipykernel_170946/3181019396.py:38: UserWarning:\n\nTo output multiple subplots, the figure containing the passed axes is being cleared.\n\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-2-output-3.png){width=1142 height=354}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCorrelation Matrix:\n               Math_Score  Science_Score  English_Score\nMath_Score       1.000000       0.872429       0.190887\nScience_Score    0.872429       1.000000       0.161229\nEnglish_Score    0.190887       0.161229       1.000000\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-2-output-5.png){width=707 height=566}\n:::\n:::\n\n\n## Score Analysis and Insights\n\n::: {#d119c43d .cell execution_count=2}\n``` {.python .cell-code}\n# Calculate additional insights\ndef analyze_student_scores(df):\n    # Calculate overall performance\n    df['Average_Score'] = df[['Math_Score', 'Science_Score', 'English_Score']].mean(axis=1)\n    \n    # Identify top and bottom performers\n    top_students = df.nlargest(5, 'Average_Score')\n    bottom_students = df.nsmallest(5, 'Average_Score')\n    \n    print(\"\\nTop 5 Students:\")\n    print(top_students)\n    \n    print(\"\\nBottom 5 Students:\")\n    print(bottom_students)\n    \n    return df\n\n# Perform analysis\nstudents_df = analyze_student_scores(students_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nTop 5 Students:\n    Student_ID  Math_Score  Science_Score  English_Score  Average_Score\n20          21       89.66          98.61          97.78      95.350000\n9           10       80.43          85.05         116.23      93.903333\n6            7       90.79         105.22          76.18      90.730000\n82          83       89.78          89.42          89.03      89.410000\n31          32       93.52          98.87          72.60      88.330000\n\nBottom 5 Students:\n    Student_ID  Math_Score  Science_Score  English_Score  Average_Score\n74          75       48.80          55.19          58.22      54.070000\n62          63       63.94          74.73          31.10      56.590000\n23          24       60.75          58.74          50.65      56.713333\n44          45       60.21          66.51          55.60      60.773333\n63          64       63.04          63.93          57.71      61.560000\n```\n:::\n:::\n\n\n## Key Insights\n\n1. Demonstrates synthetic data generation techniques\n2. Provides statistical analysis of generated data\n3. Creates visualizations to explore data distributions\n4. Shows correlation between different subject scores\n\n## Methodology Notes\n\n- Uses normal distribution to simulate realistic score variations\n- Introduces correlations between subject scores\n- Provides multiple perspectives on the synthetic dataset\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}